
ReadSensorToUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006548  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff8  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d8  080076d8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076e0  080076e0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080076e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000018  08007700  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08007700  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b63  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b9  00000000  00000000  00030bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002460  00000000  00000000  00033d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012044  00000000  00000000  000361d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b688  00000000  00000000  00048214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c5b  00000000  00000000  000e389c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004398  00000000  00000000  000e44f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e8890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080066c8 	.word	0x080066c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080066c8 	.word	0x080066c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
uint32_t ID;
int x_pos = 0;
int lastY = 0;

int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af02      	add	r7, sp, #8
  HAL_Init();
 80004da:	f003 ff6b 	bl	80043b4 <HAL_Init>
  SystemClock_Config();
 80004de:	f000 f8ad 	bl	800063c <SystemClock_Config>

  MX_GPIO_Init();
 80004e2:	f000 f9f5 	bl	80008d0 <MX_GPIO_Init>
  MX_CRC_Init();
 80004e6:	f000 f963 	bl	80007b0 <MX_CRC_Init>
  MX_TIM1_Init();
 80004ea:	f000 f975 	bl	80007d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 f9c3 	bl	8000878 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80004f2:	f000 f90b 	bl	800070c <MX_ADC1_Init>
  HAL_InitTick(0);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f003 ff7e 	bl	80043f8 <HAL_InitTick>

  HAL_TIM_Base_Start(&htim1);
 80004fc:	4821      	ldr	r0, [pc, #132]	; (8000584 <main+0xb0>)
 80004fe:	f005 fb29 	bl	8005b54 <HAL_TIM_Base_Start>
  ID = readID();
 8000502:	f001 fdd3 	bl	80020ac <readID>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <main+0xb4>)
 800050c:	601a      	str	r2, [r3, #0]

  HAL_Delay(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f003 ffc2 	bl	8004498 <HAL_Delay>
  tft_init (ID);
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <main+0xb4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	b29b      	uxth	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fa06 	bl	800192c <tft_init>
  setRotation(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f002 fbfb 	bl	8002d1c <setRotation>
  fillScreen(BLACK);
 8000526:	2000      	movs	r0, #0
 8000528:	f003 f982 	bl	8003830 <fillScreen>
  fillRect(0, 0, 480, 28, WHITE);
 800052c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	231c      	movs	r3, #28
 8000534:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f003 fb8e 	bl	8003c5c <fillRect>
  printnewtstr(10, 20, BLUE, &mono12x7bold, 1, ">> GRAPH MONITOR");
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <main+0xb8>)
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2301      	movs	r3, #1
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <main+0xbc>)
 800054a:	221f      	movs	r2, #31
 800054c:	2114      	movs	r1, #20
 800054e:	200a      	movs	r0, #10
 8000550:	f003 fea6 	bl	80042a0 <printnewtstr>

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000554:	480f      	ldr	r0, [pc, #60]	; (8000594 <main+0xc0>)
 8000556:	f004 f807 	bl	8004568 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800055a:	f04f 31ff 	mov.w	r1, #4294967295
 800055e:	480d      	ldr	r0, [pc, #52]	; (8000594 <main+0xc0>)
 8000560:	f004 f8e9 	bl	8004736 <HAL_ADC_PollForConversion>
	  uint16_t analogValue = HAL_ADC_GetValue(&hadc1);
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <main+0xc0>)
 8000566:	f004 f971 	bl	800484c <HAL_ADC_GetValue>
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
	  HAL_ADC_Stop(&hadc1);
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0xc0>)
 8000570:	f004 f8ae 	bl	80046d0 <HAL_ADC_Stop>

	  graph(analogValue);
 8000574:	88fb      	ldrh	r3, [r7, #6]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f80e 	bl	8000598 <graph>
//	  drawGrid();
	  HAL_Delay(20);
 800057c:	2014      	movs	r0, #20
 800057e:	f003 ff8b 	bl	8004498 <HAL_Delay>
  {
 8000582:	e7e7      	b.n	8000554 <main+0x80>
 8000584:	20000088 	.word	0x20000088
 8000588:	20000114 	.word	0x20000114
 800058c:	080066e0 	.word	0x080066e0
 8000590:	08007174 	.word	0x08007174
 8000594:	20000038 	.word	0x20000038

08000598 <graph>:
//		lastY = 0;
//	}
//	fillRect(x_pos, 32, x_pos+1, GRAPH_HEIGHT, BLACK);
//}

void graph(uint16_t nilai) {
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b087      	sub	sp, #28
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
  int newY = 10 + GRAPH_HEIGHT - GRAPH_OFFSET_Y - nilai * GRAPH_HEIGHT / 9000;
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	4a22      	ldr	r2, [pc, #136]	; (8000630 <graph+0x98>)
 80005a6:	fb82 1203 	smull	r1, r2, r2, r3
 80005aa:	441a      	add	r2, r3
 80005ac:	1112      	asrs	r2, r2, #4
 80005ae:	17db      	asrs	r3, r3, #31
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	f503 7391 	add.w	r3, r3, #290	; 0x122
 80005b6:	60fb      	str	r3, [r7, #12]

  drawLine(x_pos - 1, lastY, x_pos, newY, GREEN);
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <graph+0x9c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	3b01      	subs	r3, #1
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b218      	sxth	r0, r3
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <graph+0xa0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	b219      	sxth	r1, r3
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <graph+0x9c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	b21a      	sxth	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	b21b      	sxth	r3, r3
 80005d4:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80005d8:	9400      	str	r4, [sp, #0]
 80005da:	f003 fadd 	bl	8003b98 <drawLine>
  lastY = newY;
 80005de:	4a16      	ldr	r2, [pc, #88]	; (8000638 <graph+0xa0>)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6013      	str	r3, [r2, #0]
  x_pos += 2; // Menambahkan jarak antara grafik
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <graph+0x9c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3302      	adds	r3, #2
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <graph+0x9c>)
 80005ec:	6013      	str	r3, [r2, #0]

  if (x_pos > GRAPH_WIDTH) {
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <graph+0x9c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80005f6:	dd05      	ble.n	8000604 <graph+0x6c>
    x_pos = 10;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <graph+0x9c>)
 80005fa:	220a      	movs	r2, #10
 80005fc:	601a      	str	r2, [r3, #0]
    lastY = 0;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <graph+0xa0>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
  }
  fillRect(x_pos, lastY, x_pos+1, newY, BLACK);
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <graph+0x9c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b218      	sxth	r0, r3
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <graph+0xa0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	b219      	sxth	r1, r3
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <graph+0x9c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	3301      	adds	r3, #1
 8000618:	b29b      	uxth	r3, r3
 800061a:	b21a      	sxth	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	b21b      	sxth	r3, r3
 8000620:	2400      	movs	r4, #0
 8000622:	9400      	str	r4, [sp, #0]
 8000624:	f003 fb1a 	bl	8003c5c <fillRect>
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	88888889 	.word	0x88888889
 8000634:	20000118 	.word	0x20000118
 8000638:	2000011c 	.word	0x2000011c

0800063c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 f810 	bl	8006670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SystemClock_Config+0xc8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a26      	ldr	r2, [pc, #152]	; (8000704 <SystemClock_Config+0xc8>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <SystemClock_Config+0xc8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <SystemClock_Config+0xcc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a20      	ldr	r2, [pc, #128]	; (8000708 <SystemClock_Config+0xcc>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <SystemClock_Config+0xcc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006ac:	230c      	movs	r3, #12
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fd9f 	bl	8005204 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f976 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2103      	movs	r1, #3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 f801 	bl	80056f4 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f8:	f000 f960 	bl	80009bc <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x9c>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800072a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_ADC1_Init+0x98>)
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_ADC1_Init+0xa0>)
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000768:	2201      	movs	r2, #1
 800076a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_ADC1_Init+0x98>)
 800076e:	f003 feb7 	bl	80044e0 <HAL_ADC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f920 	bl	80009bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800077c:	2306      	movs	r3, #6
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_ADC1_Init+0x98>)
 800078e:	f004 f86b 	bl	8004868 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000798:	f000 f910 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000038 	.word	0x20000038
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001

080007b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_CRC_Init+0x20>)
 80007b6:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <MX_CRC_Init+0x24>)
 80007b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_CRC_Init+0x20>)
 80007bc:	f004 fb67 	bl	8004e8e <HAL_CRC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007c6:	f000 f8f9 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000080 	.word	0x20000080
 80007d4:	40023000 	.word	0x40023000

080007d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_TIM1_Init+0x98>)
 80007f6:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <MX_TIM1_Init+0x9c>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_TIM1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_TIM1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_TIM1_Init+0x98>)
 8000808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_TIM1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_TIM1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_TIM1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_TIM1_Init+0x98>)
 8000822:	f005 f947 	bl	8005ab4 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f8c6 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_TIM1_Init+0x98>)
 800083e:	f005 f9e3 	bl	8005c08 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000848:	f000 f8b8 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM1_Init+0x98>)
 800085a:	f005 fbb7 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000864:	f000 f8aa 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000088 	.word	0x20000088
 8000874:	40010000 	.word	0x40010000

08000878 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_USART1_UART_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 8000884:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 800088c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000890:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 80008a0:	220c      	movs	r2, #12
 80008a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 80008b6:	f005 fbf7 	bl	80060a8 <HAL_MultiProcessor_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f87c 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000d0 	.word	0x200000d0
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_GPIO_Init+0xe0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <MX_GPIO_Init+0xe0>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_GPIO_Init+0xe0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_GPIO_Init+0xe0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <MX_GPIO_Init+0xe0>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_GPIO_Init+0xe0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_GPIO_Init+0xe0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <MX_GPIO_Init+0xe0>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_GPIO_Init+0xe0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_GPIO_Init+0xe0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <MX_GPIO_Init+0xe0>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_GPIO_Init+0xe0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000956:	2200      	movs	r2, #0
 8000958:	f248 013e 	movw	r1, #32830	; 0x803e
 800095c:	4815      	ldr	r0, [pc, #84]	; (80009b4 <MX_GPIO_Init+0xe4>)
 800095e:	f004 fc37 	bl	80051d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000962:	2200      	movs	r2, #0
 8000964:	217b      	movs	r1, #123	; 0x7b
 8000966:	4814      	ldr	r0, [pc, #80]	; (80009b8 <MX_GPIO_Init+0xe8>)
 8000968:	f004 fc32 	bl	80051d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800096c:	f248 033e 	movw	r3, #32830	; 0x803e
 8000970:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0xe4>)
 8000986:	f004 fa9f 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800098a:	237b      	movs	r3, #123	; 0x7b
 800098c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0xe8>)
 80009a2:	f004 fa91 	bl	8004ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020400 	.word	0x40020400

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_ADC_MspInit+0x7c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d127      	bne.n	8000a8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a72:	23c0      	movs	r3, #192	; 0xc0
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a76:	2303      	movs	r3, #3
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a86:	f004 fa1f 	bl	8004ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40012000 	.word	0x40012000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_CRC_MspInit+0x3c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d10d      	bne.n	8000ace <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_CRC_MspInit+0x40>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <HAL_CRC_MspInit+0x40>)
 8000abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <HAL_CRC_MspInit+0x40>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023000 	.word	0x40023000
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <HAL_TIM_Base_MspInit+0x3c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10d      	bne.n	8000b12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_TIM_Base_MspInit+0x40>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_TIM_Base_MspInit+0x40>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_TIM_Base_MspInit+0x40>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40010000 	.word	0x40010000
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b54:	f043 0310 	orr.w	r3, r3, #16
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b94:	2307      	movs	r3, #7
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000ba0:	f004 f992 	bl	8004ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f003 fc28 	bl	8004458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <delay+0x2c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000c40:	bf00      	nop
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <delay+0x2c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d8f9      	bhi.n	8000c42 <delay+0x12>
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	20000088 	.word	0x20000088

08000c60 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f004 faac 	bl	80051d0 <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f004 fa9c 	bl	80051d0 <HAL_GPIO_WritePin>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f004 f902 	bl	8004ec8 <HAL_GPIO_Init>
}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f004 f8ea 	bl	8004ec8 <HAL_GPIO_Init>
}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <width+0x14>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000004 	.word	0x20000004

08000d14 <height>:

uint16_t height(void)
{ return _height; }
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <height+0x14>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000006 	.word	0x20000006

08000d2c <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	b29b      	uxth	r3, r3
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	115b      	asrs	r3, r3, #5
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	105b      	asrs	r3, r3, #1
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	b29b      	uxth	r3, r3
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	121b      	asrs	r3, r3, #8
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f023 0307 	bic.w	r3, r3, #7
 8000dc2:	b2db      	uxtb	r3, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	10db      	asrs	r3, r3, #3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f023 0303 	bic.w	r3, r3, #3
 8000de4:	b2db      	uxtb	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	b2db      	uxtb	r3, r3
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	71bb      	strb	r3, [r7, #6]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	717b      	strb	r3, [r7, #5]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e2a:	f023 0307 	bic.w	r3, r3, #7
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	797b      	ldrb	r3, [r7, #5]
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af02      	add	r7, sp, #8
 8000e60:	4603      	mov	r3, r0
 8000e62:	460a      	mov	r2, r1
 8000e64:	80fb      	strh	r3, [r7, #6]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80bb      	strh	r3, [r7, #4]
 8000e6a:	f107 020e 	add.w	r2, r7, #14
 8000e6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e72:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f001 fa56 	bl	800232c <readGRAM>
 8000e80:	89fb      	ldrh	r3, [r7, #14]
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	460a      	mov	r2, r1
 8000e94:	80fb      	strh	r3, [r7, #6]
 8000e96:	4613      	mov	r3, r2
 8000e98:	80bb      	strh	r3, [r7, #4]
 8000e9a:	88ba      	ldrh	r2, [r7, #4]
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f8f5 	bl	8001090 <writecmddata>
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	6039      	str	r1, [r7, #0]
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	717b      	strb	r3, [r7, #5]
 8000ebe:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f99c 	bl	8001204 <WriteCmdParamN>
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <setReadDir>:

void startWrite() {}
void endWrite() {}

void setReadDir (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4811      	ldr	r0, [pc, #68]	; (8000f20 <setReadDir+0x4c>)
 8000edc:	f7ff fee0 	bl	8000ca0 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	480f      	ldr	r0, [pc, #60]	; (8000f20 <setReadDir+0x4c>)
 8000ee4:	f7ff fedc 	bl	8000ca0 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <setReadDir+0x50>)
 8000eee:	f7ff fed7 	bl	8000ca0 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <setReadDir+0x4c>)
 8000ef6:	f7ff fed3 	bl	8000ca0 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000efa:	2110      	movs	r1, #16
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <setReadDir+0x4c>)
 8000efe:	f7ff fecf 	bl	8000ca0 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000f02:	2120      	movs	r1, #32
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <setReadDir+0x4c>)
 8000f06:	f7ff fecb 	bl	8000ca0 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <setReadDir+0x4c>)
 8000f0e:	f7ff fec7 	bl	8000ca0 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000f12:	2120      	movs	r1, #32
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <setReadDir+0x50>)
 8000f16:	f7ff fec3 	bl	8000ca0 <PIN_INPUT>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020000 	.word	0x40020000

08000f28 <setWriteDir>:

void setWriteDir (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <setWriteDir+0x4c>)
 8000f30:	f7ff fecc 	bl	8000ccc <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000f34:	2102      	movs	r1, #2
 8000f36:	480f      	ldr	r0, [pc, #60]	; (8000f74 <setWriteDir+0x4c>)
 8000f38:	f7ff fec8 	bl	8000ccc <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <setWriteDir+0x50>)
 8000f42:	f7ff fec3 	bl	8000ccc <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000f46:	2108      	movs	r1, #8
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <setWriteDir+0x4c>)
 8000f4a:	f7ff febf 	bl	8000ccc <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <setWriteDir+0x4c>)
 8000f52:	f7ff febb 	bl	8000ccc <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000f56:	2120      	movs	r1, #32
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <setWriteDir+0x4c>)
 8000f5a:	f7ff feb7 	bl	8000ccc <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <setWriteDir+0x4c>)
 8000f62:	f7ff feb3 	bl	8000ccc <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000f66:	2120      	movs	r1, #32
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <setWriteDir+0x50>)
 8000f6a:	f7ff feaf 	bl	8000ccc <PIN_OUTPUT>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020000 	.word	0x40020000

08000f7c <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff10 	bl	8000dae <color565_to_r>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff1b 	bl	8000dd0 <color565_to_g>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff26 	bl	8000df2 <color565_to_b>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	737b      	strb	r3, [r7, #13]
    write8(r);
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <write24+0x108>)
 8000fac:	4a36      	ldr	r2, [pc, #216]	; (8001088 <write24+0x10c>)
 8000fae:	619a      	str	r2, [r3, #24]
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <write24+0x110>)
 8000fb2:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	035b      	lsls	r3, r3, #13
 8000fbc:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	109b      	asrs	r3, r3, #2
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <write24+0x108>)
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4a2e      	ldr	r2, [pc, #184]	; (800108c <write24+0x110>)
 8000fd2:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	2102      	movs	r1, #2
 8000fda:	482a      	ldr	r0, [pc, #168]	; (8001084 <write24+0x108>)
 8000fdc:	f7ff fe40 	bl	8000c60 <PIN_LOW>
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4828      	ldr	r0, [pc, #160]	; (8001084 <write24+0x108>)
 8000fe4:	f7ff fe4c 	bl	8000c80 <PIN_HIGH>
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4826      	ldr	r0, [pc, #152]	; (8001084 <write24+0x108>)
 8000fec:	f7ff fe48 	bl	8000c80 <PIN_HIGH>
    write8(g);
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <write24+0x108>)
 8000ff2:	4a25      	ldr	r2, [pc, #148]	; (8001088 <write24+0x10c>)
 8000ff4:	619a      	str	r2, [r3, #24]
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <write24+0x110>)
 8000ff8:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000ffc:	619a      	str	r2, [r3, #24]
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	035b      	lsls	r3, r3, #13
 8001002:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	109b      	asrs	r3, r3, #2
 800100a:	f003 0320 	and.w	r3, r3, #32
 800100e:	431a      	orrs	r2, r3
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <write24+0x108>)
 8001012:	619a      	str	r2, [r3, #24]
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <write24+0x110>)
 8001018:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	2102      	movs	r1, #2
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <write24+0x108>)
 8001022:	f7ff fe1d 	bl	8000c60 <PIN_LOW>
 8001026:	2102      	movs	r1, #2
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <write24+0x108>)
 800102a:	f7ff fe29 	bl	8000c80 <PIN_HIGH>
 800102e:	2102      	movs	r1, #2
 8001030:	4814      	ldr	r0, [pc, #80]	; (8001084 <write24+0x108>)
 8001032:	f7ff fe25 	bl	8000c80 <PIN_HIGH>
    write8(b);
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <write24+0x108>)
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <write24+0x10c>)
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <write24+0x110>)
 800103e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001042:	619a      	str	r2, [r3, #24]
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	035b      	lsls	r3, r3, #13
 8001048:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	109b      	asrs	r3, r3, #2
 8001050:	f003 0320 	and.w	r3, r3, #32
 8001054:	431a      	orrs	r2, r3
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <write24+0x108>)
 8001058:	619a      	str	r2, [r3, #24]
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <write24+0x110>)
 800105e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	2102      	movs	r1, #2
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <write24+0x108>)
 8001068:	f7ff fdfa 	bl	8000c60 <PIN_LOW>
 800106c:	2102      	movs	r1, #2
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <write24+0x108>)
 8001070:	f7ff fe06 	bl	8000c80 <PIN_HIGH>
 8001074:	2102      	movs	r1, #2
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <write24+0x108>)
 8001078:	f7ff fe02 	bl	8000c80 <PIN_HIGH>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40020000 	.word	0x40020000
 8001088:	80200000 	.word	0x80200000
 800108c:	40020400 	.word	0x40020400

08001090 <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	4613      	mov	r3, r2
 800109e:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80010a0:	2108      	movs	r1, #8
 80010a2:	4855      	ldr	r0, [pc, #340]	; (80011f8 <writecmddata+0x168>)
 80010a4:	f7ff fddc 	bl	8000c60 <PIN_LOW>
    WriteCmd(cmd);
 80010a8:	2104      	movs	r1, #4
 80010aa:	4853      	ldr	r0, [pc, #332]	; (80011f8 <writecmddata+0x168>)
 80010ac:	f7ff fdd8 	bl	8000c60 <PIN_LOW>
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	73bb      	strb	r3, [r7, #14]
 80010bc:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <writecmddata+0x168>)
 80010be:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <writecmddata+0x16c>)
 80010c0:	619a      	str	r2, [r3, #24]
 80010c2:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <writecmddata+0x170>)
 80010c4:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80010c8:	619a      	str	r2, [r3, #24]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	035b      	lsls	r3, r3, #13
 80010ce:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	109b      	asrs	r3, r3, #2
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	431a      	orrs	r2, r3
 80010dc:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <writecmddata+0x168>)
 80010de:	619a      	str	r2, [r3, #24]
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <writecmddata+0x170>)
 80010e4:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	2102      	movs	r1, #2
 80010ec:	4842      	ldr	r0, [pc, #264]	; (80011f8 <writecmddata+0x168>)
 80010ee:	f7ff fdb7 	bl	8000c60 <PIN_LOW>
 80010f2:	2102      	movs	r1, #2
 80010f4:	4840      	ldr	r0, [pc, #256]	; (80011f8 <writecmddata+0x168>)
 80010f6:	f7ff fdc3 	bl	8000c80 <PIN_HIGH>
 80010fa:	2102      	movs	r1, #2
 80010fc:	483e      	ldr	r0, [pc, #248]	; (80011f8 <writecmddata+0x168>)
 80010fe:	f7ff fdbf 	bl	8000c80 <PIN_HIGH>
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <writecmddata+0x168>)
 8001104:	4a3d      	ldr	r2, [pc, #244]	; (80011fc <writecmddata+0x16c>)
 8001106:	619a      	str	r2, [r3, #24]
 8001108:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <writecmddata+0x170>)
 800110a:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800110e:	619a      	str	r2, [r3, #24]
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	035b      	lsls	r3, r3, #13
 8001114:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	109b      	asrs	r3, r3, #2
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	431a      	orrs	r2, r3
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <writecmddata+0x168>)
 8001124:	619a      	str	r2, [r3, #24]
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	4a35      	ldr	r2, [pc, #212]	; (8001200 <writecmddata+0x170>)
 800112a:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	2102      	movs	r1, #2
 8001132:	4831      	ldr	r0, [pc, #196]	; (80011f8 <writecmddata+0x168>)
 8001134:	f7ff fd94 	bl	8000c60 <PIN_LOW>
 8001138:	2102      	movs	r1, #2
 800113a:	482f      	ldr	r0, [pc, #188]	; (80011f8 <writecmddata+0x168>)
 800113c:	f7ff fda0 	bl	8000c80 <PIN_HIGH>
 8001140:	2102      	movs	r1, #2
 8001142:	482d      	ldr	r0, [pc, #180]	; (80011f8 <writecmddata+0x168>)
 8001144:	f7ff fd9c 	bl	8000c80 <PIN_HIGH>
 8001148:	2104      	movs	r1, #4
 800114a:	482b      	ldr	r0, [pc, #172]	; (80011f8 <writecmddata+0x168>)
 800114c:	f7ff fd98 	bl	8000c80 <PIN_HIGH>
    WriteData(dat);
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	737b      	strb	r3, [r7, #13]
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <writecmddata+0x168>)
 800115e:	4a27      	ldr	r2, [pc, #156]	; (80011fc <writecmddata+0x16c>)
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <writecmddata+0x170>)
 8001164:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001168:	619a      	str	r2, [r3, #24]
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	035b      	lsls	r3, r3, #13
 800116e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	109b      	asrs	r3, r3, #2
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	431a      	orrs	r2, r3
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <writecmddata+0x168>)
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <writecmddata+0x170>)
 8001184:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	2102      	movs	r1, #2
 800118c:	481a      	ldr	r0, [pc, #104]	; (80011f8 <writecmddata+0x168>)
 800118e:	f7ff fd67 	bl	8000c60 <PIN_LOW>
 8001192:	2102      	movs	r1, #2
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <writecmddata+0x168>)
 8001196:	f7ff fd73 	bl	8000c80 <PIN_HIGH>
 800119a:	2102      	movs	r1, #2
 800119c:	4816      	ldr	r0, [pc, #88]	; (80011f8 <writecmddata+0x168>)
 800119e:	f7ff fd6f 	bl	8000c80 <PIN_HIGH>
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <writecmddata+0x168>)
 80011a4:	4a15      	ldr	r2, [pc, #84]	; (80011fc <writecmddata+0x16c>)
 80011a6:	619a      	str	r2, [r3, #24]
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <writecmddata+0x170>)
 80011aa:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	035b      	lsls	r3, r3, #13
 80011b4:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	109b      	asrs	r3, r3, #2
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	431a      	orrs	r2, r3
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <writecmddata+0x168>)
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <writecmddata+0x170>)
 80011ca:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	2102      	movs	r1, #2
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <writecmddata+0x168>)
 80011d4:	f7ff fd44 	bl	8000c60 <PIN_LOW>
 80011d8:	2102      	movs	r1, #2
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <writecmddata+0x168>)
 80011dc:	f7ff fd50 	bl	8000c80 <PIN_HIGH>
 80011e0:	2102      	movs	r1, #2
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <writecmddata+0x168>)
 80011e4:	f7ff fd4c 	bl	8000c80 <PIN_HIGH>
    CS_IDLE;
 80011e8:	2108      	movs	r1, #8
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <writecmddata+0x168>)
 80011ec:	f7ff fd48 	bl	8000c80 <PIN_HIGH>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020000 	.word	0x40020000
 80011fc:	80200000 	.word	0x80200000
 8001200:	40020400 	.word	0x40020400

08001204 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	603a      	str	r2, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	460b      	mov	r3, r1
 8001212:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001214:	2108      	movs	r1, #8
 8001216:	4878      	ldr	r0, [pc, #480]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001218:	f7ff fd22 	bl	8000c60 <PIN_LOW>
    WriteCmd(cmd);
 800121c:	2104      	movs	r1, #4
 800121e:	4876      	ldr	r0, [pc, #472]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001220:	f7ff fd1e 	bl	8000c60 <PIN_LOW>
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	73bb      	strb	r3, [r7, #14]
 8001230:	4b71      	ldr	r3, [pc, #452]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001232:	4a72      	ldr	r2, [pc, #456]	; (80013fc <WriteCmdParamN+0x1f8>)
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	4b72      	ldr	r3, [pc, #456]	; (8001400 <WriteCmdParamN+0x1fc>)
 8001238:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800123c:	619a      	str	r2, [r3, #24]
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	035b      	lsls	r3, r3, #13
 8001242:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	109b      	asrs	r3, r3, #2
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	431a      	orrs	r2, r3
 8001250:	4b69      	ldr	r3, [pc, #420]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001252:	619a      	str	r2, [r3, #24]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <WriteCmdParamN+0x1fc>)
 8001258:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	2102      	movs	r1, #2
 8001260:	4865      	ldr	r0, [pc, #404]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001262:	f7ff fcfd 	bl	8000c60 <PIN_LOW>
 8001266:	2102      	movs	r1, #2
 8001268:	4863      	ldr	r0, [pc, #396]	; (80013f8 <WriteCmdParamN+0x1f4>)
 800126a:	f7ff fd09 	bl	8000c80 <PIN_HIGH>
 800126e:	2102      	movs	r1, #2
 8001270:	4861      	ldr	r0, [pc, #388]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001272:	f7ff fd05 	bl	8000c80 <PIN_HIGH>
 8001276:	4b60      	ldr	r3, [pc, #384]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001278:	4a60      	ldr	r2, [pc, #384]	; (80013fc <WriteCmdParamN+0x1f8>)
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	4b60      	ldr	r3, [pc, #384]	; (8001400 <WriteCmdParamN+0x1fc>)
 800127e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	035b      	lsls	r3, r3, #13
 8001288:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	109b      	asrs	r3, r3, #2
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	431a      	orrs	r2, r3
 8001296:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001298:	619a      	str	r2, [r3, #24]
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	4a58      	ldr	r2, [pc, #352]	; (8001400 <WriteCmdParamN+0x1fc>)
 800129e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	2102      	movs	r1, #2
 80012a6:	4854      	ldr	r0, [pc, #336]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80012a8:	f7ff fcda 	bl	8000c60 <PIN_LOW>
 80012ac:	2102      	movs	r1, #2
 80012ae:	4852      	ldr	r0, [pc, #328]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80012b0:	f7ff fce6 	bl	8000c80 <PIN_HIGH>
 80012b4:	2102      	movs	r1, #2
 80012b6:	4850      	ldr	r0, [pc, #320]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80012b8:	f7ff fce2 	bl	8000c80 <PIN_HIGH>
 80012bc:	2104      	movs	r1, #4
 80012be:	484e      	ldr	r0, [pc, #312]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80012c0:	f7ff fcde 	bl	8000c80 <PIN_HIGH>
    while (N-- > 0) {
 80012c4:	e086      	b.n	80013d4 <WriteCmdParamN+0x1d0>
        uint8_t u8 = *block++;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80012d0:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80012d2:	4a4a      	ldr	r2, [pc, #296]	; (80013fc <WriteCmdParamN+0x1f8>)
 80012d4:	619a      	str	r2, [r3, #24]
 80012d6:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <WriteCmdParamN+0x1fc>)
 80012d8:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	035b      	lsls	r3, r3, #13
 80012e2:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	109b      	asrs	r3, r3, #2
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	431a      	orrs	r2, r3
 80012f0:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80012f2:	619a      	str	r2, [r3, #24]
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	4a42      	ldr	r2, [pc, #264]	; (8001400 <WriteCmdParamN+0x1fc>)
 80012f8:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80012fc:	6193      	str	r3, [r2, #24]
 80012fe:	2102      	movs	r1, #2
 8001300:	483d      	ldr	r0, [pc, #244]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001302:	f7ff fcad 	bl	8000c60 <PIN_LOW>
 8001306:	2102      	movs	r1, #2
 8001308:	483b      	ldr	r0, [pc, #236]	; (80013f8 <WriteCmdParamN+0x1f4>)
 800130a:	f7ff fcb9 	bl	8000c80 <PIN_HIGH>
 800130e:	2102      	movs	r1, #2
 8001310:	4839      	ldr	r0, [pc, #228]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001312:	f7ff fcb5 	bl	8000c80 <PIN_HIGH>
        if (N && is8347) {
 8001316:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d05a      	beq.n	80013d4 <WriteCmdParamN+0x1d0>
 800131e:	4b39      	ldr	r3, [pc, #228]	; (8001404 <WriteCmdParamN+0x200>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d056      	beq.n	80013d4 <WriteCmdParamN+0x1d0>
            cmd++;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	3301      	adds	r3, #1
 800132a:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 800132c:	2104      	movs	r1, #4
 800132e:	4832      	ldr	r0, [pc, #200]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001330:	f7ff fc96 	bl	8000c60 <PIN_LOW>
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	b29b      	uxth	r3, r3
 800133a:	733b      	strb	r3, [r7, #12]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	72fb      	strb	r3, [r7, #11]
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001342:	4a2e      	ldr	r2, [pc, #184]	; (80013fc <WriteCmdParamN+0x1f8>)
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <WriteCmdParamN+0x1fc>)
 8001348:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800134c:	619a      	str	r2, [r3, #24]
 800134e:	7b3b      	ldrb	r3, [r7, #12]
 8001350:	035b      	lsls	r3, r3, #13
 8001352:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001356:	7b3b      	ldrb	r3, [r7, #12]
 8001358:	109b      	asrs	r3, r3, #2
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	431a      	orrs	r2, r3
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	7b3b      	ldrb	r3, [r7, #12]
 8001366:	4a26      	ldr	r2, [pc, #152]	; (8001400 <WriteCmdParamN+0x1fc>)
 8001368:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	2102      	movs	r1, #2
 8001370:	4821      	ldr	r0, [pc, #132]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001372:	f7ff fc75 	bl	8000c60 <PIN_LOW>
 8001376:	2102      	movs	r1, #2
 8001378:	481f      	ldr	r0, [pc, #124]	; (80013f8 <WriteCmdParamN+0x1f4>)
 800137a:	f7ff fc81 	bl	8000c80 <PIN_HIGH>
 800137e:	2102      	movs	r1, #2
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001382:	f7ff fc7d 	bl	8000c80 <PIN_HIGH>
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <WriteCmdParamN+0x1f4>)
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <WriteCmdParamN+0x1f8>)
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <WriteCmdParamN+0x1fc>)
 800138e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001392:	619a      	str	r2, [r3, #24]
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	035b      	lsls	r3, r3, #13
 8001398:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	109b      	asrs	r3, r3, #2
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	431a      	orrs	r2, r3
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80013a8:	619a      	str	r2, [r3, #24]
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <WriteCmdParamN+0x1fc>)
 80013ae:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	2102      	movs	r1, #2
 80013b6:	4810      	ldr	r0, [pc, #64]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80013b8:	f7ff fc52 	bl	8000c60 <PIN_LOW>
 80013bc:	2102      	movs	r1, #2
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80013c0:	f7ff fc5e 	bl	8000c80 <PIN_HIGH>
 80013c4:	2102      	movs	r1, #2
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80013c8:	f7ff fc5a 	bl	8000c80 <PIN_HIGH>
 80013cc:	2104      	movs	r1, #4
 80013ce:	480a      	ldr	r0, [pc, #40]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80013d0:	f7ff fc56 	bl	8000c80 <PIN_HIGH>
    while (N-- > 0) {
 80013d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	3a01      	subs	r2, #1
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	717a      	strb	r2, [r7, #5]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f73f af70 	bgt.w	80012c6 <WriteCmdParamN+0xc2>
        }
    }
    CS_IDLE;
 80013e6:	2108      	movs	r1, #8
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <WriteCmdParamN+0x1f4>)
 80013ea:	f7ff fc49 	bl	8000c80 <PIN_HIGH>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000
 80013fc:	80200000 	.word	0x80200000
 8001400:	40020400 	.word	0x40020400
 8001404:	20000121 	.word	0x20000121

08001408 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	4603      	mov	r3, r0
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	460b      	mov	r3, r1
 8001420:	717b      	strb	r3, [r7, #5]
 8001422:	4613      	mov	r3, r2
 8001424:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	733b      	strb	r3, [r7, #12]
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	737b      	strb	r3, [r7, #13]
 800142e:	793b      	ldrb	r3, [r7, #4]
 8001430:	73bb      	strb	r3, [r7, #14]
 8001432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001436:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	b29b      	uxth	r3, r3
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	2104      	movs	r1, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fede 	bl	8001204 <WriteCmdParamN>
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}

08001450 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8001460:	e046      	b.n	80014f0 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	627a      	str	r2, [r7, #36]	; 0x24
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	627a      	str	r2, [r7, #36]	; 0x24
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 800147a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800147e:	2b7f      	cmp	r3, #127	; 0x7f
 8001480:	d108      	bne.n	8001494 <init_table+0x44>
        {
            delay(len);
 8001482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fbd2 	bl	8000c30 <delay>
            len = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001492:	e024      	b.n	80014de <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800149a:	e010      	b.n	80014be <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	627a      	str	r2, [r7, #36]	; 0x24
 80014a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80014a6:	7819      	ldrb	r1, [r3, #0]
 80014a8:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80014ac:	443b      	add	r3, r7
 80014ae:	460a      	mov	r2, r1
 80014b0:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 80014b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014b8:	3301      	adds	r3, #1
 80014ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80014be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80014c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3e8      	bcc.n	800149c <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 80014ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80014d4:	f107 0208 	add.w	r2, r7, #8
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe93 	bl	8001204 <WriteCmdParamN>
        }
        size -= len + 2;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b02      	subs	r3, #2
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 80014f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dcb4      	bgt.n	8001462 <init_table+0x12>
    }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8001512:	e01d      	b.n	8001550 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1c9a      	adds	r2, r3, #2
 8001518:	60fa      	str	r2, [r7, #12]
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1c9a      	adds	r2, r3, #2
 8001522:	60fa      	str	r2, [r7, #12]
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152e:	4293      	cmp	r3, r2
 8001530:	d104      	bne.n	800153c <init_table16+0x3a>
            delay(d);
 8001532:	893b      	ldrh	r3, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fb7b 	bl	8000c30 <delay>
 800153a:	e005      	b.n	8001548 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 800153c:	893a      	ldrh	r2, [r7, #8]
 800153e:	897b      	ldrh	r3, [r7, #10]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fda4 	bl	8001090 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	3b04      	subs	r3, #4
 800154c:	b29b      	uxth	r3, r3
 800154e:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001550:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001554:	2b00      	cmp	r3, #0
 8001556:	dcdd      	bgt.n	8001514 <init_table16+0x12>
    }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <reset>:



void reset(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <reset+0x84>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 800156e:	f7ff fcdb 	bl	8000f28 <setWriteDir>
    CTL_INIT();
 8001572:	2101      	movs	r1, #1
 8001574:	481d      	ldr	r0, [pc, #116]	; (80015ec <reset+0x88>)
 8001576:	f7ff fba9 	bl	8000ccc <PIN_OUTPUT>
 800157a:	2102      	movs	r1, #2
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <reset+0x88>)
 800157e:	f7ff fba5 	bl	8000ccc <PIN_OUTPUT>
 8001582:	2104      	movs	r1, #4
 8001584:	4819      	ldr	r0, [pc, #100]	; (80015ec <reset+0x88>)
 8001586:	f7ff fba1 	bl	8000ccc <PIN_OUTPUT>
 800158a:	2108      	movs	r1, #8
 800158c:	4817      	ldr	r0, [pc, #92]	; (80015ec <reset+0x88>)
 800158e:	f7ff fb9d 	bl	8000ccc <PIN_OUTPUT>
 8001592:	2110      	movs	r1, #16
 8001594:	4815      	ldr	r0, [pc, #84]	; (80015ec <reset+0x88>)
 8001596:	f7ff fb99 	bl	8000ccc <PIN_OUTPUT>
    CS_IDLE;
 800159a:	2108      	movs	r1, #8
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <reset+0x88>)
 800159e:	f7ff fb6f 	bl	8000c80 <PIN_HIGH>
    RD_IDLE;
 80015a2:	2101      	movs	r1, #1
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <reset+0x88>)
 80015a6:	f7ff fb6b 	bl	8000c80 <PIN_HIGH>
    WR_IDLE;
 80015aa:	2102      	movs	r1, #2
 80015ac:	480f      	ldr	r0, [pc, #60]	; (80015ec <reset+0x88>)
 80015ae:	f7ff fb67 	bl	8000c80 <PIN_HIGH>
    RESET_IDLE;
 80015b2:	2110      	movs	r1, #16
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <reset+0x88>)
 80015b6:	f7ff fb63 	bl	8000c80 <PIN_HIGH>
    delay(50);
 80015ba:	2032      	movs	r0, #50	; 0x32
 80015bc:	f7ff fb38 	bl	8000c30 <delay>
    RESET_ACTIVE;
 80015c0:	2110      	movs	r1, #16
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <reset+0x88>)
 80015c4:	f7ff fb4c 	bl	8000c60 <PIN_LOW>
    delay(100);
 80015c8:	2064      	movs	r0, #100	; 0x64
 80015ca:	f7ff fb31 	bl	8000c30 <delay>
    RESET_IDLE;
 80015ce:	2110      	movs	r1, #16
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <reset+0x88>)
 80015d2:	f7ff fb55 	bl	8000c80 <PIN_HIGH>
    delay(100);
 80015d6:	2064      	movs	r0, #100	; 0x64
 80015d8:	f7ff fb2a 	bl	8000c30 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 80015dc:	2100      	movs	r1, #0
 80015de:	20b0      	movs	r0, #176	; 0xb0
 80015e0:	f7ff fc53 	bl	8000e8a <WriteCmdData>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000120 	.word	0x20000120
 80015ec:	40020000 	.word	0x40020000

080015f0 <read16bits>:

static uint16_t read16bits(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 80015f6:	2101      	movs	r1, #1
 80015f8:	4862      	ldr	r0, [pc, #392]	; (8001784 <read16bits+0x194>)
 80015fa:	f7ff fb41 	bl	8000c80 <PIN_HIGH>
 80015fe:	2101      	movs	r1, #1
 8001600:	4860      	ldr	r0, [pc, #384]	; (8001784 <read16bits+0x194>)
 8001602:	f7ff fb2d 	bl	8000c60 <PIN_LOW>
 8001606:	2101      	movs	r1, #1
 8001608:	485e      	ldr	r0, [pc, #376]	; (8001784 <read16bits+0x194>)
 800160a:	f7ff fb29 	bl	8000c60 <PIN_LOW>
 800160e:	2101      	movs	r1, #1
 8001610:	485c      	ldr	r0, [pc, #368]	; (8001784 <read16bits+0x194>)
 8001612:	f7ff fb25 	bl	8000c60 <PIN_LOW>
 8001616:	2101      	movs	r1, #1
 8001618:	485a      	ldr	r0, [pc, #360]	; (8001784 <read16bits+0x194>)
 800161a:	f7ff fb21 	bl	8000c60 <PIN_LOW>
 800161e:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <read16bits+0x198>)
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	b29b      	uxth	r3, r3
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <read16bits+0x198>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	b29b      	uxth	r3, r3
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	b29b      	uxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b52      	ldr	r3, [pc, #328]	; (8001784 <read16bits+0x194>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	0b5b      	lsrs	r3, r3, #13
 8001640:	b29b      	uxth	r3, r3
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	b29b      	uxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <read16bits+0x198>)
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	b29b      	uxth	r3, r3
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	b29b      	uxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <read16bits+0x198>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	b29b      	uxth	r3, r3
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	b29b      	uxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b46      	ldr	r3, [pc, #280]	; (8001788 <read16bits+0x198>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	b29b      	uxth	r3, r3
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	b29b      	uxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b42      	ldr	r3, [pc, #264]	; (8001788 <read16bits+0x198>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	b29b      	uxth	r3, r3
 8001682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001686:	b29b      	uxth	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <read16bits+0x194>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	b29b      	uxth	r3, r3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	b29b      	uxth	r3, r3
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	b29b      	uxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	80fb      	strh	r3, [r7, #6]
 80016a0:	2101      	movs	r1, #1
 80016a2:	4838      	ldr	r0, [pc, #224]	; (8001784 <read16bits+0x194>)
 80016a4:	f7ff faec 	bl	8000c80 <PIN_HIGH>
 80016a8:	2101      	movs	r1, #1
 80016aa:	4836      	ldr	r0, [pc, #216]	; (8001784 <read16bits+0x194>)
 80016ac:	f7ff fae8 	bl	8000c80 <PIN_HIGH>
    READ_8(lo);
 80016b0:	2101      	movs	r1, #1
 80016b2:	4834      	ldr	r0, [pc, #208]	; (8001784 <read16bits+0x194>)
 80016b4:	f7ff fae4 	bl	8000c80 <PIN_HIGH>
 80016b8:	2101      	movs	r1, #1
 80016ba:	4832      	ldr	r0, [pc, #200]	; (8001784 <read16bits+0x194>)
 80016bc:	f7ff fad0 	bl	8000c60 <PIN_LOW>
 80016c0:	2101      	movs	r1, #1
 80016c2:	4830      	ldr	r0, [pc, #192]	; (8001784 <read16bits+0x194>)
 80016c4:	f7ff facc 	bl	8000c60 <PIN_LOW>
 80016c8:	2101      	movs	r1, #1
 80016ca:	482e      	ldr	r0, [pc, #184]	; (8001784 <read16bits+0x194>)
 80016cc:	f7ff fac8 	bl	8000c60 <PIN_LOW>
 80016d0:	2101      	movs	r1, #1
 80016d2:	482c      	ldr	r0, [pc, #176]	; (8001784 <read16bits+0x194>)
 80016d4:	f7ff fac4 	bl	8000c60 <PIN_LOW>
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <read16bits+0x198>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <read16bits+0x198>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <read16bits+0x194>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	0b5b      	lsrs	r3, r3, #13
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <read16bits+0x198>)
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <read16bits+0x198>)
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <read16bits+0x198>)
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <read16bits+0x198>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <read16bits+0x194>)
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	717b      	strb	r3, [r7, #5]
 800175a:	2101      	movs	r1, #1
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <read16bits+0x194>)
 800175e:	f7ff fa8f 	bl	8000c80 <PIN_HIGH>
 8001762:	2101      	movs	r1, #1
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <read16bits+0x194>)
 8001766:	f7ff fa8b 	bl	8000c80 <PIN_HIGH>
    return (ret << 8) | lo;
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b21a      	sxth	r2, r3
 8001770:	797b      	ldrb	r3, [r7, #5]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21b      	sxth	r3, r3
 8001778:	b29b      	uxth	r3, r3
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400

0800178c <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	460a      	mov	r2, r1
 8001796:	80fb      	strh	r3, [r7, #6]
 8001798:	4613      	mov	r3, r2
 800179a:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 800179c:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <readReg+0x10c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <readReg+0x1c>
        reset();
 80017a4:	f7ff fede 	bl	8001564 <reset>
    CS_ACTIVE;
 80017a8:	2108      	movs	r1, #8
 80017aa:	483c      	ldr	r0, [pc, #240]	; (800189c <readReg+0x110>)
 80017ac:	f7ff fa58 	bl	8000c60 <PIN_LOW>
    WriteCmd(reg);
 80017b0:	2104      	movs	r1, #4
 80017b2:	483a      	ldr	r0, [pc, #232]	; (800189c <readReg+0x110>)
 80017b4:	f7ff fa54 	bl	8000c60 <PIN_LOW>
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	b29b      	uxth	r3, r3
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	73bb      	strb	r3, [r7, #14]
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <readReg+0x110>)
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <readReg+0x114>)
 80017c8:	619a      	str	r2, [r3, #24]
 80017ca:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <readReg+0x118>)
 80017cc:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	035b      	lsls	r3, r3, #13
 80017d6:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	109b      	asrs	r3, r3, #2
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	431a      	orrs	r2, r3
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <readReg+0x110>)
 80017e6:	619a      	str	r2, [r3, #24]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <readReg+0x118>)
 80017ec:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	2102      	movs	r1, #2
 80017f4:	4829      	ldr	r0, [pc, #164]	; (800189c <readReg+0x110>)
 80017f6:	f7ff fa33 	bl	8000c60 <PIN_LOW>
 80017fa:	2102      	movs	r1, #2
 80017fc:	4827      	ldr	r0, [pc, #156]	; (800189c <readReg+0x110>)
 80017fe:	f7ff fa3f 	bl	8000c80 <PIN_HIGH>
 8001802:	2102      	movs	r1, #2
 8001804:	4825      	ldr	r0, [pc, #148]	; (800189c <readReg+0x110>)
 8001806:	f7ff fa3b 	bl	8000c80 <PIN_HIGH>
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <readReg+0x110>)
 800180c:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <readReg+0x114>)
 800180e:	619a      	str	r2, [r3, #24]
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <readReg+0x118>)
 8001812:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	035b      	lsls	r3, r3, #13
 800181c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	109b      	asrs	r3, r3, #2
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	431a      	orrs	r2, r3
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <readReg+0x110>)
 800182c:	619a      	str	r2, [r3, #24]
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <readReg+0x118>)
 8001832:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	2102      	movs	r1, #2
 800183a:	4818      	ldr	r0, [pc, #96]	; (800189c <readReg+0x110>)
 800183c:	f7ff fa10 	bl	8000c60 <PIN_LOW>
 8001840:	2102      	movs	r1, #2
 8001842:	4816      	ldr	r0, [pc, #88]	; (800189c <readReg+0x110>)
 8001844:	f7ff fa1c 	bl	8000c80 <PIN_HIGH>
 8001848:	2102      	movs	r1, #2
 800184a:	4814      	ldr	r0, [pc, #80]	; (800189c <readReg+0x110>)
 800184c:	f7ff fa18 	bl	8000c80 <PIN_HIGH>
 8001850:	2104      	movs	r1, #4
 8001852:	4812      	ldr	r0, [pc, #72]	; (800189c <readReg+0x110>)
 8001854:	f7ff fa14 	bl	8000c80 <PIN_HIGH>
    setReadDir();
 8001858:	f7ff fb3c 	bl	8000ed4 <setReadDir>
    delay(1);    //1us should be adequate
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff f9e7 	bl	8000c30 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001862:	f7ff fec5 	bl	80015f0 <read16bits>
 8001866:	4603      	mov	r3, r0
 8001868:	81bb      	strh	r3, [r7, #12]
 800186a:	797b      	ldrb	r3, [r7, #5]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	717b      	strb	r3, [r7, #5]
 8001872:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001876:	2b00      	cmp	r3, #0
 8001878:	daf3      	bge.n	8001862 <readReg+0xd6>
    RD_IDLE;
 800187a:	2101      	movs	r1, #1
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <readReg+0x110>)
 800187e:	f7ff f9ff 	bl	8000c80 <PIN_HIGH>
    CS_IDLE;
 8001882:	2108      	movs	r1, #8
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <readReg+0x110>)
 8001886:	f7ff f9fb 	bl	8000c80 <PIN_HIGH>
    setWriteDir();
 800188a:	f7ff fb4d 	bl	8000f28 <setWriteDir>
    return ret;
 800188e:	89bb      	ldrh	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000120 	.word	0x20000120
 800189c:	40020000 	.word	0x40020000
 80018a0:	80200000 	.word	0x80200000
 80018a4:	40020400 	.word	0x40020400

080018a8 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff68 	bl	800178c <readReg>
 80018bc:	4603      	mov	r3, r0
 80018be:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff61 	bl	800178c <readReg>
 80018ca:	4603      	mov	r3, r0
 80018cc:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	041a      	lsls	r2, r3, #16
 80018d2:	89bb      	ldrh	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff4d 	bl	800178c <readReg>
 80018f2:	4603      	mov	r3, r0
 80018f4:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	2101      	movs	r1, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff46 	bl	800178c <readReg>
 8001900:	4603      	mov	r3, r0
 8001902:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	2102      	movs	r1, #2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff3f 	bl	800178c <readReg>
 800190e:	4603      	mov	r3, r0
 8001910:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001912:	89fb      	ldrh	r3, [r7, #14]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	89ba      	ldrh	r2, [r7, #12]
 8001918:	0212      	lsls	r2, r2, #8
 800191a:	4313      	orrs	r3, r2
 800191c:	897a      	ldrh	r2, [r7, #10]
 800191e:	0a12      	lsrs	r2, r2, #8
 8001920:	b292      	uxth	r2, r2
 8001922:	4313      	orrs	r3, r2
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <tft_init>:

void tft_init(uint16_t ID)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 800193e:	4bd3      	ldr	r3, [pc, #844]	; (8001c8c <tft_init+0x360>)
 8001940:	2200      	movs	r2, #0
 8001942:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001944:	4ad2      	ldr	r2, [pc, #840]	; (8001c90 <tft_init+0x364>)
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	8013      	strh	r3, [r2, #0]
 800194a:	4bd1      	ldr	r3, [pc, #836]	; (8001c90 <tft_init+0x364>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001952:	4293      	cmp	r3, r2
 8001954:	f000 8321 	beq.w	8001f9a <tft_init+0x66e>
 8001958:	f24c 5205 	movw	r2, #50437	; 0xc505
 800195c:	4293      	cmp	r3, r2
 800195e:	f300 8334 	bgt.w	8001fca <tft_init+0x69e>
 8001962:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001966:	4293      	cmp	r3, r2
 8001968:	f000 8320 	beq.w	8001fac <tft_init+0x680>
 800196c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001970:	4293      	cmp	r3, r2
 8001972:	f300 832a 	bgt.w	8001fca <tft_init+0x69e>
 8001976:	f24b 5205 	movw	r2, #46341	; 0xb505
 800197a:	4293      	cmp	r3, r2
 800197c:	f000 830d 	beq.w	8001f9a <tft_init+0x66e>
 8001980:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001984:	4293      	cmp	r3, r2
 8001986:	f300 8320 	bgt.w	8001fca <tft_init+0x69e>
 800198a:	f64a 4211 	movw	r2, #44049	; 0xac11
 800198e:	4293      	cmp	r3, r2
 8001990:	f000 8253 	beq.w	8001e3a <tft_init+0x50e>
 8001994:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001998:	4293      	cmp	r3, r2
 800199a:	f300 8316 	bgt.w	8001fca <tft_init+0x69e>
 800199e:	f249 4288 	movw	r2, #38024	; 0x9488
 80019a2:	4293      	cmp	r3, r2
 80019a4:	f300 8311 	bgt.w	8001fca <tft_init+0x69e>
 80019a8:	f249 4287 	movw	r2, #38023	; 0x9487
 80019ac:	4293      	cmp	r3, r2
 80019ae:	f280 82dd 	bge.w	8001f6c <tft_init+0x640>
 80019b2:	f249 4286 	movw	r2, #38022	; 0x9486
 80019b6:	4293      	cmp	r3, r2
 80019b8:	f000 82be 	beq.w	8001f38 <tft_init+0x60c>
 80019bc:	f249 4286 	movw	r2, #38022	; 0x9486
 80019c0:	4293      	cmp	r3, r2
 80019c2:	f300 8302 	bgt.w	8001fca <tft_init+0x69e>
 80019c6:	f249 4281 	movw	r2, #38017	; 0x9481
 80019ca:	4293      	cmp	r3, r2
 80019cc:	f000 8276 	beq.w	8001ebc <tft_init+0x590>
 80019d0:	f249 4281 	movw	r2, #38017	; 0x9481
 80019d4:	4293      	cmp	r3, r2
 80019d6:	f300 82f8 	bgt.w	8001fca <tft_init+0x69e>
 80019da:	f249 3242 	movw	r2, #37698	; 0x9342
 80019de:	4293      	cmp	r3, r2
 80019e0:	f300 82f3 	bgt.w	8001fca <tft_init+0x69e>
 80019e4:	f249 3202 	movw	r2, #37634	; 0x9302
 80019e8:	4293      	cmp	r3, r2
 80019ea:	f280 80af 	bge.w	8001b4c <tft_init+0x220>
 80019ee:	f249 0290 	movw	r2, #37008	; 0x9090
 80019f2:	4293      	cmp	r3, r2
 80019f4:	f000 81a9 	beq.w	8001d4a <tft_init+0x41e>
 80019f8:	f249 0290 	movw	r2, #37008	; 0x9090
 80019fc:	4293      	cmp	r3, r2
 80019fe:	f300 82e4 	bgt.w	8001fca <tft_init+0x69e>
 8001a02:	f248 3257 	movw	r2, #33623	; 0x8357
 8001a06:	4293      	cmp	r3, r2
 8001a08:	f000 819a 	beq.w	8001d40 <tft_init+0x414>
 8001a0c:	f248 3257 	movw	r2, #33623	; 0x8357
 8001a10:	4293      	cmp	r3, r2
 8001a12:	f300 82da 	bgt.w	8001fca <tft_init+0x69e>
 8001a16:	f248 0231 	movw	r2, #32817	; 0x8031
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	f000 8187 	beq.w	8001d2e <tft_init+0x402>
 8001a20:	f248 0231 	movw	r2, #32817	; 0x8031
 8001a24:	4293      	cmp	r3, r2
 8001a26:	f300 82d0 	bgt.w	8001fca <tft_init+0x69e>
 8001a2a:	f247 7296 	movw	r2, #30614	; 0x7796
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	f000 8297 	beq.w	8001f62 <tft_init+0x636>
 8001a34:	f247 7296 	movw	r2, #30614	; 0x7796
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	f300 82c6 	bgt.w	8001fca <tft_init+0x69e>
 8001a3e:	f247 7293 	movw	r2, #30611	; 0x7793
 8001a42:	4293      	cmp	r3, r2
 8001a44:	f000 82b2 	beq.w	8001fac <tft_init+0x680>
 8001a48:	f247 7293 	movw	r2, #30611	; 0x7793
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f300 82bc 	bgt.w	8001fca <tft_init+0x69e>
 8001a52:	f247 7289 	movw	r2, #30601	; 0x7789
 8001a56:	4293      	cmp	r3, r2
 8001a58:	f000 8160 	beq.w	8001d1c <tft_init+0x3f0>
 8001a5c:	f247 7289 	movw	r2, #30601	; 0x7789
 8001a60:	4293      	cmp	r3, r2
 8001a62:	f300 82b2 	bgt.w	8001fca <tft_init+0x69e>
 8001a66:	f646 0214 	movw	r2, #26644	; 0x6814
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f000 8141 	beq.w	8001cf2 <tft_init+0x3c6>
 8001a70:	f646 0214 	movw	r2, #26644	; 0x6814
 8001a74:	4293      	cmp	r3, r2
 8001a76:	f300 82a8 	bgt.w	8001fca <tft_init+0x69e>
 8001a7a:	f646 0209 	movw	r2, #26633	; 0x6809
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	f000 81a4 	beq.w	8001dcc <tft_init+0x4a0>
 8001a84:	f646 0209 	movw	r2, #26633	; 0x6809
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	f300 829e 	bgt.w	8001fca <tft_init+0x69e>
 8001a8e:	f245 4208 	movw	r2, #21512	; 0x5408
 8001a92:	4293      	cmp	r3, r2
 8001a94:	f000 818a 	beq.w	8001dac <tft_init+0x480>
 8001a98:	f245 4208 	movw	r2, #21512	; 0x5408
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	f300 8294 	bgt.w	8001fca <tft_init+0x69e>
 8001aa2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	f000 810e 	beq.w	8001cc8 <tft_init+0x39c>
 8001aac:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	f300 828a 	bgt.w	8001fca <tft_init+0x69e>
 8001ab6:	f242 0253 	movw	r2, #8275	; 0x2053
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f000 81b8 	beq.w	8001e30 <tft_init+0x504>
 8001ac0:	f242 0253 	movw	r2, #8275	; 0x2053
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	f300 8280 	bgt.w	8001fca <tft_init+0x69e>
 8001aca:	f241 6202 	movw	r2, #5634	; 0x1602
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	f000 81a5 	beq.w	8001e1e <tft_init+0x4f2>
 8001ad4:	f241 6202 	movw	r2, #5634	; 0x1602
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	f300 8276 	bgt.w	8001fca <tft_init+0x69e>
 8001ade:	f241 5281 	movw	r2, #5505	; 0x1581
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	f000 81e5 	beq.w	8001eb2 <tft_init+0x586>
 8001ae8:	f241 5281 	movw	r2, #5505	; 0x1581
 8001aec:	4293      	cmp	r3, r2
 8001aee:	f300 826c 	bgt.w	8001fca <tft_init+0x69e>
 8001af2:	f241 5226 	movw	r2, #5414	; 0x1526
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f000 80dd 	beq.w	8001cb6 <tft_init+0x38a>
 8001afc:	f241 5226 	movw	r2, #5414	; 0x1526
 8001b00:	4293      	cmp	r3, r2
 8001b02:	f300 8262 	bgt.w	8001fca <tft_init+0x69e>
 8001b06:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001b0a:	f000 80cb 	beq.w	8001ca4 <tft_init+0x378>
 8001b0e:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001b12:	f300 825a 	bgt.w	8001fca <tft_init+0x69e>
 8001b16:	f241 5211 	movw	r2, #5393	; 0x1511
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	f000 80a2 	beq.w	8001c64 <tft_init+0x338>
 8001b20:	f241 5211 	movw	r2, #5393	; 0x1511
 8001b24:	4293      	cmp	r3, r2
 8001b26:	f300 8250 	bgt.w	8001fca <tft_init+0x69e>
 8001b2a:	f241 5205 	movw	r2, #5381	; 0x1505
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	f000 8141 	beq.w	8001db6 <tft_init+0x48a>
 8001b34:	f241 5205 	movw	r2, #5381	; 0x1505
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	f300 8246 	bgt.w	8001fca <tft_init+0x69e>
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f000 812f 	beq.w	8001da2 <tft_init+0x476>
 8001b44:	2b99      	cmp	r3, #153	; 0x99
 8001b46:	f000 8117 	beq.w	8001d78 <tft_init+0x44c>
 8001b4a:	e23e      	b.n	8001fca <tft_init+0x69e>
 8001b4c:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8001b50:	3b02      	subs	r3, #2
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	f200 8239 	bhi.w	8001fca <tft_init+0x69e>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <tft_init+0x234>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001e45 	.word	0x08001e45
 8001b64:	08001fcb 	.word	0x08001fcb
 8001b68:	08001fcb 	.word	0x08001fcb
 8001b6c:	08001fcb 	.word	0x08001fcb
 8001b70:	08001fcb 	.word	0x08001fcb
 8001b74:	08001fcb 	.word	0x08001fcb
 8001b78:	08001fcb 	.word	0x08001fcb
 8001b7c:	08001fcb 	.word	0x08001fcb
 8001b80:	08001fcb 	.word	0x08001fcb
 8001b84:	08001fcb 	.word	0x08001fcb
 8001b88:	08001fcb 	.word	0x08001fcb
 8001b8c:	08001fcb 	.word	0x08001fcb
 8001b90:	08001fcb 	.word	0x08001fcb
 8001b94:	08001fcb 	.word	0x08001fcb
 8001b98:	08001fcb 	.word	0x08001fcb
 8001b9c:	08001fcb 	.word	0x08001fcb
 8001ba0:	08001fcb 	.word	0x08001fcb
 8001ba4:	08001fcb 	.word	0x08001fcb
 8001ba8:	08001fcb 	.word	0x08001fcb
 8001bac:	08001fcb 	.word	0x08001fcb
 8001bb0:	08001fcb 	.word	0x08001fcb
 8001bb4:	08001fcb 	.word	0x08001fcb
 8001bb8:	08001fcb 	.word	0x08001fcb
 8001bbc:	08001fcb 	.word	0x08001fcb
 8001bc0:	08001fcb 	.word	0x08001fcb
 8001bc4:	08001fcb 	.word	0x08001fcb
 8001bc8:	08001fcb 	.word	0x08001fcb
 8001bcc:	08001fcb 	.word	0x08001fcb
 8001bd0:	08001fcb 	.word	0x08001fcb
 8001bd4:	08001fcb 	.word	0x08001fcb
 8001bd8:	08001db7 	.word	0x08001db7
 8001bdc:	08001fcb 	.word	0x08001fcb
 8001be0:	08001fcb 	.word	0x08001fcb
 8001be4:	08001fcb 	.word	0x08001fcb
 8001be8:	08001fcb 	.word	0x08001fcb
 8001bec:	08001dd7 	.word	0x08001dd7
 8001bf0:	08001fcb 	.word	0x08001fcb
 8001bf4:	08001df7 	.word	0x08001df7
 8001bf8:	08001dd7 	.word	0x08001dd7
 8001bfc:	08001e59 	.word	0x08001e59
 8001c00:	08001fcb 	.word	0x08001fcb
 8001c04:	08001fcb 	.word	0x08001fcb
 8001c08:	08001fcb 	.word	0x08001fcb
 8001c0c:	08001fcb 	.word	0x08001fcb
 8001c10:	08001fcb 	.word	0x08001fcb
 8001c14:	08001fcb 	.word	0x08001fcb
 8001c18:	08001fcb 	.word	0x08001fcb
 8001c1c:	08001de1 	.word	0x08001de1
 8001c20:	08001fcb 	.word	0x08001fcb
 8001c24:	08001fcb 	.word	0x08001fcb
 8001c28:	08001fcb 	.word	0x08001fcb
 8001c2c:	08001de1 	.word	0x08001de1
 8001c30:	08001fcb 	.word	0x08001fcb
 8001c34:	08001fcb 	.word	0x08001fcb
 8001c38:	08001e4f 	.word	0x08001e4f
 8001c3c:	08001fcb 	.word	0x08001fcb
 8001c40:	08001fcb 	.word	0x08001fcb
 8001c44:	08001fcb 	.word	0x08001fcb
 8001c48:	08001fcb 	.word	0x08001fcb
 8001c4c:	08001fcb 	.word	0x08001fcb
 8001c50:	08001fcb 	.word	0x08001fcb
 8001c54:	08001fcb 	.word	0x08001fcb
 8001c58:	08001e6f 	.word	0x08001e6f
 8001c5c:	08001e79 	.word	0x08001e79
 8001c60:	08001e8b 	.word	0x08001e8b
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <tft_init+0x368>)
 8001c66:	2203      	movs	r2, #3
 8001c68:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <tft_init+0x36c>)
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	2303      	movs	r3, #3
 8001c70:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <tft_init+0x370>)
 8001c74:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c7c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <tft_init+0x374>)
 8001c80:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c88:	801a      	strh	r2, [r3, #0]
        break;
 8001c8a:	e1a4      	b.n	8001fd6 <tft_init+0x6aa>
 8001c8c:	20000128 	.word	0x20000128
 8001c90:	2000012c 	.word	0x2000012c
 8001c94:	2000012a 	.word	0x2000012a
 8001c98:	08007198 	.word	0x08007198
 8001c9c:	08000d15 	.word	0x08000d15
 8001ca0:	08000cfd 	.word	0x08000cfd

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001ca4:	4b91      	ldr	r3, [pc, #580]	; (8001eec <tft_init+0x5c0>)
 8001ca6:	f240 4213 	movw	r2, #1043	; 0x413
 8001caa:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8001cac:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <tft_init+0x5c4>)
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	837b      	strh	r3, [r7, #26]
        break;
 8001cb4:	e18f      	b.n	8001fd6 <tft_init+0x6aa>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001cb6:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <tft_init+0x5c0>)
 8001cb8:	f240 4213 	movw	r2, #1043	; 0x413
 8001cbc:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8001cbe:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <tft_init+0x5c8>)
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	837b      	strh	r3, [r7, #26]
        break;
 8001cc6:	e186      	b.n	8001fd6 <tft_init+0x6aa>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001cc8:	4b88      	ldr	r3, [pc, #544]	; (8001eec <tft_init+0x5c0>)
 8001cca:	f640 6213 	movw	r2, #3603	; 0xe13
 8001cce:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8001cd0:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <tft_init+0x5cc>)
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001cd8:	4b88      	ldr	r3, [pc, #544]	; (8001efc <tft_init+0x5d0>)
 8001cda:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ce2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001ce4:	4b86      	ldr	r3, [pc, #536]	; (8001f00 <tft_init+0x5d4>)
 8001ce6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cee:	801a      	strh	r2, [r3, #0]
        break;
 8001cf0:	e171      	b.n	8001fd6 <tft_init+0x6aa>

#ifdef SUPPORT_68140
    case 0x6814:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001cf2:	4b7e      	ldr	r3, [pc, #504]	; (8001eec <tft_init+0x5c0>)
 8001cf4:	f240 4203 	movw	r2, #1027	; 0x403
 8001cf8:	801a      	strh	r2, [r3, #0]
		static const uint8_t RM68140_regValues_max[]  = {        //
            0x3A, 1, 0x55,      //Pixel format .kbv my Mega Shield
        };
        table8_ads = RM68140_regValues_max, table_size = sizeof(RM68140_regValues_max);
 8001cfa:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <tft_init+0x5d8>)
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	2303      	movs	r3, #3
 8001d00:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001d02:	4b7e      	ldr	r3, [pc, #504]	; (8001efc <tft_init+0x5d0>)
 8001d04:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d0c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <tft_init+0x5d4>)
 8001d10:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d18:	801a      	strh	r2, [r3, #0]
        break;
 8001d1a:	e15c      	b.n	8001fd6 <tft_init+0x6aa>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001d1c:	4b73      	ldr	r3, [pc, #460]	; (8001eec <tft_init+0x5c0>)
 8001d1e:	f240 4213 	movw	r2, #1043	; 0x413
 8001d22:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8001d24:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <tft_init+0x5dc>)
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	2341      	movs	r3, #65	; 0x41
 8001d2a:	837b      	strh	r3, [r7, #26]
        break;
 8001d2c:	e153      	b.n	8001fd6 <tft_init+0x6aa>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <tft_init+0x5c0>)
 8001d30:	f241 4213 	movw	r2, #5139	; 0x1413
 8001d34:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8001d36:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <tft_init+0x5e0>)
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	837b      	strh	r3, [r7, #26]
        break;
 8001d3e:	e14a      	b.n	8001fd6 <tft_init+0x6aa>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <tft_init+0x5c0>)
 8001d42:	f241 4203 	movw	r2, #5123	; 0x1403
 8001d46:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8001d48:	e003      	b.n	8001d52 <tft_init+0x426>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001d4a:	4b68      	ldr	r3, [pc, #416]	; (8001eec <tft_init+0x5c0>)
 8001d4c:	f241 4213 	movw	r2, #5139	; 0x1413
 8001d50:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <tft_init+0x5e4>)
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <tft_init+0x5d0>)
 8001d60:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d68:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <tft_init+0x5d4>)
 8001d6c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d74:	801a      	strh	r2, [r3, #0]
        break;
 8001d76:	e12e      	b.n	8001fd6 <tft_init+0x6aa>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001d78:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <tft_init+0x5c0>)
 8001d7a:	f241 4213 	movw	r2, #5139	; 0x1413
 8001d7e:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8001d80:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <tft_init+0x5e8>)
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	231d      	movs	r3, #29
 8001d86:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001d88:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <tft_init+0x5d0>)
 8001d8a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d92:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001d94:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <tft_init+0x5d4>)
 8001d96:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d9e:	801a      	strh	r2, [r3, #0]
        break;
 8001da0:	e119      	b.n	8001fd6 <tft_init+0x6aa>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8001da2:	4b52      	ldr	r3, [pc, #328]	; (8001eec <tft_init+0x5c0>)
 8001da4:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001da8:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8001daa:	e008      	b.n	8001dbe <tft_init+0x492>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <tft_init+0x5c0>)
 8001dae:	f241 0204 	movw	r2, #4100	; 0x1004
 8001db2:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8001db4:	e003      	b.n	8001dbe <tft_init+0x492>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8001db6:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <tft_init+0x5c0>)
 8001db8:	f241 0204 	movw	r2, #4100	; 0x1004
 8001dbc:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8001dc2:	21d8      	movs	r1, #216	; 0xd8
 8001dc4:	4854      	ldr	r0, [pc, #336]	; (8001f18 <tft_init+0x5ec>)
 8001dc6:	f7ff fb9c 	bl	8001502 <init_table16>
        break;
 8001dca:	e104      	b.n	8001fd6 <tft_init+0x6aa>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <tft_init+0x5c0>)
 8001dce:	f241 1202 	movw	r2, #4354	; 0x1102
 8001dd2:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001dd4:	e008      	b.n	8001de8 <tft_init+0x4bc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8001dd6:	4b45      	ldr	r3, [pc, #276]	; (8001eec <tft_init+0x5c0>)
 8001dd8:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001ddc:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001dde:	e003      	b.n	8001de8 <tft_init+0x4bc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <tft_init+0x5c0>)
 8001de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001de6:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8001dec:	21cc      	movs	r1, #204	; 0xcc
 8001dee:	484b      	ldr	r0, [pc, #300]	; (8001f1c <tft_init+0x5f0>)
 8001df0:	f7ff fb87 	bl	8001502 <init_table16>
        break;
 8001df4:	e0ef      	b.n	8001fd6 <tft_init+0x6aa>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <tft_init+0x5c0>)
 8001df8:	f240 4203 	movw	r2, #1027	; 0x403
 8001dfc:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001dfe:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <tft_init+0x5f4>)
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	231e      	movs	r3, #30
 8001e04:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <tft_init+0x5d0>)
 8001e08:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e10:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <tft_init+0x5d4>)
 8001e14:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	22f0      	movs	r2, #240	; 0xf0
 8001e1a:	801a      	strh	r2, [r3, #0]
        break;
 8001e1c:	e0db      	b.n	8001fd6 <tft_init+0x6aa>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <tft_init+0x5c0>)
 8001e20:	f240 4203 	movw	r2, #1027	; 0x403
 8001e24:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8001e26:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <tft_init+0x5f8>)
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	837b      	strh	r3, [r7, #26]
        break;
 8001e2e:	e0d2      	b.n	8001fd6 <tft_init+0x6aa>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <tft_init+0x5c0>)
 8001e32:	f241 4217 	movw	r2, #5143	; 0x1417
 8001e36:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001e38:	e012      	b.n	8001e60 <tft_init+0x534>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <tft_init+0x5c0>)
 8001e3c:	f241 4213 	movw	r2, #5139	; 0x1413
 8001e40:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001e42:	e00d      	b.n	8001e60 <tft_init+0x534>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <tft_init+0x5c0>)
 8001e46:	f240 4203 	movw	r2, #1027	; 0x403
 8001e4a:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001e4c:	e008      	b.n	8001e60 <tft_init+0x534>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001e4e:	4b27      	ldr	r3, [pc, #156]	; (8001eec <tft_init+0x5c0>)
 8001e50:	f240 4213 	movw	r2, #1043	; 0x413
 8001e54:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001e56:	e003      	b.n	8001e60 <tft_init+0x534>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <tft_init+0x5c0>)
 8001e5a:	f241 6203 	movw	r2, #5635	; 0x1603
 8001e5e:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <tft_init+0x5fc>)
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	2303      	movs	r3, #3
 8001e6a:	837b      	strh	r3, [r7, #26]
        break;
 8001e6c:	e0b3      	b.n	8001fd6 <tft_init+0x6aa>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <tft_init+0x5c0>)
 8001e70:	f241 4213 	movw	r2, #5139	; 0x1413
 8001e74:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8001e76:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <tft_init+0x5c0>)
 8001e7a:	f240 4213 	movw	r2, #1043	; 0x413
 8001e7e:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <tft_init+0x600>)
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	2365      	movs	r3, #101	; 0x65
 8001e86:	837b      	strh	r3, [r7, #26]
        break;
 8001e88:	e0a5      	b.n	8001fd6 <tft_init+0x6aa>
#if defined(SUPPORT_9342)
    case 0x9342:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | INVERT_GS | REV_SCREEN;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <tft_init+0x5c0>)
 8001e8c:	f241 5213 	movw	r2, #5395	; 0x1513
 8001e90:	801a      	strh	r2, [r3, #0]
            (0xC7), 1, 0xA4,
            (0xB8), 1, 0x0B,
            (0xE0), 15, 0x0F, 0x24, 0x21, 0x0C, 0x0F, 0x06, 0x50, 0x75, 0x3F, 0x07, 0x12, 0x05, 0x11, 0x0B, 0x08,
            (0xE1), 15, 0x08, 0x1D, 0x20, 0x02, 0x0E, 0x04, 0x31, 0x24, 0x42, 0x03, 0x0B, 0x09, 0x30, 0x36, 0x0F,
        };
        table8_ads = ILI9342_regValues_CPT24, table_size = sizeof(ILI9342_regValues_CPT24);   //
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <tft_init+0x604>)
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	2338      	movs	r3, #56	; 0x38
 8001e98:	837b      	strh	r3, [r7, #26]
        //        table8_ads = ILI9342_regValues_Tianma23, table_size = sizeof(ILI9342_regValues_Tianma23);   //
        //        table8_ads = ILI9342_regValues_HSD23, table_size = sizeof(ILI9342_regValues_HSD23);   //
        p16 = (int16_t *) & height;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <tft_init+0x5d0>)
 8001e9c:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	22f0      	movs	r2, #240	; 0xf0
 8001ea2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <tft_init+0x5d4>)
 8001ea6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eae:	801a      	strh	r2, [r3, #0]
        break;
 8001eb0:	e091      	b.n	8001fd6 <tft_init+0x6aa>
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <tft_init+0x5c0>)
 8001eb4:	f240 4213 	movw	r2, #1043	; 0x413
 8001eb8:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8001eba:	e003      	b.n	8001ec4 <tft_init+0x598>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <tft_init+0x5c0>)
 8001ebe:	f240 4207 	movw	r2, #1031	; 0x407
 8001ec2:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <tft_init+0x608>)
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	2345      	movs	r3, #69	; 0x45
 8001ece:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <tft_init+0x5d0>)
 8001ed2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001eda:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <tft_init+0x5d4>)
 8001ede:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee6:	801a      	strh	r2, [r3, #0]
        break;
 8001ee8:	e075      	b.n	8001fd6 <tft_init+0x6aa>
 8001eea:	bf00      	nop
 8001eec:	2000012a 	.word	0x2000012a
 8001ef0:	0800719c 	.word	0x0800719c
 8001ef4:	080071a4 	.word	0x080071a4
 8001ef8:	080071b0 	.word	0x080071b0
 8001efc:	08000d15 	.word	0x08000d15
 8001f00:	08000cfd 	.word	0x08000cfd
 8001f04:	080071b4 	.word	0x080071b4
 8001f08:	080071b8 	.word	0x080071b8
 8001f0c:	080071fc 	.word	0x080071fc
 8001f10:	08007210 	.word	0x08007210
 8001f14:	08007214 	.word	0x08007214
 8001f18:	08007234 	.word	0x08007234
 8001f1c:	0800730c 	.word	0x0800730c
 8001f20:	080073d8 	.word	0x080073d8
 8001f24:	080073f8 	.word	0x080073f8
 8001f28:	08007400 	.word	0x08007400
 8001f2c:	08007404 	.word	0x08007404
 8001f30:	0800746c 	.word	0x0800746c
 8001f34:	080074a4 	.word	0x080074a4
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001f38:	4b50      	ldr	r3, [pc, #320]	; (800207c <tft_init+0x750>)
 8001f3a:	f240 4203 	movw	r2, #1027	; 0x403
 8001f3e:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001f40:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <tft_init+0x754>)
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	233b      	movs	r3, #59	; 0x3b
 8001f46:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001f48:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <tft_init+0x758>)
 8001f4a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f52:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001f54:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <tft_init+0x75c>)
 8001f56:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f5e:	801a      	strh	r2, [r3, #0]
        break;
 8001f60:	e039      	b.n	8001fd6 <tft_init+0x6aa>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <tft_init+0x750>)
 8001f64:	f240 4203 	movw	r2, #1027	; 0x403
 8001f68:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8001f6a:	e003      	b.n	8001f74 <tft_init+0x648>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001f6c:	4b43      	ldr	r3, [pc, #268]	; (800207c <tft_init+0x750>)
 8001f6e:	f240 4213 	movw	r2, #1043	; 0x413
 8001f72:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8001f78:	4b44      	ldr	r3, [pc, #272]	; (800208c <tft_init+0x760>)
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	232b      	movs	r3, #43	; 0x2b
 8001f7e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001f80:	4b40      	ldr	r3, [pc, #256]	; (8002084 <tft_init+0x758>)
 8001f82:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f8a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001f8c:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <tft_init+0x75c>)
 8001f8e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f96:	801a      	strh	r2, [r3, #0]
        break;
 8001f98:	e01d      	b.n	8001fd6 <tft_init+0x6aa>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8001f9a:	4b38      	ldr	r3, [pc, #224]	; (800207c <tft_init+0x750>)
 8001f9c:	f241 0208 	movw	r2, #4104	; 0x1008
 8001fa0:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8001fa2:	21b0      	movs	r1, #176	; 0xb0
 8001fa4:	483a      	ldr	r0, [pc, #232]	; (8002090 <tft_init+0x764>)
 8001fa6:	f7ff faac 	bl	8001502 <init_table16>
        break;
 8001faa:	e014      	b.n	8001fd6 <tft_init+0x6aa>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <tft_init+0x750>)
 8001fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fb2:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8001fb4:	21c0      	movs	r1, #192	; 0xc0
 8001fb6:	4837      	ldr	r0, [pc, #220]	; (8002094 <tft_init+0x768>)
 8001fb8:	f7ff faa3 	bl	8001502 <init_table16>
        p16 = (int16_t *) & height;
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <tft_init+0x758>)
 8001fbe:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001fc6:	801a      	strh	r2, [r3, #0]
        break;
 8001fc8:	e005      	b.n	8001fd6 <tft_init+0x6aa>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <tft_init+0x75c>)
 8001fcc:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	801a      	strh	r2, [r3, #0]
        break;
 8001fd4:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <tft_init+0x750>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <tft_init+0x76c>)
 8001fec:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00d      	beq.n	8002010 <tft_init+0x6e4>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001ff4:	2109      	movs	r1, #9
 8001ff6:	4829      	ldr	r0, [pc, #164]	; (800209c <tft_init+0x770>)
 8001ff8:	f7ff fa2a 	bl	8001450 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001ffc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002000:	4619      	mov	r1, r3
 8002002:	69f8      	ldr	r0, [r7, #28]
 8002004:	f7ff fa24 	bl	8001450 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8002008:	2106      	movs	r1, #6
 800200a:	4825      	ldr	r0, [pc, #148]	; (80020a0 <tft_init+0x774>)
 800200c:	f7ff fa20 	bl	8001450 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8002010:	2000      	movs	r0, #0
 8002012:	f000 fe83 	bl	8002d1c <setRotation>
    invertDisplay(false);
 8002016:	2000      	movs	r0, #0
 8002018:	f001 fc24 	bl	8003864 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <tft_init+0x778>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f249 4288 	movw	r2, #38024	; 0x9488
 8002024:	4293      	cmp	r3, r2
 8002026:	d125      	bne.n	8002074 <tft_init+0x748>
		is555 = 0;
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <tft_init+0x77c>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 800202e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002032:	2100      	movs	r1, #0
 8002034:	2000      	movs	r0, #0
 8002036:	f001 f8fb 	bl	8003230 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 800203a:	2100      	movs	r1, #0
 800203c:	2000      	movs	r0, #0
 800203e:	f7fe ff0c 	bl	8000e5a <readPixel>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	f64f 731f 	movw	r3, #65311	; 0xff1f
 800204a:	429a      	cmp	r2, r3
 800204c:	d112      	bne.n	8002074 <tft_init+0x748>
			uint8_t pixfmt = 0x06;
 800204e:	2306      	movs	r3, #6
 8002050:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8002052:	f107 030f 	add.w	r3, r7, #15
 8002056:	2201      	movs	r2, #1
 8002058:	4619      	mov	r1, r3
 800205a:	203a      	movs	r0, #58	; 0x3a
 800205c:	f7fe ff27 	bl	8000eae <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <tft_init+0x750>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	f023 0310 	bic.w	r3, r3, #16
 8002068:	b29a      	uxth	r2, r3
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <tft_init+0x750>)
 800206c:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <tft_init+0x77c>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000012a 	.word	0x2000012a
 8002080:	080074ec 	.word	0x080074ec
 8002084:	08000d15 	.word	0x08000d15
 8002088:	08000cfd 	.word	0x08000cfd
 800208c:	08007528 	.word	0x08007528
 8002090:	08007554 	.word	0x08007554
 8002094:	08007604 	.word	0x08007604
 8002098:	2000012e 	.word	0x2000012e
 800209c:	080076c4 	.word	0x080076c4
 80020a0:	080076d0 	.word	0x080076d0
 80020a4:	2000012c 	.word	0x2000012c
 80020a8:	20000122 	.word	0x20000122

080020ac <readID>:

uint16_t readID(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 80020b2:	2100      	movs	r1, #0
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7ff fb69 	bl	800178c <readReg>
 80020ba:	4603      	mov	r3, r0
 80020bc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80020be:	89fb      	ldrh	r3, [r7, #14]
 80020c0:	f245 4208 	movw	r2, #21512	; 0x5408
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <readID+0x22>
        return 0x5408;
 80020c8:	f245 4308 	movw	r3, #21512	; 0x5408
 80020cc:	e128      	b.n	8002320 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80020ce:	89fb      	ldrh	r3, [r7, #14]
 80020d0:	f245 4220 	movw	r2, #21536	; 0x5420
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d102      	bne.n	80020de <readID+0x32>
        return 0x5420;
 80020d8:	f245 4320 	movw	r3, #21536	; 0x5420
 80020dc:	e120      	b.n	8002320 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 80020de:	89fb      	ldrh	r3, [r7, #14]
 80020e0:	f648 1289 	movw	r2, #35209	; 0x8989
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d102      	bne.n	80020ee <readID+0x42>
        return 0x1289;
 80020e8:	f241 2389 	movw	r3, #4745	; 0x1289
 80020ec:	e118      	b.n	8002320 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 80020ee:	2100      	movs	r1, #0
 80020f0:	2067      	movs	r0, #103	; 0x67
 80020f2:	f7ff fb4b 	bl	800178c <readReg>
 80020f6:	4603      	mov	r3, r0
 80020f8:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	f244 7247 	movw	r2, #18247	; 0x4747
 8002100:	4293      	cmp	r3, r2
 8002102:	d102      	bne.n	800210a <readID+0x5e>
        return 0x8347;
 8002104:	f248 3347 	movw	r3, #33607	; 0x8347
 8002108:	e10a      	b.n	8002320 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 800210a:	20a1      	movs	r0, #161	; 0xa1
 800210c:	f7ff fbcc 	bl	80018a8 <readReg32>
 8002110:	4603      	mov	r3, r0
 8002112:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f246 1201 	movw	r2, #24833	; 0x6101
 800211a:	4293      	cmp	r3, r2
 800211c:	d102      	bne.n	8002124 <readID+0x78>
        return 0x1963;
 800211e:	f641 1363 	movw	r3, #6499	; 0x1963
 8002122:	e0fd      	b.n	8002320 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8002124:	89fb      	ldrh	r3, [r7, #14]
 8002126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212a:	4293      	cmp	r3, r2
 800212c:	d102      	bne.n	8002134 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 800212e:	f241 5326 	movw	r3, #5414	; 0x1526
 8002132:	e0f5      	b.n	8002320 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8002134:	20bf      	movs	r0, #191	; 0xbf
 8002136:	f7ff fbd2 	bl	80018de <readReg40>
 800213a:	4603      	mov	r3, r0
 800213c:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 800213e:	89fb      	ldrh	r3, [r7, #14]
 8002140:	f248 3257 	movw	r2, #33623	; 0x8357
 8002144:	4293      	cmp	r3, r2
 8002146:	d102      	bne.n	800214e <readID+0xa2>
        return 0x8357;
 8002148:	f248 3357 	movw	r3, #33623	; 0x8357
 800214c:	e0e8      	b.n	8002320 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 800214e:	89fb      	ldrh	r3, [r7, #14]
 8002150:	f249 4281 	movw	r2, #38017	; 0x9481
 8002154:	4293      	cmp	r3, r2
 8002156:	d102      	bne.n	800215e <readID+0xb2>
        return 0x9481;
 8002158:	f249 4381 	movw	r3, #38017	; 0x9481
 800215c:	e0e0      	b.n	8002320 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	f241 5211 	movw	r2, #5393	; 0x1511
 8002164:	4293      	cmp	r3, r2
 8002166:	d102      	bne.n	800216e <readID+0xc2>
        return 0x1511;
 8002168:	f241 5311 	movw	r3, #5393	; 0x1511
 800216c:	e0d8      	b.n	8002320 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 800216e:	89fb      	ldrh	r3, [r7, #14]
 8002170:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002174:	d102      	bne.n	800217c <readID+0xd0>
        return 0x1520;
 8002176:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 800217a:	e0d1      	b.n	8002320 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	f241 5226 	movw	r2, #5414	; 0x1526
 8002182:	4293      	cmp	r3, r2
 8002184:	d102      	bne.n	800218c <readID+0xe0>
        return 0x1526;
 8002186:	f241 5326 	movw	r3, #5414	; 0x1526
 800218a:	e0c9      	b.n	8002320 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 800218c:	89fb      	ldrh	r3, [r7, #14]
 800218e:	f241 5281 	movw	r2, #5505	; 0x1581
 8002192:	4293      	cmp	r3, r2
 8002194:	d102      	bne.n	800219c <readID+0xf0>
        return 0x1581;
 8002196:	f241 5381 	movw	r3, #5505	; 0x1581
 800219a:	e0c1      	b.n	8002320 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80021a2:	d102      	bne.n	80021aa <readID+0xfe>
        return 0x6814;
 80021a4:	f646 0314 	movw	r3, #26644	; 0x6814
 80021a8:	e0ba      	b.n	8002320 <readID+0x274>
    ret = readReg32(0xD4);
 80021aa:	20d4      	movs	r0, #212	; 0xd4
 80021ac:	f7ff fb7c 	bl	80018a8 <readReg32>
 80021b0:	4603      	mov	r3, r0
 80021b2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	f245 3210 	movw	r2, #21264	; 0x5310
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d102      	bne.n	80021c4 <readID+0x118>
        return 0x5310;
 80021be:	f245 3310 	movw	r3, #21264	; 0x5310
 80021c2:	e0ad      	b.n	8002320 <readID+0x274>
    ret = readReg32(0xD7);
 80021c4:	20d7      	movs	r0, #215	; 0xd7
 80021c6:	f7ff fb6f 	bl	80018a8 <readReg32>
 80021ca:	4603      	mov	r3, r0
 80021cc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	f248 0231 	movw	r2, #32817	; 0x8031
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d102      	bne.n	80021de <readID+0x132>
        return 0x8031;
 80021d8:	f248 0331 	movw	r3, #32817	; 0x8031
 80021dc:	e0a0      	b.n	8002320 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 80021de:	20ef      	movs	r0, #239	; 0xef
 80021e0:	f7ff fb7d 	bl	80018de <readReg40>
 80021e4:	4603      	mov	r3, r0
 80021e6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	f249 3227 	movw	r2, #37671	; 0x9327
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d102      	bne.n	80021f8 <readID+0x14c>
        return 0x9327;
 80021f2:	f249 3327 	movw	r3, #37671	; 0x9327
 80021f6:	e093      	b.n	8002320 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 80021f8:	20fe      	movs	r0, #254	; 0xfe
 80021fa:	f7ff fb55 	bl	80018a8 <readReg32>
 80021fe:	4603      	mov	r3, r0
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	f242 0253 	movw	r2, #8275	; 0x2053
 800220a:	4293      	cmp	r3, r2
 800220c:	d102      	bne.n	8002214 <readID+0x168>
        return 0x2053;
 800220e:	f242 0353 	movw	r3, #8275	; 0x2053
 8002212:	e085      	b.n	8002320 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8002214:	2004      	movs	r0, #4
 8002216:	f7ff fb47 	bl	80018a8 <readReg32>
 800221a:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d122      	bne.n	8002272 <readID+0x1c6>
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002232:	d11e      	bne.n	8002272 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8002234:	4a3c      	ldr	r2, [pc, #240]	; (8002328 <readID+0x27c>)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	4611      	mov	r1, r2
 800223c:	8019      	strh	r1, [r3, #0]
 800223e:	3302      	adds	r3, #2
 8002240:	0c12      	lsrs	r2, r2, #16
 8002242:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2203      	movs	r2, #3
 8002248:	4619      	mov	r1, r3
 800224a:	20b9      	movs	r0, #185	; 0xb9
 800224c:	f7fe fe2f 	bl	8000eae <pushCommand>
        msb = readReg(0xD0,0);
 8002250:	2100      	movs	r1, #0
 8002252:	20d0      	movs	r0, #208	; 0xd0
 8002254:	f7ff fa9a 	bl	800178c <readReg>
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2b99      	cmp	r3, #153	; 0x99
 8002260:	d101      	bne.n	8002266 <readID+0x1ba>
 8002262:	2399      	movs	r3, #153	; 0x99
 8002264:	e05c      	b.n	8002320 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b90      	cmp	r3, #144	; 0x90
 800226a:	d102      	bne.n	8002272 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 800226c:	f249 0390 	movw	r3, #37008	; 0x9090
 8002270:	e056      	b.n	8002320 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	f241 5226 	movw	r2, #5414	; 0x1526
 8002278:	4293      	cmp	r3, r2
 800227a:	d102      	bne.n	8002282 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 800227c:	f241 5326 	movw	r3, #5414	; 0x1526
 8002280:	e04e      	b.n	8002320 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8002288:	4293      	cmp	r3, r2
 800228a:	d102      	bne.n	8002292 <readID+0x1e6>
        return 0x7735;
 800228c:	f247 7335 	movw	r3, #30517	; 0x7735
 8002290:	e046      	b.n	8002320 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	f248 5252 	movw	r2, #34130	; 0x8552
 8002298:	4293      	cmp	r3, r2
 800229a:	d102      	bne.n	80022a2 <readID+0x1f6>
        return 0x7789;
 800229c:	f247 7389 	movw	r3, #30601	; 0x7789
 80022a0:	e03e      	b.n	8002320 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	f64a 4211 	movw	r2, #44049	; 0xac11
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d102      	bne.n	80022b2 <readID+0x206>
        return 0xAC11;
 80022ac:	f64a 4311 	movw	r3, #44049	; 0xac11
 80022b0:	e036      	b.n	8002320 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 80022b2:	20d3      	movs	r0, #211	; 0xd3
 80022b4:	f7ff faf8 	bl	80018a8 <readReg32>
 80022b8:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	f249 1263 	movw	r2, #37219	; 0x9163
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <readID+0x222>
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	e028      	b.n	8002320 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80022ce:	20d3      	movs	r0, #211	; 0xd3
 80022d0:	f7ff faea 	bl	80018a8 <readReg32>
 80022d4:	4603      	mov	r3, r0
 80022d6:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 80022d8:	89fb      	ldrh	r3, [r7, #14]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b93      	cmp	r3, #147	; 0x93
 80022e4:	d00b      	beq.n	80022fe <readID+0x252>
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b94      	cmp	r3, #148	; 0x94
 80022ea:	d008      	beq.n	80022fe <readID+0x252>
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b98      	cmp	r3, #152	; 0x98
 80022f0:	d005      	beq.n	80022fe <readID+0x252>
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b77      	cmp	r3, #119	; 0x77
 80022f6:	d002      	beq.n	80022fe <readID+0x252>
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2b16      	cmp	r3, #22
 80022fc:	d101      	bne.n	8002302 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	e00e      	b.n	8002320 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	2bd3      	cmp	r3, #211	; 0xd3
 8002306:	d004      	beq.n	8002312 <readID+0x266>
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8002312:	89fb      	ldrh	r3, [r7, #14]
 8002314:	e004      	b.n	8002320 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002316:	2100      	movs	r1, #0
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff fa37 	bl	800178c <readReg>
 800231e:	4603      	mov	r3, r0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	080066f4 	.word	0x080066f4

0800232c <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	60ba      	str	r2, [r7, #8]
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	81fb      	strh	r3, [r7, #14]
 800233a:	460b      	mov	r3, r1
 800233c:	81bb      	strh	r3, [r7, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8002342:	4b8d      	ldr	r3, [pc, #564]	; (8002578 <readGRAM+0x24c>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800234c:	fb12 f303 	smulbb	r3, r2, r3
 8002350:	b29b      	uxth	r3, r3
 8002352:	847b      	strh	r3, [r7, #34]	; 0x22
 8002354:	2300      	movs	r3, #0
 8002356:	843b      	strh	r3, [r7, #32]
 8002358:	2300      	movs	r3, #0
 800235a:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 800235c:	4b87      	ldr	r3, [pc, #540]	; (800257c <readGRAM+0x250>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <readGRAM+0x48>
 8002364:	4b86      	ldr	r3, [pc, #536]	; (8002580 <readGRAM+0x254>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <readGRAM+0x48>
        _MR = 0x2E;
 8002370:	232e      	movs	r3, #46	; 0x2e
 8002372:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8002374:	4b83      	ldr	r3, [pc, #524]	; (8002584 <readGRAM+0x258>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f241 6202 	movw	r2, #5634	; 0x1602
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <readGRAM+0x58>
 8002380:	232e      	movs	r3, #46	; 0x2e
 8002382:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002384:	89fa      	ldrh	r2, [r7, #14]
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	4413      	add	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29b      	uxth	r3, r3
 8002390:	b21c      	sxth	r4, r3
 8002392:	89ba      	ldrh	r2, [r7, #12]
 8002394:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002396:	4413      	add	r3, r2
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29b      	uxth	r3, r3
 800239e:	b21b      	sxth	r3, r3
 80023a0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80023a4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80023a8:	4622      	mov	r2, r4
 80023aa:	f000 fff7 	bl	800339c <setAddrWindow>
    while (n > 0) {
 80023ae:	f000 bc8c 	b.w	8002cca <readGRAM+0x99e>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <readGRAM+0x254>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d111      	bne.n	80023e2 <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 80023be:	4b72      	ldr	r3, [pc, #456]	; (8002588 <readGRAM+0x25c>)
 80023c0:	8818      	ldrh	r0, [r3, #0]
 80023c2:	89fa      	ldrh	r2, [r7, #14]
 80023c4:	8bfb      	ldrh	r3, [r7, #30]
 80023c6:	4413      	add	r3, r2
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fd5d 	bl	8000e8a <WriteCmdData>
            WriteCmdData(_MP, y + row);
 80023d0:	4b6e      	ldr	r3, [pc, #440]	; (800258c <readGRAM+0x260>)
 80023d2:	8818      	ldrh	r0, [r3, #0]
 80023d4:	89ba      	ldrh	r2, [r7, #12]
 80023d6:	8c3b      	ldrh	r3, [r7, #32]
 80023d8:	4413      	add	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fd54 	bl	8000e8a <WriteCmdData>
        }
        CS_ACTIVE;
 80023e2:	2108      	movs	r1, #8
 80023e4:	486a      	ldr	r0, [pc, #424]	; (8002590 <readGRAM+0x264>)
 80023e6:	f7fe fc3b 	bl	8000c60 <PIN_LOW>
        WriteCmd(_MR);
 80023ea:	2104      	movs	r1, #4
 80023ec:	4868      	ldr	r0, [pc, #416]	; (8002590 <readGRAM+0x264>)
 80023ee:	f7fe fc37 	bl	8000c60 <PIN_LOW>
 80023f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	777b      	strb	r3, [r7, #29]
 80023fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023fc:	773b      	strb	r3, [r7, #28]
 80023fe:	4b64      	ldr	r3, [pc, #400]	; (8002590 <readGRAM+0x264>)
 8002400:	4a64      	ldr	r2, [pc, #400]	; (8002594 <readGRAM+0x268>)
 8002402:	619a      	str	r2, [r3, #24]
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <readGRAM+0x26c>)
 8002406:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	7f7b      	ldrb	r3, [r7, #29]
 800240e:	035b      	lsls	r3, r3, #13
 8002410:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8002414:	7f7b      	ldrb	r3, [r7, #29]
 8002416:	109b      	asrs	r3, r3, #2
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	431a      	orrs	r2, r3
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <readGRAM+0x264>)
 8002420:	619a      	str	r2, [r3, #24]
 8002422:	7f7b      	ldrb	r3, [r7, #29]
 8002424:	4a5c      	ldr	r2, [pc, #368]	; (8002598 <readGRAM+0x26c>)
 8002426:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	2102      	movs	r1, #2
 800242e:	4858      	ldr	r0, [pc, #352]	; (8002590 <readGRAM+0x264>)
 8002430:	f7fe fc16 	bl	8000c60 <PIN_LOW>
 8002434:	2102      	movs	r1, #2
 8002436:	4856      	ldr	r0, [pc, #344]	; (8002590 <readGRAM+0x264>)
 8002438:	f7fe fc22 	bl	8000c80 <PIN_HIGH>
 800243c:	2102      	movs	r1, #2
 800243e:	4854      	ldr	r0, [pc, #336]	; (8002590 <readGRAM+0x264>)
 8002440:	f7fe fc1e 	bl	8000c80 <PIN_HIGH>
 8002444:	4b52      	ldr	r3, [pc, #328]	; (8002590 <readGRAM+0x264>)
 8002446:	4a53      	ldr	r2, [pc, #332]	; (8002594 <readGRAM+0x268>)
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	4b53      	ldr	r3, [pc, #332]	; (8002598 <readGRAM+0x26c>)
 800244c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8002450:	619a      	str	r2, [r3, #24]
 8002452:	7f3b      	ldrb	r3, [r7, #28]
 8002454:	035b      	lsls	r3, r3, #13
 8002456:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800245a:	7f3b      	ldrb	r3, [r7, #28]
 800245c:	109b      	asrs	r3, r3, #2
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	431a      	orrs	r2, r3
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <readGRAM+0x264>)
 8002466:	619a      	str	r2, [r3, #24]
 8002468:	7f3b      	ldrb	r3, [r7, #28]
 800246a:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <readGRAM+0x26c>)
 800246c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002470:	6193      	str	r3, [r2, #24]
 8002472:	2102      	movs	r1, #2
 8002474:	4846      	ldr	r0, [pc, #280]	; (8002590 <readGRAM+0x264>)
 8002476:	f7fe fbf3 	bl	8000c60 <PIN_LOW>
 800247a:	2102      	movs	r1, #2
 800247c:	4844      	ldr	r0, [pc, #272]	; (8002590 <readGRAM+0x264>)
 800247e:	f7fe fbff 	bl	8000c80 <PIN_HIGH>
 8002482:	2102      	movs	r1, #2
 8002484:	4842      	ldr	r0, [pc, #264]	; (8002590 <readGRAM+0x264>)
 8002486:	f7fe fbfb 	bl	8000c80 <PIN_HIGH>
 800248a:	2104      	movs	r1, #4
 800248c:	4840      	ldr	r0, [pc, #256]	; (8002590 <readGRAM+0x264>)
 800248e:	f7fe fbf7 	bl	8000c80 <PIN_HIGH>
        setReadDir();
 8002492:	f7fe fd1f 	bl	8000ed4 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8002496:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <readGRAM+0x254>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 813e 	bne.w	8002720 <readGRAM+0x3f4>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <readGRAM+0x254>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <readGRAM+0x190>
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <readGRAM+0x258>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f241 2289 	movw	r2, #4745	; 0x1289
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d16f      	bne.n	800259c <readGRAM+0x270>
            READ_8(r);
 80024bc:	2101      	movs	r1, #1
 80024be:	4834      	ldr	r0, [pc, #208]	; (8002590 <readGRAM+0x264>)
 80024c0:	f7fe fbde 	bl	8000c80 <PIN_HIGH>
 80024c4:	2101      	movs	r1, #1
 80024c6:	4832      	ldr	r0, [pc, #200]	; (8002590 <readGRAM+0x264>)
 80024c8:	f7fe fbca 	bl	8000c60 <PIN_LOW>
 80024cc:	2101      	movs	r1, #1
 80024ce:	4830      	ldr	r0, [pc, #192]	; (8002590 <readGRAM+0x264>)
 80024d0:	f7fe fbc6 	bl	8000c60 <PIN_LOW>
 80024d4:	2101      	movs	r1, #1
 80024d6:	482e      	ldr	r0, [pc, #184]	; (8002590 <readGRAM+0x264>)
 80024d8:	f7fe fbc2 	bl	8000c60 <PIN_LOW>
 80024dc:	2101      	movs	r1, #1
 80024de:	482c      	ldr	r0, [pc, #176]	; (8002590 <readGRAM+0x264>)
 80024e0:	f7fe fbbe 	bl	8000c60 <PIN_LOW>
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <readGRAM+0x26c>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <readGRAM+0x26c>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <readGRAM+0x264>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	0b5b      	lsrs	r3, r3, #13
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4313      	orrs	r3, r2
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <readGRAM+0x26c>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <readGRAM+0x26c>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4313      	orrs	r3, r2
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <readGRAM+0x26c>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4313      	orrs	r3, r2
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <readGRAM+0x26c>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <readGRAM+0x264>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	75fb      	strb	r3, [r7, #23]
 8002566:	2101      	movs	r1, #1
 8002568:	4809      	ldr	r0, [pc, #36]	; (8002590 <readGRAM+0x264>)
 800256a:	f7fe fb89 	bl	8000c80 <PIN_HIGH>
 800256e:	2101      	movs	r1, #1
 8002570:	4807      	ldr	r0, [pc, #28]	; (8002590 <readGRAM+0x264>)
 8002572:	f7fe fb85 	bl	8000c80 <PIN_HIGH>
 8002576:	e0d3      	b.n	8002720 <readGRAM+0x3f4>
 8002578:	20000136 	.word	0x20000136
 800257c:	20000121 	.word	0x20000121
 8002580:	2000012a 	.word	0x2000012a
 8002584:	2000012c 	.word	0x2000012c
 8002588:	20000132 	.word	0x20000132
 800258c:	20000134 	.word	0x20000134
 8002590:	40020000 	.word	0x40020000
 8002594:	80200000 	.word	0x80200000
 8002598:	40020400 	.word	0x40020400
        } else {
            READ_16(dummy);
 800259c:	2101      	movs	r1, #1
 800259e:	4893      	ldr	r0, [pc, #588]	; (80027ec <readGRAM+0x4c0>)
 80025a0:	f7fe fb6e 	bl	8000c80 <PIN_HIGH>
 80025a4:	2101      	movs	r1, #1
 80025a6:	4891      	ldr	r0, [pc, #580]	; (80027ec <readGRAM+0x4c0>)
 80025a8:	f7fe fb5a 	bl	8000c60 <PIN_LOW>
 80025ac:	2101      	movs	r1, #1
 80025ae:	488f      	ldr	r0, [pc, #572]	; (80027ec <readGRAM+0x4c0>)
 80025b0:	f7fe fb56 	bl	8000c60 <PIN_LOW>
 80025b4:	2101      	movs	r1, #1
 80025b6:	488d      	ldr	r0, [pc, #564]	; (80027ec <readGRAM+0x4c0>)
 80025b8:	f7fe fb52 	bl	8000c60 <PIN_LOW>
 80025bc:	2101      	movs	r1, #1
 80025be:	488b      	ldr	r0, [pc, #556]	; (80027ec <readGRAM+0x4c0>)
 80025c0:	f7fe fb4e 	bl	8000c60 <PIN_LOW>
 80025c4:	4b8a      	ldr	r3, [pc, #552]	; (80027f0 <readGRAM+0x4c4>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <readGRAM+0x4c4>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b82      	ldr	r3, [pc, #520]	; (80027ec <readGRAM+0x4c0>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	0b5b      	lsrs	r3, r3, #13
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <readGRAM+0x4c4>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b7b      	ldr	r3, [pc, #492]	; (80027f0 <readGRAM+0x4c4>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4313      	orrs	r3, r2
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <readGRAM+0x4c4>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <readGRAM+0x4c4>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	b2db      	uxtb	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <readGRAM+0x4c0>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	76fb      	strb	r3, [r7, #27]
 8002646:	2101      	movs	r1, #1
 8002648:	4868      	ldr	r0, [pc, #416]	; (80027ec <readGRAM+0x4c0>)
 800264a:	f7fe fb19 	bl	8000c80 <PIN_HIGH>
 800264e:	2101      	movs	r1, #1
 8002650:	4866      	ldr	r0, [pc, #408]	; (80027ec <readGRAM+0x4c0>)
 8002652:	f7fe fb15 	bl	8000c80 <PIN_HIGH>
 8002656:	2101      	movs	r1, #1
 8002658:	4864      	ldr	r0, [pc, #400]	; (80027ec <readGRAM+0x4c0>)
 800265a:	f7fe fb11 	bl	8000c80 <PIN_HIGH>
 800265e:	2101      	movs	r1, #1
 8002660:	4862      	ldr	r0, [pc, #392]	; (80027ec <readGRAM+0x4c0>)
 8002662:	f7fe fafd 	bl	8000c60 <PIN_LOW>
 8002666:	2101      	movs	r1, #1
 8002668:	4860      	ldr	r0, [pc, #384]	; (80027ec <readGRAM+0x4c0>)
 800266a:	f7fe faf9 	bl	8000c60 <PIN_LOW>
 800266e:	2101      	movs	r1, #1
 8002670:	485e      	ldr	r0, [pc, #376]	; (80027ec <readGRAM+0x4c0>)
 8002672:	f7fe faf5 	bl	8000c60 <PIN_LOW>
 8002676:	2101      	movs	r1, #1
 8002678:	485c      	ldr	r0, [pc, #368]	; (80027ec <readGRAM+0x4c0>)
 800267a:	f7fe faf1 	bl	8000c60 <PIN_LOW>
 800267e:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <readGRAM+0x4c4>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <readGRAM+0x4c4>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	b29b      	uxth	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <readGRAM+0x4c0>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	0b5b      	lsrs	r3, r3, #13
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <readGRAM+0x4c4>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <readGRAM+0x4c4>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <readGRAM+0x4c4>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <readGRAM+0x4c4>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <readGRAM+0x4c0>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4313      	orrs	r3, r2
 80026fe:	833b      	strh	r3, [r7, #24]
 8002700:	2101      	movs	r1, #1
 8002702:	483a      	ldr	r0, [pc, #232]	; (80027ec <readGRAM+0x4c0>)
 8002704:	f7fe fabc 	bl	8000c80 <PIN_HIGH>
 8002708:	2101      	movs	r1, #1
 800270a:	4838      	ldr	r0, [pc, #224]	; (80027ec <readGRAM+0x4c0>)
 800270c:	f7fe fab8 	bl	8000c80 <PIN_HIGH>
 8002710:	7efb      	ldrb	r3, [r7, #27]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b21a      	sxth	r2, r3
 8002716:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	b21b      	sxth	r3, r3
 800271e:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002720:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <readGRAM+0x4c8>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	f241 5211 	movw	r2, #5393	; 0x1511
 8002728:	4293      	cmp	r3, r2
 800272a:	f040 82a5 	bne.w	8002c78 <readGRAM+0x94c>
 800272e:	2101      	movs	r1, #1
 8002730:	482e      	ldr	r0, [pc, #184]	; (80027ec <readGRAM+0x4c0>)
 8002732:	f7fe faa5 	bl	8000c80 <PIN_HIGH>
 8002736:	2101      	movs	r1, #1
 8002738:	482c      	ldr	r0, [pc, #176]	; (80027ec <readGRAM+0x4c0>)
 800273a:	f7fe fa91 	bl	8000c60 <PIN_LOW>
 800273e:	2101      	movs	r1, #1
 8002740:	482a      	ldr	r0, [pc, #168]	; (80027ec <readGRAM+0x4c0>)
 8002742:	f7fe fa8d 	bl	8000c60 <PIN_LOW>
 8002746:	2101      	movs	r1, #1
 8002748:	4828      	ldr	r0, [pc, #160]	; (80027ec <readGRAM+0x4c0>)
 800274a:	f7fe fa89 	bl	8000c60 <PIN_LOW>
 800274e:	2101      	movs	r1, #1
 8002750:	4826      	ldr	r0, [pc, #152]	; (80027ec <readGRAM+0x4c0>)
 8002752:	f7fe fa85 	bl	8000c60 <PIN_LOW>
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <readGRAM+0x4c4>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <readGRAM+0x4c4>)
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4313      	orrs	r3, r2
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <readGRAM+0x4c0>)
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	0b5b      	lsrs	r3, r3, #13
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4313      	orrs	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <readGRAM+0x4c4>)
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <readGRAM+0x4c4>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <readGRAM+0x4c4>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <readGRAM+0x4c4>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <readGRAM+0x4c0>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	75fb      	strb	r3, [r7, #23]
 80027d8:	2101      	movs	r1, #1
 80027da:	4804      	ldr	r0, [pc, #16]	; (80027ec <readGRAM+0x4c0>)
 80027dc:	f7fe fa50 	bl	8000c80 <PIN_HIGH>
 80027e0:	2101      	movs	r1, #1
 80027e2:	4802      	ldr	r0, [pc, #8]	; (80027ec <readGRAM+0x4c0>)
 80027e4:	f7fe fa4c 	bl	8000c80 <PIN_HIGH>
        while (n)
 80027e8:	e246      	b.n	8002c78 <readGRAM+0x94c>
 80027ea:	bf00      	nop
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40020400 	.word	0x40020400
 80027f4:	2000012c 	.word	0x2000012c
        {
            if (_lcd_capable & READ_24BITS)
 80027f8:	4b9a      	ldr	r3, [pc, #616]	; (8002a64 <readGRAM+0x738>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8135 	beq.w	8002a70 <readGRAM+0x744>
            {
                READ_8(r);
 8002806:	2101      	movs	r1, #1
 8002808:	4897      	ldr	r0, [pc, #604]	; (8002a68 <readGRAM+0x73c>)
 800280a:	f7fe fa39 	bl	8000c80 <PIN_HIGH>
 800280e:	2101      	movs	r1, #1
 8002810:	4895      	ldr	r0, [pc, #596]	; (8002a68 <readGRAM+0x73c>)
 8002812:	f7fe fa25 	bl	8000c60 <PIN_LOW>
 8002816:	2101      	movs	r1, #1
 8002818:	4893      	ldr	r0, [pc, #588]	; (8002a68 <readGRAM+0x73c>)
 800281a:	f7fe fa21 	bl	8000c60 <PIN_LOW>
 800281e:	2101      	movs	r1, #1
 8002820:	4891      	ldr	r0, [pc, #580]	; (8002a68 <readGRAM+0x73c>)
 8002822:	f7fe fa1d 	bl	8000c60 <PIN_LOW>
 8002826:	2101      	movs	r1, #1
 8002828:	488f      	ldr	r0, [pc, #572]	; (8002a68 <readGRAM+0x73c>)
 800282a:	f7fe fa19 	bl	8000c60 <PIN_LOW>
 800282e:	4b8f      	ldr	r3, [pc, #572]	; (8002a6c <readGRAM+0x740>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <readGRAM+0x740>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4313      	orrs	r3, r2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b87      	ldr	r3, [pc, #540]	; (8002a68 <readGRAM+0x73c>)
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	0b5b      	lsrs	r3, r3, #13
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b83      	ldr	r3, [pc, #524]	; (8002a6c <readGRAM+0x740>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <readGRAM+0x740>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <readGRAM+0x740>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <readGRAM+0x740>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4313      	orrs	r3, r2
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <readGRAM+0x73c>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4313      	orrs	r3, r2
 80028ae:	75fb      	strb	r3, [r7, #23]
 80028b0:	2101      	movs	r1, #1
 80028b2:	486d      	ldr	r0, [pc, #436]	; (8002a68 <readGRAM+0x73c>)
 80028b4:	f7fe f9e4 	bl	8000c80 <PIN_HIGH>
 80028b8:	2101      	movs	r1, #1
 80028ba:	486b      	ldr	r0, [pc, #428]	; (8002a68 <readGRAM+0x73c>)
 80028bc:	f7fe f9e0 	bl	8000c80 <PIN_HIGH>
                READ_8(g);
 80028c0:	2101      	movs	r1, #1
 80028c2:	4869      	ldr	r0, [pc, #420]	; (8002a68 <readGRAM+0x73c>)
 80028c4:	f7fe f9dc 	bl	8000c80 <PIN_HIGH>
 80028c8:	2101      	movs	r1, #1
 80028ca:	4867      	ldr	r0, [pc, #412]	; (8002a68 <readGRAM+0x73c>)
 80028cc:	f7fe f9c8 	bl	8000c60 <PIN_LOW>
 80028d0:	2101      	movs	r1, #1
 80028d2:	4865      	ldr	r0, [pc, #404]	; (8002a68 <readGRAM+0x73c>)
 80028d4:	f7fe f9c4 	bl	8000c60 <PIN_LOW>
 80028d8:	2101      	movs	r1, #1
 80028da:	4863      	ldr	r0, [pc, #396]	; (8002a68 <readGRAM+0x73c>)
 80028dc:	f7fe f9c0 	bl	8000c60 <PIN_LOW>
 80028e0:	2101      	movs	r1, #1
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <readGRAM+0x73c>)
 80028e4:	f7fe f9bc 	bl	8000c60 <PIN_LOW>
 80028e8:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <readGRAM+0x740>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <readGRAM+0x740>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <readGRAM+0x73c>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	0b5b      	lsrs	r3, r3, #13
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4313      	orrs	r3, r2
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b55      	ldr	r3, [pc, #340]	; (8002a6c <readGRAM+0x740>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4313      	orrs	r3, r2
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b51      	ldr	r3, [pc, #324]	; (8002a6c <readGRAM+0x740>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4313      	orrs	r3, r2
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <readGRAM+0x740>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4313      	orrs	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <readGRAM+0x740>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <readGRAM+0x73c>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002964:	b2db      	uxtb	r3, r3
 8002966:	4313      	orrs	r3, r2
 8002968:	757b      	strb	r3, [r7, #21]
 800296a:	2101      	movs	r1, #1
 800296c:	483e      	ldr	r0, [pc, #248]	; (8002a68 <readGRAM+0x73c>)
 800296e:	f7fe f987 	bl	8000c80 <PIN_HIGH>
 8002972:	2101      	movs	r1, #1
 8002974:	483c      	ldr	r0, [pc, #240]	; (8002a68 <readGRAM+0x73c>)
 8002976:	f7fe f983 	bl	8000c80 <PIN_HIGH>
                READ_8(b);
 800297a:	2101      	movs	r1, #1
 800297c:	483a      	ldr	r0, [pc, #232]	; (8002a68 <readGRAM+0x73c>)
 800297e:	f7fe f97f 	bl	8000c80 <PIN_HIGH>
 8002982:	2101      	movs	r1, #1
 8002984:	4838      	ldr	r0, [pc, #224]	; (8002a68 <readGRAM+0x73c>)
 8002986:	f7fe f96b 	bl	8000c60 <PIN_LOW>
 800298a:	2101      	movs	r1, #1
 800298c:	4836      	ldr	r0, [pc, #216]	; (8002a68 <readGRAM+0x73c>)
 800298e:	f7fe f967 	bl	8000c60 <PIN_LOW>
 8002992:	2101      	movs	r1, #1
 8002994:	4834      	ldr	r0, [pc, #208]	; (8002a68 <readGRAM+0x73c>)
 8002996:	f7fe f963 	bl	8000c60 <PIN_LOW>
 800299a:	2101      	movs	r1, #1
 800299c:	4832      	ldr	r0, [pc, #200]	; (8002a68 <readGRAM+0x73c>)
 800299e:	f7fe f95f 	bl	8000c60 <PIN_LOW>
 80029a2:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <readGRAM+0x740>)
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <readGRAM+0x740>)
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <readGRAM+0x73c>)
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <readGRAM+0x740>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <readGRAM+0x740>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <readGRAM+0x740>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <readGRAM+0x740>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <readGRAM+0x73c>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	753b      	strb	r3, [r7, #20]
 8002a24:	2101      	movs	r1, #1
 8002a26:	4810      	ldr	r0, [pc, #64]	; (8002a68 <readGRAM+0x73c>)
 8002a28:	f7fe f92a 	bl	8000c80 <PIN_HIGH>
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	480e      	ldr	r0, [pc, #56]	; (8002a68 <readGRAM+0x73c>)
 8002a30:	f7fe f926 	bl	8000c80 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <readGRAM+0x738>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <readGRAM+0x726>
                    ret = color565(b, g, r);
 8002a40:	7dfa      	ldrb	r2, [r7, #23]
 8002a42:	7d79      	ldrb	r1, [r7, #21]
 8002a44:	7d3b      	ldrb	r3, [r7, #20]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f9e1 	bl	8000e0e <color565>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a50:	e0f7      	b.n	8002c42 <readGRAM+0x916>
                else
                    ret = color565(r, g, b);
 8002a52:	7d3a      	ldrb	r2, [r7, #20]
 8002a54:	7d79      	ldrb	r1, [r7, #21]
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f9d8 	bl	8000e0e <color565>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a62:	e0ee      	b.n	8002c42 <readGRAM+0x916>
 8002a64:	2000012a 	.word	0x2000012a
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
            } else
            {
                READ_16(ret);
 8002a70:	2101      	movs	r1, #1
 8002a72:	48a6      	ldr	r0, [pc, #664]	; (8002d0c <readGRAM+0x9e0>)
 8002a74:	f7fe f904 	bl	8000c80 <PIN_HIGH>
 8002a78:	2101      	movs	r1, #1
 8002a7a:	48a4      	ldr	r0, [pc, #656]	; (8002d0c <readGRAM+0x9e0>)
 8002a7c:	f7fe f8f0 	bl	8000c60 <PIN_LOW>
 8002a80:	2101      	movs	r1, #1
 8002a82:	48a2      	ldr	r0, [pc, #648]	; (8002d0c <readGRAM+0x9e0>)
 8002a84:	f7fe f8ec 	bl	8000c60 <PIN_LOW>
 8002a88:	2101      	movs	r1, #1
 8002a8a:	48a0      	ldr	r0, [pc, #640]	; (8002d0c <readGRAM+0x9e0>)
 8002a8c:	f7fe f8e8 	bl	8000c60 <PIN_LOW>
 8002a90:	2101      	movs	r1, #1
 8002a92:	489e      	ldr	r0, [pc, #632]	; (8002d0c <readGRAM+0x9e0>)
 8002a94:	f7fe f8e4 	bl	8000c60 <PIN_LOW>
 8002a98:	4b9d      	ldr	r3, [pc, #628]	; (8002d10 <readGRAM+0x9e4>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	4b9a      	ldr	r3, [pc, #616]	; (8002d10 <readGRAM+0x9e4>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	4b95      	ldr	r3, [pc, #596]	; (8002d0c <readGRAM+0x9e0>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	0b5b      	lsrs	r3, r3, #13
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4b92      	ldr	r3, [pc, #584]	; (8002d10 <readGRAM+0x9e4>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <readGRAM+0x9e4>)
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <readGRAM+0x9e4>)
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4b86      	ldr	r3, [pc, #536]	; (8002d10 <readGRAM+0x9e4>)
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <readGRAM+0x9e0>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	4313      	orrs	r3, r2
 8002b18:	75bb      	strb	r3, [r7, #22]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	487b      	ldr	r0, [pc, #492]	; (8002d0c <readGRAM+0x9e0>)
 8002b1e:	f7fe f8af 	bl	8000c80 <PIN_HIGH>
 8002b22:	2101      	movs	r1, #1
 8002b24:	4879      	ldr	r0, [pc, #484]	; (8002d0c <readGRAM+0x9e0>)
 8002b26:	f7fe f8ab 	bl	8000c80 <PIN_HIGH>
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4877      	ldr	r0, [pc, #476]	; (8002d0c <readGRAM+0x9e0>)
 8002b2e:	f7fe f8a7 	bl	8000c80 <PIN_HIGH>
 8002b32:	2101      	movs	r1, #1
 8002b34:	4875      	ldr	r0, [pc, #468]	; (8002d0c <readGRAM+0x9e0>)
 8002b36:	f7fe f893 	bl	8000c60 <PIN_LOW>
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4873      	ldr	r0, [pc, #460]	; (8002d0c <readGRAM+0x9e0>)
 8002b3e:	f7fe f88f 	bl	8000c60 <PIN_LOW>
 8002b42:	2101      	movs	r1, #1
 8002b44:	4871      	ldr	r0, [pc, #452]	; (8002d0c <readGRAM+0x9e0>)
 8002b46:	f7fe f88b 	bl	8000c60 <PIN_LOW>
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	486f      	ldr	r0, [pc, #444]	; (8002d0c <readGRAM+0x9e0>)
 8002b4e:	f7fe f887 	bl	8000c60 <PIN_LOW>
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <readGRAM+0x9e4>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <readGRAM+0x9e4>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <readGRAM+0x9e0>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <readGRAM+0x9e4>)
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <readGRAM+0x9e4>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <readGRAM+0x9e4>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <readGRAM+0x9e4>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b52      	ldr	r3, [pc, #328]	; (8002d0c <readGRAM+0x9e0>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	484d      	ldr	r0, [pc, #308]	; (8002d0c <readGRAM+0x9e0>)
 8002bd8:	f7fe f852 	bl	8000c80 <PIN_HIGH>
 8002bdc:	2101      	movs	r1, #1
 8002bde:	484b      	ldr	r0, [pc, #300]	; (8002d0c <readGRAM+0x9e0>)
 8002be0:	f7fe f84e 	bl	8000c80 <PIN_HIGH>
 8002be4:	7dbb      	ldrb	r3, [r7, #22]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	b21a      	sxth	r2, r3
 8002bea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8002bf4:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <readGRAM+0x9e8>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <readGRAM+0x8e8>
                    ret = (ret >> 8) | (ret << 8);
 8002c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <readGRAM+0x9e8>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <readGRAM+0x916>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002c20:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c2c:	0adb      	lsrs	r3, r3, #11
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	b21b      	sxth	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c38:	02db      	lsls	r3, r3, #11
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8002c42:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <readGRAM+0x9ec>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <readGRAM+0x92a>
 8002c4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f88d 	bl	8000d6c <color555_to_565>
 8002c52:	4603      	mov	r3, r0
 8002c54:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1c9a      	adds	r2, r3, #2
 8002c5a:	60ba      	str	r2, [r7, #8]
 8002c5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c5e:	801a      	strh	r2, [r3, #0]
            n--;
 8002c60:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <readGRAM+0x9e8>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <readGRAM+0x958>
        while (n)
 8002c78:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f adbb 	bne.w	80027f8 <readGRAM+0x4cc>
 8002c82:	e000      	b.n	8002c86 <readGRAM+0x95a>
                break;
 8002c84:	bf00      	nop
        }
        if (++col >= w) {
 8002c86:	8bfb      	ldrh	r3, [r7, #30]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	83fb      	strh	r3, [r7, #30]
 8002c8e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	db0d      	blt.n	8002cb6 <readGRAM+0x98a>
            col = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8002c9e:	8c3b      	ldrh	r3, [r7, #32]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	843b      	strh	r3, [r7, #32]
 8002ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002caa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	db01      	blt.n	8002cb6 <readGRAM+0x98a>
                row = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4814      	ldr	r0, [pc, #80]	; (8002d0c <readGRAM+0x9e0>)
 8002cba:	f7fd ffe1 	bl	8000c80 <PIN_HIGH>
        CS_IDLE;
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	4812      	ldr	r0, [pc, #72]	; (8002d0c <readGRAM+0x9e0>)
 8002cc2:	f7fd ffdd 	bl	8000c80 <PIN_HIGH>
        setWriteDir();
 8002cc6:	f7fe f92f 	bl	8000f28 <setWriteDir>
    while (n > 0) {
 8002cca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f73f ab6f 	bgt.w	80023b2 <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <readGRAM+0x9e8>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d110      	bne.n	8002d02 <readGRAM+0x9d6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002ce0:	f7fe f80c 	bl	8000cfc <width>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b21c      	sxth	r4, r3
 8002cec:	f7fe f812 	bl	8000d14 <height>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f000 fb4d 	bl	800339c <setAddrWindow>
    return 0;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	372c      	adds	r7, #44	; 0x2c
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	2000012a 	.word	0x2000012a
 8002d18:	20000122 	.word	0x20000122

08002d1c <setRotation>:

void setRotation(uint8_t r)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8002d26:	4b9d      	ldr	r3, [pc, #628]	; (8002f9c <setRotation+0x280>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b9a      	ldr	r3, [pc, #616]	; (8002fa0 <setRotation+0x284>)
 8002d36:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8002d38:	4b99      	ldr	r3, [pc, #612]	; (8002fa0 <setRotation+0x284>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <setRotation+0x2e>
 8002d44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d48:	e001      	b.n	8002d4e <setRotation+0x32>
 8002d4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d4e:	4b95      	ldr	r3, [pc, #596]	; (8002fa4 <setRotation+0x288>)
 8002d50:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8002d52:	4b93      	ldr	r3, [pc, #588]	; (8002fa0 <setRotation+0x284>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <setRotation+0x48>
 8002d5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d62:	e001      	b.n	8002d68 <setRotation+0x4c>
 8002d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d68:	4b8f      	ldr	r3, [pc, #572]	; (8002fa8 <setRotation+0x28c>)
 8002d6a:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8002d6c:	4b8c      	ldr	r3, [pc, #560]	; (8002fa0 <setRotation+0x284>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d817      	bhi.n	8002da4 <setRotation+0x88>
 8002d74:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <setRotation+0x60>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d93 	.word	0x08002d93
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002d9f 	.word	0x08002d9f
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002d8c:	2348      	movs	r3, #72	; 0x48
 8002d8e:	72fb      	strb	r3, [r7, #11]
       break;
 8002d90:	e008      	b.n	8002da4 <setRotation+0x88>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8002d92:	2328      	movs	r3, #40	; 0x28
 8002d94:	72fb      	strb	r3, [r7, #11]
       break;
 8002d96:	e005      	b.n	8002da4 <setRotation+0x88>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002d98:	2398      	movs	r3, #152	; 0x98
 8002d9a:	72fb      	strb	r3, [r7, #11]
       break;
 8002d9c:	e002      	b.n	8002da4 <setRotation+0x88>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8002d9e:	23f8      	movs	r3, #248	; 0xf8
 8002da0:	72fb      	strb	r3, [r7, #11]
       break;
 8002da2:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002da4:	4b81      	ldr	r3, [pc, #516]	; (8002fac <setRotation+0x290>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <setRotation+0xa0>
       val ^= 0x80;
 8002db0:	7afb      	ldrb	r3, [r7, #11]
 8002db2:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002db6:	43db      	mvns	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <setRotation+0x290>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <setRotation+0xb6>
       val ^= 0x40;
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <setRotation+0x290>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <setRotation+0xcc>
       val ^= 0x08;
 8002dde:	7afb      	ldrb	r3, [r7, #11]
 8002de0:	f083 0308 	eor.w	r3, r3, #8
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002de8:	4b70      	ldr	r3, [pc, #448]	; (8002fac <setRotation+0x290>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8119 	beq.w	8003028 <setRotation+0x30c>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8002df6:	4b6e      	ldr	r3, [pc, #440]	; (8002fb0 <setRotation+0x294>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	f646 0214 	movw	r2, #26644	; 0x6814
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d128      	bne.n	8002e54 <setRotation+0x138>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	b25b      	sxtb	r3, r3
 8002e06:	105b      	asrs	r3, r3, #1
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	105b      	asrs	r3, r3, #1
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8002e2c:	8a3b      	ldrh	r3, [r7, #16]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	89fb      	ldrh	r3, [r7, #14]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8002e40:	233b      	movs	r3, #59	; 0x3b
 8002e42:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8002e44:	f107 0308 	add.w	r3, r7, #8
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2103      	movs	r1, #3
 8002e4c:	20b6      	movs	r0, #182	; 0xb6
 8002e4e:	f7fe f9d9 	bl	8001204 <WriteCmdParamN>
           goto common_MC;
 8002e52:	e0c0      	b.n	8002fd6 <setRotation+0x2ba>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8002e54:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <setRotation+0x294>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	f641 1263 	movw	r2, #6499	; 0x1963
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <setRotation+0x15c>
 8002e60:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <setRotation+0x294>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	f249 4281 	movw	r2, #38017	; 0x9481
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d005      	beq.n	8002e78 <setRotation+0x15c>
 8002e6c:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <setRotation+0x294>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	f241 5211 	movw	r2, #5393	; 0x1511
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d139      	bne.n	8002eec <setRotation+0x1d0>
           if (val & 0x80)
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da04      	bge.n	8002e8a <setRotation+0x16e>
               val |= 0x01;    //GS
 8002e80:	7afb      	ldrb	r3, [r7, #11]
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <setRotation+0x182>
               val |= 0x02;    //SS
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <setRotation+0x294>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	f641 1263 	movw	r2, #6499	; 0x1963
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d104      	bne.n	8002eb4 <setRotation+0x198>
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <setRotation+0x294>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	f249 4281 	movw	r2, #38017	; 0x9481
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d104      	bne.n	8002eca <setRotation+0x1ae>
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8002eca:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <setRotation+0x294>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	f241 5211 	movw	r2, #5393	; 0x1511
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d160      	bne.n	8002f98 <setRotation+0x27c>
               val &= ~0x10;   //remove ML
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	f023 0310 	bic.w	r3, r3, #16
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8002ee0:	7afb      	ldrb	r3, [r7, #11]
 8002ee2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8002eea:	e055      	b.n	8002f98 <setRotation+0x27c>
      }
       else if (is8347) {
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <setRotation+0x298>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d06f      	beq.n	8002fd4 <setRotation+0x2b8>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <setRotation+0x29c>)
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <setRotation+0x2a0>)
 8002efc:	2206      	movs	r2, #6
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <setRotation+0x2a4>)
 8002f02:	2222      	movs	r2, #34	; 0x22
 8002f04:	801a      	strh	r2, [r3, #0]
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <setRotation+0x2a8>)
 8002f08:	2202      	movs	r2, #2
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <setRotation+0x2ac>)
 8002f0e:	2204      	movs	r2, #4
 8002f10:	801a      	strh	r2, [r3, #0]
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <setRotation+0x2b0>)
 8002f14:	2206      	movs	r2, #6
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <setRotation+0x2b4>)
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <setRotation+0x294>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	2b65      	cmp	r3, #101	; 0x65
 8002f24:	d121      	bne.n	8002f6a <setRotation+0x24e>
               val |= 0x01;    //GS=1
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <setRotation+0x22a>
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
 8002f3c:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8002f40:	43db      	mvns	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d006      	beq.n	8002f5e <setRotation+0x242>
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <setRotation+0x29c>)
 8002f52:	2282      	movs	r2, #130	; 0x82
 8002f54:	801a      	strh	r2, [r3, #0]
 8002f56:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <setRotation+0x2a0>)
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	e005      	b.n	8002f6a <setRotation+0x24e>
               else _MC = 0x80, _MP = 0x82;
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <setRotation+0x29c>)
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <setRotation+0x2a0>)
 8002f66:	2282      	movs	r2, #130	; 0x82
 8002f68:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <setRotation+0x294>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	f245 2252 	movw	r2, #21074	; 0x5252
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d145      	bne.n	8003002 <setRotation+0x2e6>
               val |= 0x02;   //VERT_SCROLLON
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8002f80:	7afb      	ldrb	r3, [r7, #11]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d03b      	beq.n	8003002 <setRotation+0x2e6>
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8002f90:	43db      	mvns	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8002f96:	e034      	b.n	8003002 <setRotation+0x2e6>
           goto common_MC;
 8002f98:	bf00      	nop
 8002f9a:	e01c      	b.n	8002fd6 <setRotation+0x2ba>
 8002f9c:	2000012e 	.word	0x2000012e
 8002fa0:	20000126 	.word	0x20000126
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	20000006 	.word	0x20000006
 8002fac:	2000012a 	.word	0x2000012a
 8002fb0:	2000012c 	.word	0x2000012c
 8002fb4:	20000121 	.word	0x20000121
 8002fb8:	20000132 	.word	0x20000132
 8002fbc:	20000134 	.word	0x20000134
 8002fc0:	20000136 	.word	0x20000136
 8002fc4:	20000138 	.word	0x20000138
 8002fc8:	2000013a 	.word	0x2000013a
 8002fcc:	2000013c 	.word	0x2000013c
 8002fd0:	2000013e 	.word	0x2000013e
       }
     common_MC:
 8002fd4:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8002fd6:	4b8a      	ldr	r3, [pc, #552]	; (8003200 <setRotation+0x4e4>)
 8002fd8:	222a      	movs	r2, #42	; 0x2a
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	4b89      	ldr	r3, [pc, #548]	; (8003204 <setRotation+0x4e8>)
 8002fde:	222b      	movs	r2, #43	; 0x2b
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	4b89      	ldr	r3, [pc, #548]	; (8003208 <setRotation+0x4ec>)
 8002fe4:	222c      	movs	r2, #44	; 0x2c
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	4b88      	ldr	r3, [pc, #544]	; (800320c <setRotation+0x4f0>)
 8002fea:	222a      	movs	r2, #42	; 0x2a
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	4b88      	ldr	r3, [pc, #544]	; (8003210 <setRotation+0x4f4>)
 8002ff0:	222a      	movs	r2, #42	; 0x2a
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	4b87      	ldr	r3, [pc, #540]	; (8003214 <setRotation+0x4f8>)
 8002ff6:	222b      	movs	r2, #43	; 0x2b
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	4b87      	ldr	r3, [pc, #540]	; (8003218 <setRotation+0x4fc>)
 8002ffc:	222b      	movs	r2, #43	; 0x2b
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	e000      	b.n	8003004 <setRotation+0x2e8>
			goto common_BGR;
 8003002:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003004:	4b85      	ldr	r3, [pc, #532]	; (800321c <setRotation+0x500>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <setRotation+0x2f4>
 800300c:	2316      	movs	r3, #22
 800300e:	e000      	b.n	8003012 <setRotation+0x2f6>
 8003010:	2336      	movs	r3, #54	; 0x36
 8003012:	f107 020b 	add.w	r2, r7, #11
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe f8f3 	bl	8001204 <WriteCmdParamN>
       _lcd_madctl = val;
 800301e:	7afb      	ldrb	r3, [r7, #11]
 8003020:	b29a      	uxth	r2, r3
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <setRotation+0x504>)
 8003024:	801a      	strh	r2, [r3, #0]
 8003026:	e0a5      	b.n	8003174 <setRotation+0x458>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8003028:	4b7e      	ldr	r3, [pc, #504]	; (8003224 <setRotation+0x508>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003030:	4293      	cmp	r3, r2
 8003032:	d013      	beq.n	800305c <setRotation+0x340>
 8003034:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003038:	4293      	cmp	r3, r2
 800303a:	dc4f      	bgt.n	80030dc <setRotation+0x3c0>
 800303c:	f249 3226 	movw	r2, #37670	; 0x9326
 8003040:	4293      	cmp	r3, r2
 8003042:	d00b      	beq.n	800305c <setRotation+0x340>
 8003044:	f249 3226 	movw	r2, #37670	; 0x9326
 8003048:	4293      	cmp	r3, r2
 800304a:	dc47      	bgt.n	80030dc <setRotation+0x3c0>
 800304c:	f245 4220 	movw	r2, #21536	; 0x5420
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <setRotation+0x340>
 8003054:	f247 7293 	movw	r2, #30611	; 0x7793
 8003058:	4293      	cmp	r3, r2
 800305a:	d13f      	bne.n	80030dc <setRotation+0x3c0>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 800305c:	4b68      	ldr	r3, [pc, #416]	; (8003200 <setRotation+0x4e4>)
 800305e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	4b67      	ldr	r3, [pc, #412]	; (8003204 <setRotation+0x4e8>)
 8003066:	f240 2201 	movw	r2, #513	; 0x201
 800306a:	801a      	strh	r2, [r3, #0]
 800306c:	4b66      	ldr	r3, [pc, #408]	; (8003208 <setRotation+0x4ec>)
 800306e:	f240 2202 	movw	r2, #514	; 0x202
 8003072:	801a      	strh	r2, [r3, #0]
 8003074:	4b65      	ldr	r3, [pc, #404]	; (800320c <setRotation+0x4f0>)
 8003076:	f44f 7204 	mov.w	r2, #528	; 0x210
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	4b64      	ldr	r3, [pc, #400]	; (8003210 <setRotation+0x4f4>)
 800307e:	f240 2211 	movw	r2, #529	; 0x211
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	4b63      	ldr	r3, [pc, #396]	; (8003214 <setRotation+0x4f8>)
 8003086:	f240 2212 	movw	r2, #530	; 0x212
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	4b62      	ldr	r3, [pc, #392]	; (8003218 <setRotation+0x4fc>)
 800308e:	f240 2213 	movw	r2, #531	; 0x213
 8003092:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	b25b      	sxtb	r3, r3
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800309e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80030a2:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80030a4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80030a8:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 80030aa:	4b5e      	ldr	r3, [pc, #376]	; (8003224 <setRotation+0x508>)
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	f249 3226 	movw	r2, #37670	; 0x9326
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d005      	beq.n	80030c2 <setRotation+0x3a6>
 80030b6:	4b5b      	ldr	r3, [pc, #364]	; (8003224 <setRotation+0x508>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	f245 4220 	movw	r2, #21536	; 0x5420
 80030be:	4293      	cmp	r3, r2
 80030c0:	d102      	bne.n	80030c8 <setRotation+0x3ac>
 80030c2:	8abb      	ldrh	r3, [r7, #20]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 80030c8:	8a3a      	ldrh	r2, [r7, #16]
 80030ca:	8abb      	ldrh	r3, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4619      	mov	r1, r3
 80030d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030d6:	f7fd fed8 	bl	8000e8a <WriteCmdData>
           goto common_SS;
 80030da:	e024      	b.n	8003126 <setRotation+0x40a>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80030dc:	4b48      	ldr	r3, [pc, #288]	; (8003200 <setRotation+0x4e4>)
 80030de:	2220      	movs	r2, #32
 80030e0:	801a      	strh	r2, [r3, #0]
 80030e2:	4b48      	ldr	r3, [pc, #288]	; (8003204 <setRotation+0x4e8>)
 80030e4:	2221      	movs	r2, #33	; 0x21
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	4b47      	ldr	r3, [pc, #284]	; (8003208 <setRotation+0x4ec>)
 80030ea:	2222      	movs	r2, #34	; 0x22
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <setRotation+0x4f0>)
 80030f0:	2250      	movs	r2, #80	; 0x50
 80030f2:	801a      	strh	r2, [r3, #0]
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <setRotation+0x4f4>)
 80030f6:	2251      	movs	r2, #81	; 0x51
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	4b46      	ldr	r3, [pc, #280]	; (8003214 <setRotation+0x4f8>)
 80030fc:	2252      	movs	r2, #82	; 0x52
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	4b45      	ldr	r3, [pc, #276]	; (8003218 <setRotation+0x4fc>)
 8003102:	2253      	movs	r2, #83	; 0x53
 8003104:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	b25b      	sxtb	r3, r3
 800310a:	b29b      	uxth	r3, r3
 800310c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003110:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003114:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8003116:	8a3b      	ldrh	r3, [r7, #16]
 8003118:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 800311c:	b29b      	uxth	r3, r3
 800311e:	4619      	mov	r1, r3
 8003120:	2060      	movs	r0, #96	; 0x60
 8003122:	f7fd feb2 	bl	8000e8a <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	b29b      	uxth	r3, r3
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8003132:	89fb      	ldrh	r3, [r7, #14]
 8003134:	4619      	mov	r1, r3
 8003136:	2001      	movs	r0, #1
 8003138:	f7fd fea7 	bl	8000e8a <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	109b      	asrs	r3, r3, #2
 8003140:	b29b      	uxth	r3, r3
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <setRotation+0x43e>
               ORG |= 0x1000;  //BGR
 8003152:	8afb      	ldrh	r3, [r7, #22]
 8003154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003158:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 800315a:	8afb      	ldrh	r3, [r7, #22]
 800315c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <setRotation+0x504>)
 8003164:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <setRotation+0x504>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	2003      	movs	r0, #3
 800316e:	f7fd fe8c 	bl	8000e8a <WriteCmdData>
           break;
 8003172:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <setRotation+0x50c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d023      	beq.n	80031c8 <setRotation+0x4ac>
 8003180:	4b2a      	ldr	r3, [pc, #168]	; (800322c <setRotation+0x510>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11d      	bne.n	80031c8 <setRotation+0x4ac>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 800318c:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <setRotation+0x4e4>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	81bb      	strh	r3, [r7, #12]
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <setRotation+0x4e8>)
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <setRotation+0x4e4>)
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <setRotation+0x4e8>)
 800319c:	89bb      	ldrh	r3, [r7, #12]
 800319e:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <setRotation+0x4f0>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	81bb      	strh	r3, [r7, #12]
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <setRotation+0x4f8>)
 80031a8:	881a      	ldrh	r2, [r3, #0]
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <setRotation+0x4f0>)
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	4a19      	ldr	r2, [pc, #100]	; (8003214 <setRotation+0x4f8>)
 80031b0:	89bb      	ldrh	r3, [r7, #12]
 80031b2:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <setRotation+0x4f4>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	81bb      	strh	r3, [r7, #12]
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <setRotation+0x4fc>)
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <setRotation+0x4f4>)
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <setRotation+0x4fc>)
 80031c4:	89bb      	ldrh	r3, [r7, #12]
 80031c6:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 80031c8:	f7fd fd98 	bl	8000cfc <width>
 80031cc:	4603      	mov	r3, r0
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	b21c      	sxth	r4, r3
 80031d4:	f7fd fd9e 	bl	8000d14 <height>
 80031d8:	4603      	mov	r3, r0
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	b21b      	sxth	r3, r3
 80031e0:	4622      	mov	r2, r4
 80031e2:	2100      	movs	r1, #0
 80031e4:	2000      	movs	r0, #0
 80031e6:	f000 f8d9 	bl	800339c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80031ea:	2200      	movs	r2, #0
 80031ec:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80031f0:	2000      	movs	r0, #0
 80031f2:	f000 f9f7 	bl	80035e4 <vertScroll>
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000132 	.word	0x20000132
 8003204:	20000134 	.word	0x20000134
 8003208:	20000136 	.word	0x20000136
 800320c:	20000138 	.word	0x20000138
 8003210:	2000013a 	.word	0x2000013a
 8003214:	2000013c 	.word	0x2000013c
 8003218:	2000013e 	.word	0x2000013e
 800321c:	20000121 	.word	0x20000121
 8003220:	20000130 	.word	0x20000130
 8003224:	2000012c 	.word	0x2000012c
 8003228:	20000126 	.word	0x20000126
 800322c:	2000012a 	.word	0x2000012a

08003230 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
 800323a:	460b      	mov	r3, r1
 800323c:	80bb      	strh	r3, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8003242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f2c0 8098 	blt.w	800337c <drawPixel+0x14c>
 800324c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f2c0 8093 	blt.w	800337c <drawPixel+0x14c>
 8003256:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800325a:	f7fd fd4f 	bl	8000cfc <width>
 800325e:	4603      	mov	r3, r0
 8003260:	429c      	cmp	r4, r3
 8003262:	f280 808b 	bge.w	800337c <drawPixel+0x14c>
 8003266:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800326a:	f7fd fd53 	bl	8000d14 <height>
 800326e:	4603      	mov	r3, r0
 8003270:	429c      	cmp	r4, r3
 8003272:	f280 8083 	bge.w	800337c <drawPixel+0x14c>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <drawPixel+0x154>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <drawPixel+0x5a>
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd fd53 	bl	8000d2c <color565_to_555>
 8003286:	4603      	mov	r3, r0
 8003288:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 800328a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800328e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800329a:	f000 f87f 	bl	800339c <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 800329e:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <drawPixel+0x158>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d062      	beq.n	800336c <drawPixel+0x13c>
 80032a6:	2108      	movs	r1, #8
 80032a8:	4838      	ldr	r0, [pc, #224]	; (800338c <drawPixel+0x15c>)
 80032aa:	f7fd fcd9 	bl	8000c60 <PIN_LOW>
 80032ae:	2104      	movs	r1, #4
 80032b0:	4836      	ldr	r0, [pc, #216]	; (800338c <drawPixel+0x15c>)
 80032b2:	f7fd fcd5 	bl	8000c60 <PIN_LOW>
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <drawPixel+0x160>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <drawPixel+0x160>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	73bb      	strb	r3, [r7, #14]
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <drawPixel+0x15c>)
 80032c8:	4a32      	ldr	r2, [pc, #200]	; (8003394 <drawPixel+0x164>)
 80032ca:	619a      	str	r2, [r3, #24]
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <drawPixel+0x168>)
 80032ce:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80032d2:	619a      	str	r2, [r3, #24]
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	035b      	lsls	r3, r3, #13
 80032d8:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	109b      	asrs	r3, r3, #2
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	431a      	orrs	r2, r3
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <drawPixel+0x15c>)
 80032e8:	619a      	str	r2, [r3, #24]
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <drawPixel+0x168>)
 80032ee:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	2102      	movs	r1, #2
 80032f6:	4825      	ldr	r0, [pc, #148]	; (800338c <drawPixel+0x15c>)
 80032f8:	f7fd fcb2 	bl	8000c60 <PIN_LOW>
 80032fc:	2102      	movs	r1, #2
 80032fe:	4823      	ldr	r0, [pc, #140]	; (800338c <drawPixel+0x15c>)
 8003300:	f7fd fcbe 	bl	8000c80 <PIN_HIGH>
 8003304:	2102      	movs	r1, #2
 8003306:	4821      	ldr	r0, [pc, #132]	; (800338c <drawPixel+0x15c>)
 8003308:	f7fd fcba 	bl	8000c80 <PIN_HIGH>
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <drawPixel+0x15c>)
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <drawPixel+0x164>)
 8003310:	619a      	str	r2, [r3, #24]
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <drawPixel+0x168>)
 8003314:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003318:	619a      	str	r2, [r3, #24]
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	035b      	lsls	r3, r3, #13
 800331e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003322:	7bbb      	ldrb	r3, [r7, #14]
 8003324:	109b      	asrs	r3, r3, #2
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	431a      	orrs	r2, r3
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <drawPixel+0x15c>)
 800332e:	619a      	str	r2, [r3, #24]
 8003330:	7bbb      	ldrb	r3, [r7, #14]
 8003332:	4a19      	ldr	r2, [pc, #100]	; (8003398 <drawPixel+0x168>)
 8003334:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003338:	6193      	str	r3, [r2, #24]
 800333a:	2102      	movs	r1, #2
 800333c:	4813      	ldr	r0, [pc, #76]	; (800338c <drawPixel+0x15c>)
 800333e:	f7fd fc8f 	bl	8000c60 <PIN_LOW>
 8003342:	2102      	movs	r1, #2
 8003344:	4811      	ldr	r0, [pc, #68]	; (800338c <drawPixel+0x15c>)
 8003346:	f7fd fc9b 	bl	8000c80 <PIN_HIGH>
 800334a:	2102      	movs	r1, #2
 800334c:	480f      	ldr	r0, [pc, #60]	; (800338c <drawPixel+0x15c>)
 800334e:	f7fd fc97 	bl	8000c80 <PIN_HIGH>
 8003352:	2104      	movs	r1, #4
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <drawPixel+0x15c>)
 8003356:	f7fd fc93 	bl	8000c80 <PIN_HIGH>
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fe0d 	bl	8000f7c <write24>
 8003362:	2108      	movs	r1, #8
 8003364:	4809      	ldr	r0, [pc, #36]	; (800338c <drawPixel+0x15c>)
 8003366:	f7fd fc8b 	bl	8000c80 <PIN_HIGH>
 800336a:	e008      	b.n	800337e <drawPixel+0x14e>
   WriteCmdData(_MW, color);
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <drawPixel+0x160>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	887a      	ldrh	r2, [r7, #2]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd fd88 	bl	8000e8a <WriteCmdData>
 800337a:	e000      	b.n	800337e <drawPixel+0x14e>
       return;
 800337c:	bf00      	nop
}
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}
 8003384:	20000122 	.word	0x20000122
 8003388:	20000123 	.word	0x20000123
 800338c:	40020000 	.word	0x40020000
 8003390:	20000136 	.word	0x20000136
 8003394:	80200000 	.word	0x80200000
 8003398:	40020400 	.word	0x40020400

0800339c <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b087      	sub	sp, #28
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4623      	mov	r3, r4
 80033ac:	80fb      	strh	r3, [r7, #6]
 80033ae:	4603      	mov	r3, r0
 80033b0:	80bb      	strh	r3, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]
 80033b6:	4613      	mov	r3, r2
 80033b8:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80033ba:	4b80      	ldr	r3, [pc, #512]	; (80035bc <setAddrWindow+0x220>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	f249 3227 	movw	r2, #37671	; 0x9327
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d117      	bne.n	80033f6 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80033c6:	4b7e      	ldr	r3, [pc, #504]	; (80035c0 <setAddrWindow+0x224>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d107      	bne.n	80033de <setAddrWindow+0x42>
 80033ce:	88bb      	ldrh	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	80bb      	strh	r3, [r7, #4]
 80033d6:	883b      	ldrh	r3, [r7, #0]
 80033d8:	3320      	adds	r3, #32
 80033da:	b29b      	uxth	r3, r3
 80033dc:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80033de:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <setAddrWindow+0x224>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <setAddrWindow+0x5a>
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	3320      	adds	r3, #32
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	80fb      	strh	r3, [r7, #6]
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	3320      	adds	r3, #32
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80033f6:	4b71      	ldr	r3, [pc, #452]	; (80035bc <setAddrWindow+0x220>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	f241 5226 	movw	r2, #5414	; 0x1526
 80033fe:	4293      	cmp	r3, r2
 8003400:	d128      	bne.n	8003454 <setAddrWindow+0xb8>
 8003402:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <setAddrWindow+0x224>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d022      	beq.n	8003454 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	b29b      	uxth	r3, r3
 8003416:	81fb      	strh	r3, [r7, #14]
 8003418:	883a      	ldrh	r2, [r7, #0]
 800341a:	88bb      	ldrh	r3, [r7, #4]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	b29b      	uxth	r3, r3
 8003420:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003422:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <setAddrWindow+0x9c>
 800342a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800342e:	b29b      	uxth	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	803b      	strh	r3, [r7, #0]
 8003436:	e00d      	b.n	8003454 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <setAddrWindow+0xb8>
 8003440:	887a      	ldrh	r2, [r7, #2]
 8003442:	89bb      	ldrh	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	807b      	strh	r3, [r7, #2]
 800344a:	883a      	ldrh	r2, [r7, #0]
 800344c:	89bb      	ldrh	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	b29b      	uxth	r3, r3
 8003452:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003454:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <setAddrWindow+0x228>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d054      	beq.n	800350a <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003460:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <setAddrWindow+0x22c>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b2d8      	uxtb	r0, r3
 8003466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346a:	121b      	asrs	r3, r3, #8
 800346c:	b21b      	sxth	r3, r3
 800346e:	b2d9      	uxtb	r1, r3
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003478:	121b      	asrs	r3, r3, #8
 800347a:	b21b      	sxth	r3, r3
 800347c:	b2dc      	uxtb	r4, r3
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4623      	mov	r3, r4
 8003486:	f7fd ffbf 	bl	8001408 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 800348a:	4b50      	ldr	r3, [pc, #320]	; (80035cc <setAddrWindow+0x230>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b2d8      	uxtb	r0, r3
 8003490:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003494:	121b      	asrs	r3, r3, #8
 8003496:	b21b      	sxth	r3, r3
 8003498:	b2d9      	uxtb	r1, r3
 800349a:	88bb      	ldrh	r3, [r7, #4]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80034a2:	121b      	asrs	r3, r3, #8
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	b2dc      	uxtb	r4, r3
 80034a8:	883b      	ldrh	r3, [r7, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4623      	mov	r3, r4
 80034b0:	f7fd ffaa 	bl	8001408 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 80034b4:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <setAddrWindow+0x234>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d07b      	beq.n	80035b4 <setAddrWindow+0x218>
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <setAddrWindow+0x220>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	2b65      	cmp	r3, #101	; 0x65
 80034c2:	d177      	bne.n	80035b4 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 80034c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c8:	121b      	asrs	r3, r3, #8
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	723b      	strb	r3, [r7, #8]
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80034d6:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <setAddrWindow+0x238>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f107 0208 	add.w	r2, r7, #8
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fe8f 	bl	8001204 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 80034e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034ea:	121b      	asrs	r3, r3, #8
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	723b      	strb	r3, [r7, #8]
 80034f2:	88bb      	ldrh	r3, [r7, #4]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <setAddrWindow+0x23c>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	f107 0208 	add.w	r2, r7, #8
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fe7e 	bl	8001204 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8003508:	e054      	b.n	80035b4 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 800350a:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <setAddrWindow+0x238>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fcb9 	bl	8000e8a <WriteCmdData>
       WriteCmdData(_MP, y);
 8003518:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <setAddrWindow+0x23c>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	88ba      	ldrh	r2, [r7, #4]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fcb2 	bl	8000e8a <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8003526:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800352a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800352e:	429a      	cmp	r2, r3
 8003530:	d105      	bne.n	800353e <setAddrWindow+0x1a2>
 8003532:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003536:	f9b7 3000 	ldrsh.w	r3, [r7]
 800353a:	429a      	cmp	r2, r3
 800353c:	d03a      	beq.n	80035b4 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 800353e:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <setAddrWindow+0x228>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <setAddrWindow+0x1e0>
               if (rotation & 1)
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <setAddrWindow+0x224>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8003556:	f9b7 3000 	ldrsh.w	r3, [r7]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	b21a      	sxth	r2, r3
 800355e:	88bb      	ldrh	r3, [r7, #4]
 8003560:	4313      	orrs	r3, r2
 8003562:	80bb      	strh	r3, [r7, #4]
 8003564:	88bb      	ldrh	r3, [r7, #4]
 8003566:	803b      	strh	r3, [r7, #0]
 8003568:	e008      	b.n	800357c <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 800356a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	b21a      	sxth	r2, r3
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	4313      	orrs	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <setAddrWindow+0x22c>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd fc80 	bl	8000e8a <WriteCmdData>
           WriteCmdData(_SP, y);
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <setAddrWindow+0x230>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	88ba      	ldrh	r2, [r7, #4]
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fc79 	bl	8000e8a <WriteCmdData>
           WriteCmdData(_EC, x1);
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <setAddrWindow+0x240>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	887a      	ldrh	r2, [r7, #2]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fc72 	bl	8000e8a <WriteCmdData>
           WriteCmdData(_EP, y1);
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <setAddrWindow+0x244>)
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	883a      	ldrh	r2, [r7, #0]
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fc6b 	bl	8000e8a <WriteCmdData>
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd90      	pop	{r4, r7, pc}
 80035bc:	2000012c 	.word	0x2000012c
 80035c0:	20000126 	.word	0x20000126
 80035c4:	2000012a 	.word	0x2000012a
 80035c8:	20000138 	.word	0x20000138
 80035cc:	2000013c 	.word	0x2000013c
 80035d0:	20000121 	.word	0x20000121
 80035d4:	20000132 	.word	0x20000132
 80035d8:	20000134 	.word	0x20000134
 80035dc:	2000013a 	.word	0x2000013a
 80035e0:	2000013e 	.word	0x2000013e

080035e4 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
 80035ee:	460b      	mov	r3, r1
 80035f0:	80bb      	strh	r3, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80035f6:	4b89      	ldr	r3, [pc, #548]	; (800381c <vertScroll+0x238>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f249 3227 	movw	r2, #37671	; 0x9327
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10b      	bne.n	800361a <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003602:	4b87      	ldr	r3, [pc, #540]	; (8003820 <vertScroll+0x23c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <vertScroll+0x2e>
 800360a:	4b85      	ldr	r3, [pc, #532]	; (8003820 <vertScroll+0x23c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d103      	bne.n	800361a <vertScroll+0x36>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	3320      	adds	r3, #32
 8003616:	b29b      	uxth	r3, r3
 8003618:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	88bb      	ldrh	r3, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8003626:	b29b      	uxth	r3, r3
 8003628:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 800362e:	4b7b      	ldr	r3, [pc, #492]	; (800381c <vertScroll+0x238>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	f249 3227 	movw	r2, #37671	; 0x9327
 8003636:	4293      	cmp	r3, r2
 8003638:	d103      	bne.n	8003642 <vertScroll+0x5e>
 800363a:	8afb      	ldrh	r3, [r7, #22]
 800363c:	3320      	adds	r3, #32
 800363e:	b29b      	uxth	r3, r3
 8003640:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003642:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003646:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800364a:	425b      	negs	r3, r3
 800364c:	429a      	cmp	r2, r3
 800364e:	dd05      	ble.n	800365c <vertScroll+0x78>
 8003650:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003654:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	db01      	blt.n	8003660 <vertScroll+0x7c>
 800365c:	2300      	movs	r3, #0
 800365e:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	4413      	add	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 800366a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da04      	bge.n	800367c <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8003672:	8aba      	ldrh	r2, [r7, #20]
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	b29b      	uxth	r3, r3
 800367a:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29b      	uxth	r3, r3
 8003688:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 800368a:	4b66      	ldr	r3, [pc, #408]	; (8003824 <vertScroll+0x240>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d071      	beq.n	800377a <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8003696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800369a:	121b      	asrs	r3, r3, #8
 800369c:	b21b      	sxth	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 80036a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036ac:	121b      	asrs	r3, r3, #8
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 80036b4:	88bb      	ldrh	r3, [r7, #4]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80036ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036be:	121b      	asrs	r3, r3, #8
 80036c0:	b21b      	sxth	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80036c6:	8afb      	ldrh	r3, [r7, #22]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80036cc:	4b56      	ldr	r3, [pc, #344]	; (8003828 <vertScroll+0x244>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <vertScroll+0xf4>
 80036d4:	230e      	movs	r3, #14
 80036d6:	e000      	b.n	80036da <vertScroll+0xf6>
 80036d8:	2333      	movs	r3, #51	; 0x33
 80036da:	f107 020c 	add.w	r2, r7, #12
 80036de:	2106      	movs	r1, #6
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd fd8f 	bl	8001204 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 80036e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036ea:	121b      	asrs	r3, r3, #8
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 80036f2:	8abb      	ldrh	r3, [r7, #20]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 80036f8:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <vertScroll+0x244>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <vertScroll+0x120>
 8003700:	2314      	movs	r3, #20
 8003702:	e000      	b.n	8003706 <vertScroll+0x122>
 8003704:	2337      	movs	r3, #55	; 0x37
 8003706:	f107 020c 	add.w	r2, r7, #12
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fd79 	bl	8001204 <WriteCmdParamN>
		if (is8347) {
 8003712:	4b45      	ldr	r3, [pc, #276]	; (8003828 <vertScroll+0x244>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01f      	beq.n	800375a <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 800371a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <vertScroll+0x152>
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <vertScroll+0x238>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	f248 3247 	movw	r2, #33607	; 0x8347
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <vertScroll+0x14e>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <vertScroll+0x154>
 8003732:	2308      	movs	r3, #8
 8003734:	e000      	b.n	8003738 <vertScroll+0x154>
 8003736:	2300      	movs	r3, #0
 8003738:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <vertScroll+0x238>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	f248 3247 	movw	r2, #33607	; 0x8347
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <vertScroll+0x166>
 8003746:	2318      	movs	r3, #24
 8003748:	e000      	b.n	800374c <vertScroll+0x168>
 800374a:	2301      	movs	r3, #1
 800374c:	f107 020c 	add.w	r2, r7, #12
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fd56 	bl	8001204 <WriteCmdParamN>
 8003758:	e05d      	b.n	8003816 <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 800375a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d159      	bne.n	8003816 <vertScroll+0x232>
 8003762:	4b30      	ldr	r3, [pc, #192]	; (8003824 <vertScroll+0x240>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d053      	beq.n	8003816 <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 800376e:	2200      	movs	r2, #0
 8003770:	2100      	movs	r1, #0
 8003772:	2013      	movs	r0, #19
 8003774:	f7fd fd46 	bl	8001204 <WriteCmdParamN>
 8003778:	e04d      	b.n	8003816 <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <vertScroll+0x238>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003782:	4293      	cmp	r3, r2
 8003784:	d027      	beq.n	80037d6 <vertScroll+0x1f2>
 8003786:	f24b 5209 	movw	r2, #46345	; 0xb509
 800378a:	4293      	cmp	r3, r2
 800378c:	dc34      	bgt.n	80037f8 <vertScroll+0x214>
 800378e:	f249 3226 	movw	r2, #37670	; 0x9326
 8003792:	4293      	cmp	r3, r2
 8003794:	d01f      	beq.n	80037d6 <vertScroll+0x1f2>
 8003796:	f249 3226 	movw	r2, #37670	; 0x9326
 800379a:	4293      	cmp	r3, r2
 800379c:	dc2c      	bgt.n	80037f8 <vertScroll+0x214>
 800379e:	f247 7293 	movw	r2, #30611	; 0x7793
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d017      	beq.n	80037d6 <vertScroll+0x1f2>
 80037a6:	f247 7293 	movw	r2, #30611	; 0x7793
 80037aa:	4293      	cmp	r3, r2
 80037ac:	dc24      	bgt.n	80037f8 <vertScroll+0x214>
 80037ae:	f245 4220 	movw	r2, #21536	; 0x5420
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <vertScroll+0x1f2>
 80037b6:	f247 7283 	movw	r2, #30595	; 0x7783
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d11c      	bne.n	80037f8 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <vertScroll+0x248>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	4619      	mov	r1, r3
 80037c4:	2061      	movs	r0, #97	; 0x61
 80037c6:	f7fd fb60 	bl	8000e8a <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80037ca:	8abb      	ldrh	r3, [r7, #20]
 80037cc:	4619      	mov	r1, r3
 80037ce:	206a      	movs	r0, #106	; 0x6a
 80037d0:	f7fd fb5b 	bl	8000e8a <WriteCmdData>
        break;
 80037d4:	e01f      	b.n	8003816 <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <vertScroll+0x248>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	b29b      	uxth	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	f240 4001 	movw	r0, #1025	; 0x401
 80037e6:	f7fd fb50 	bl	8000e8a <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 80037ea:	8abb      	ldrh	r3, [r7, #20]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f240 4004 	movw	r0, #1028	; 0x404
 80037f2:	f7fd fb4a 	bl	8000e8a <WriteCmdData>
        break;
 80037f6:	e00e      	b.n	8003816 <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <vertScroll+0x248>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	b29b      	uxth	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	2061      	movs	r0, #97	; 0x61
 8003806:	f7fd fb40 	bl	8000e8a <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 800380a:	8abb      	ldrh	r3, [r7, #20]
 800380c:	4619      	mov	r1, r3
 800380e:	206a      	movs	r0, #106	; 0x6a
 8003810:	f7fd fb3b 	bl	8000e8a <WriteCmdData>
        break;
 8003814:	bf00      	nop
    }
}
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	2000012c 	.word	0x2000012c
 8003820:	20000126 	.word	0x20000126
 8003824:	2000012a 	.word	0x2000012a
 8003828:	20000121 	.word	0x20000121
 800382c:	2000012e 	.word	0x2000012e

08003830 <fillScreen>:
{
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

void fillScreen(uint16_t color)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af02      	add	r7, sp, #8
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <fillScreen+0x2c>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b21a      	sxth	r2, r3
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <fillScreen+0x30>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b219      	sxth	r1, r3
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	460b      	mov	r3, r1
 800384c:	2100      	movs	r1, #0
 800384e:	2000      	movs	r0, #0
 8003850:	f000 fa04 	bl	8003c5c <fillRect>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000004 	.word	0x20000004
 8003860:	20000006 	.word	0x20000006

08003864 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 800386e:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <invertDisplay+0x13c>)
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	b21a      	sxth	r2, r3
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	b21b      	sxth	r3, r3
 8003886:	4053      	eors	r3, r2
 8003888:	b21b      	sxth	r3, r3
 800388a:	b29a      	uxth	r2, r3
 800388c:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <invertDisplay+0x140>)
 800388e:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003890:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <invertDisplay+0x13c>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d035      	beq.n	8003908 <invertDisplay+0xa4>
        if (is8347) {
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <invertDisplay+0x144>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d024      	beq.n	80038ee <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <invertDisplay+0x148>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	f248 3247 	movw	r2, #33607	; 0x8347
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d005      	beq.n	80038bc <invertDisplay+0x58>
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <invertDisplay+0x148>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	f245 2252 	movw	r2, #21074	; 0x5252
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <invertDisplay+0x140>)
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <invertDisplay+0x64>
 80038c4:	2306      	movs	r3, #6
 80038c6:	e000      	b.n	80038ca <invertDisplay+0x66>
 80038c8:	2302      	movs	r3, #2
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	e007      	b.n	80038de <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80038ce:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <invertDisplay+0x140>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <invertDisplay+0x76>
 80038d6:	2308      	movs	r3, #8
 80038d8:	e000      	b.n	80038dc <invertDisplay+0x78>
 80038da:	230a      	movs	r3, #10
 80038dc:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 80038de:	f107 030f 	add.w	r3, r7, #15
 80038e2:	461a      	mov	r2, r3
 80038e4:	2101      	movs	r1, #1
 80038e6:	2001      	movs	r0, #1
 80038e8:	f7fd fc8c 	bl	8001204 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80038ec:	e055      	b.n	800399a <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <invertDisplay+0x140>)
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <invertDisplay+0x96>
 80038f6:	2321      	movs	r3, #33	; 0x21
 80038f8:	e000      	b.n	80038fc <invertDisplay+0x98>
 80038fa:	2320      	movs	r3, #32
 80038fc:	2200      	movs	r2, #0
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fc7f 	bl	8001204 <WriteCmdParamN>
 8003906:	e048      	b.n	800399a <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <invertDisplay+0x148>)
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003910:	4293      	cmp	r3, r2
 8003912:	d030      	beq.n	8003976 <invertDisplay+0x112>
 8003914:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003918:	4293      	cmp	r3, r2
 800391a:	dc37      	bgt.n	800398c <invertDisplay+0x128>
 800391c:	f249 3226 	movw	r2, #37670	; 0x9326
 8003920:	4293      	cmp	r3, r2
 8003922:	d028      	beq.n	8003976 <invertDisplay+0x112>
 8003924:	f249 3226 	movw	r2, #37670	; 0x9326
 8003928:	4293      	cmp	r3, r2
 800392a:	dc2f      	bgt.n	800398c <invertDisplay+0x128>
 800392c:	f249 2225 	movw	r2, #37413	; 0x9225
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <invertDisplay+0xf8>
 8003934:	f249 2225 	movw	r2, #37413	; 0x9225
 8003938:	4293      	cmp	r3, r2
 800393a:	dc27      	bgt.n	800398c <invertDisplay+0x128>
 800393c:	f247 7293 	movw	r2, #30611	; 0x7793
 8003940:	4293      	cmp	r3, r2
 8003942:	d018      	beq.n	8003976 <invertDisplay+0x112>
 8003944:	f247 7293 	movw	r2, #30611	; 0x7793
 8003948:	4293      	cmp	r3, r2
 800394a:	dc1f      	bgt.n	800398c <invertDisplay+0x128>
 800394c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003950:	d004      	beq.n	800395c <invertDisplay+0xf8>
 8003952:	f245 4220 	movw	r2, #21536	; 0x5420
 8003956:	4293      	cmp	r3, r2
 8003958:	d00d      	beq.n	8003976 <invertDisplay+0x112>
 800395a:	e017      	b.n	800398c <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <invertDisplay+0x140>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	b21b      	sxth	r3, r3
 8003964:	f043 0313 	orr.w	r3, r3, #19
 8003968:	b21b      	sxth	r3, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	2007      	movs	r0, #7
 8003970:	f7fd fa8b 	bl	8000e8a <WriteCmdData>
        break;
 8003974:	e011      	b.n	800399a <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <invertDisplay+0x140>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	f043 0302 	orr.w	r3, r3, #2
 800397e:	b29b      	uxth	r3, r3
 8003980:	4619      	mov	r1, r3
 8003982:	f240 4001 	movw	r0, #1025	; 0x401
 8003986:	f7fd fa80 	bl	8000e8a <WriteCmdData>
        break;
 800398a:	e006      	b.n	800399a <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <invertDisplay+0x140>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	4619      	mov	r1, r3
 8003992:	2061      	movs	r0, #97	; 0x61
 8003994:	f7fd fa79 	bl	8000e8a <WriteCmdData>
        break;
 8003998:	bf00      	nop
    }
}
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	2000012a 	.word	0x2000012a
 80039a4:	2000012e 	.word	0x2000012e
 80039a8:	20000121 	.word	0x20000121
 80039ac:	2000012c 	.word	0x2000012c

080039b0 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	4604      	mov	r4, r0
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	80fb      	strh	r3, [r7, #6]
 80039c2:	4603      	mov	r3, r0
 80039c4:	80bb      	strh	r3, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	807b      	strh	r3, [r7, #2]
 80039ca:	4613      	mov	r3, r2
 80039cc:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 80039ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80039d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80039d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039da:	883b      	ldrh	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	2201      	movs	r2, #1
 80039e2:	f000 f93b 	bl	8003c5c <fillRect>
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}

080039ee <drawFastHLine>:

void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	4604      	mov	r4, r0
 80039f6:	4608      	mov	r0, r1
 80039f8:	4611      	mov	r1, r2
 80039fa:	461a      	mov	r2, r3
 80039fc:	4623      	mov	r3, r4
 80039fe:	80fb      	strh	r3, [r7, #6]
 8003a00:	4603      	mov	r3, r0
 8003a02:	80bb      	strh	r3, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8003a0c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003a10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a18:	883b      	ldrh	r3, [r7, #0]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f000 f91d 	bl	8003c5c <fillRect>
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}

08003a2a <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4603      	mov	r3, r0
 8003a32:	80fb      	strh	r3, [r7, #6]
 8003a34:	460b      	mov	r3, r1
 8003a36:	80bb      	strh	r3, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8003a3c:	887a      	ldrh	r2, [r7, #2]
 8003a3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fbf2 	bl	8003230 <drawPixel>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	80fb      	strh	r3, [r7, #6]
 8003a66:	4603      	mov	r3, r0
 8003a68:	80bb      	strh	r3, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	807b      	strh	r3, [r7, #2]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003a72:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003a76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003a80:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003a84:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a8c:	1acb      	subs	r3, r1, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bfb8      	it	lt
 8003a92:	425b      	neglt	r3, r3
 8003a94:	429a      	cmp	r2, r3
 8003a96:	bfcc      	ite	gt
 8003a98:	2301      	movgt	r3, #1
 8003a9a:	2300      	movle	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8003aa0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	833b      	strh	r3, [r7, #24]
 8003aac:	88bb      	ldrh	r3, [r7, #4]
 8003aae:	80fb      	strh	r3, [r7, #6]
 8003ab0:	8b3b      	ldrh	r3, [r7, #24]
 8003ab2:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	82fb      	strh	r3, [r7, #22]
 8003ab8:	883b      	ldrh	r3, [r7, #0]
 8003aba:	807b      	strh	r3, [r7, #2]
 8003abc:	8afb      	ldrh	r3, [r7, #22]
 8003abe:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8003ac0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	dd0b      	ble.n	8003ae4 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	82bb      	strh	r3, [r7, #20]
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	80fb      	strh	r3, [r7, #6]
 8003ad4:	8abb      	ldrh	r3, [r7, #20]
 8003ad6:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8003ad8:	88bb      	ldrh	r3, [r7, #4]
 8003ada:	827b      	strh	r3, [r7, #18]
 8003adc:	883b      	ldrh	r3, [r7, #0]
 8003ade:	80bb      	strh	r3, [r7, #4]
 8003ae0:	8a7b      	ldrh	r3, [r7, #18]
 8003ae2:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003ae4:	887a      	ldrh	r2, [r7, #2]
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8003aee:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003af2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bfb8      	it	lt
 8003afc:	425b      	neglt	r3, r3
 8003afe:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8003b00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b04:	0fda      	lsrs	r2, r3, #31
 8003b06:	4413      	add	r3, r2
 8003b08:	105b      	asrs	r3, r3, #1
 8003b0a:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8003b0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	da02      	bge.n	8003b1e <writeLine+0xca>
        ystep = 1;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	83bb      	strh	r3, [r7, #28]
 8003b1c:	e031      	b.n	8003b82 <writeLine+0x12e>
    } else {
        ystep = -1;
 8003b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b22:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8003b24:	e02d      	b.n	8003b82 <writeLine+0x12e>
        if (steep) {
 8003b26:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <writeLine+0xec>
            writePixel(y0, x0, color);
 8003b2e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003b30:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003b34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff76 	bl	8003a2a <writePixel>
 8003b3e:	e007      	b.n	8003b50 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8003b40:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003b42:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff6d 	bl	8003a2a <writePixel>
        }
        err -= dy;
 8003b50:	8bfa      	ldrh	r2, [r7, #30]
 8003b52:	89fb      	ldrh	r3, [r7, #14]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8003b5a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da09      	bge.n	8003b76 <writeLine+0x122>
            y0 += ystep;
 8003b62:	88ba      	ldrh	r2, [r7, #4]
 8003b64:	8bbb      	ldrh	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8003b6c:	8bfa      	ldrh	r2, [r7, #30]
 8003b6e:	8a3b      	ldrh	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8003b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	80fb      	strh	r3, [r7, #6]
 8003b82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	ddcb      	ble.n	8003b26 <writeLine+0xd2>
        }
    }
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	3724      	adds	r7, #36	; 0x24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}

08003b98 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	80fb      	strh	r3, [r7, #6]
 8003baa:	4603      	mov	r3, r0
 8003bac:	80bb      	strh	r3, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	807b      	strh	r3, [r7, #2]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8003bb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d11a      	bne.n	8003bf8 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003bc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003bc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	dd05      	ble.n	8003bda <drawLine+0x42>
 8003bce:	88bb      	ldrh	r3, [r7, #4]
 8003bd0:	81bb      	strh	r3, [r7, #12]
 8003bd2:	883b      	ldrh	r3, [r7, #0]
 8003bd4:	80bb      	strh	r3, [r7, #4]
 8003bd6:	89bb      	ldrh	r3, [r7, #12]
 8003bd8:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003bda:	883a      	ldrh	r2, [r7, #0]
 8003bdc:	88bb      	ldrh	r3, [r7, #4]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b21a      	sxth	r2, r3
 8003be8:	8c3b      	ldrh	r3, [r7, #32]
 8003bea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003bee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003bf2:	f7ff fedd 	bl	80039b0 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003bf6:	e02d      	b.n	8003c54 <drawLine+0xbc>
    } else if(y0 == y1){
 8003bf8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003bfc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d11a      	bne.n	8003c3a <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003c04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	dd05      	ble.n	8003c1c <drawLine+0x84>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	81fb      	strh	r3, [r7, #14]
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	80fb      	strh	r3, [r7, #6]
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003c1c:	887a      	ldrh	r2, [r7, #2]
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	8c3b      	ldrh	r3, [r7, #32]
 8003c2c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003c30:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003c34:	f7ff fedb 	bl	80039ee <drawFastHLine>
}
 8003c38:	e00c      	b.n	8003c54 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 8003c3a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003c3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c42:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003c46:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003c4a:	8c3b      	ldrh	r3, [r7, #32]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	4623      	mov	r3, r4
 8003c50:	f7ff ff00 	bl	8003a54 <writeLine>
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}

08003c5c <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	80fb      	strh	r3, [r7, #6]
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80bb      	strh	r3, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
 8003c76:	4613      	mov	r3, r2
 8003c78:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8003c7a:	4b6e      	ldr	r3, [pc, #440]	; (8003e34 <fillRect+0x1d8>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <fillRect+0x32>
 8003c82:	8c3b      	ldrh	r3, [r7, #32]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd f851 	bl	8000d2c <color565_to_555>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8003c8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da08      	bge.n	8003ca8 <fillRect+0x4c>
        w = -w;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	425b      	negs	r3, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	807b      	strh	r3, [r7, #2]
        x -= w;
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	887b      	ldrh	r3, [r7, #2]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8003ca8:	88fa      	ldrh	r2, [r7, #6]
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	4413      	add	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8003cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da01      	bge.n	8003cbe <fillRect+0x62>
        x = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8003cbe:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003cc2:	f7fd f81b 	bl	8000cfc <width>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	dd03      	ble.n	8003cd4 <fillRect+0x78>
        end = width();
 8003ccc:	f7fd f816 	bl	8000cfc <width>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8003cd4:	89fa      	ldrh	r2, [r7, #14]
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8003cde:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da08      	bge.n	8003cf8 <fillRect+0x9c>
        h = -h;
 8003ce6:	883b      	ldrh	r3, [r7, #0]
 8003ce8:	425b      	negs	r3, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	803b      	strh	r3, [r7, #0]
        y -= h;
 8003cee:	88ba      	ldrh	r2, [r7, #4]
 8003cf0:	883b      	ldrh	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8003cf8:	88ba      	ldrh	r2, [r7, #4]
 8003cfa:	883b      	ldrh	r3, [r7, #0]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8003d02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da01      	bge.n	8003d0e <fillRect+0xb2>
        y = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8003d0e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003d12:	f7fc ffff 	bl	8000d14 <height>
 8003d16:	4603      	mov	r3, r0
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	dd03      	ble.n	8003d24 <fillRect+0xc8>
        end = height();
 8003d1c:	f7fc fffa 	bl	8000d14 <height>
 8003d20:	4603      	mov	r3, r0
 8003d22:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8003d24:	89fa      	ldrh	r2, [r7, #14]
 8003d26:	88bb      	ldrh	r3, [r7, #4]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	4413      	add	r3, r2
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b21c      	sxth	r4, r3
 8003d3c:	88ba      	ldrh	r2, [r7, #4]
 8003d3e:	883b      	ldrh	r3, [r7, #0]
 8003d40:	4413      	add	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003d4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003d52:	4622      	mov	r2, r4
 8003d54:	f7ff fb22 	bl	800339c <setAddrWindow>
    CS_ACTIVE;
 8003d58:	2108      	movs	r1, #8
 8003d5a:	4837      	ldr	r0, [pc, #220]	; (8003e38 <fillRect+0x1dc>)
 8003d5c:	f7fc ff80 	bl	8000c60 <PIN_LOW>
    WriteCmd(_MW);
 8003d60:	2104      	movs	r1, #4
 8003d62:	4835      	ldr	r0, [pc, #212]	; (8003e38 <fillRect+0x1dc>)
 8003d64:	f7fc ff7c 	bl	8000c60 <PIN_LOW>
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <fillRect+0x1e0>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	737b      	strb	r3, [r7, #13]
 8003d72:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <fillRect+0x1e0>)
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	733b      	strb	r3, [r7, #12]
 8003d78:	4b2f      	ldr	r3, [pc, #188]	; (8003e38 <fillRect+0x1dc>)
 8003d7a:	4a31      	ldr	r2, [pc, #196]	; (8003e40 <fillRect+0x1e4>)
 8003d7c:	619a      	str	r2, [r3, #24]
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <fillRect+0x1e8>)
 8003d80:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003d84:	619a      	str	r2, [r3, #24]
 8003d86:	7b7b      	ldrb	r3, [r7, #13]
 8003d88:	035b      	lsls	r3, r3, #13
 8003d8a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003d8e:	7b7b      	ldrb	r3, [r7, #13]
 8003d90:	109b      	asrs	r3, r3, #2
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	431a      	orrs	r2, r3
 8003d98:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <fillRect+0x1dc>)
 8003d9a:	619a      	str	r2, [r3, #24]
 8003d9c:	7b7b      	ldrb	r3, [r7, #13]
 8003d9e:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <fillRect+0x1e8>)
 8003da0:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003da4:	6193      	str	r3, [r2, #24]
 8003da6:	2102      	movs	r1, #2
 8003da8:	4823      	ldr	r0, [pc, #140]	; (8003e38 <fillRect+0x1dc>)
 8003daa:	f7fc ff59 	bl	8000c60 <PIN_LOW>
 8003dae:	2102      	movs	r1, #2
 8003db0:	4821      	ldr	r0, [pc, #132]	; (8003e38 <fillRect+0x1dc>)
 8003db2:	f7fc ff65 	bl	8000c80 <PIN_HIGH>
 8003db6:	2102      	movs	r1, #2
 8003db8:	481f      	ldr	r0, [pc, #124]	; (8003e38 <fillRect+0x1dc>)
 8003dba:	f7fc ff61 	bl	8000c80 <PIN_HIGH>
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <fillRect+0x1dc>)
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <fillRect+0x1e4>)
 8003dc2:	619a      	str	r2, [r3, #24]
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <fillRect+0x1e8>)
 8003dc6:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003dca:	619a      	str	r2, [r3, #24]
 8003dcc:	7b3b      	ldrb	r3, [r7, #12]
 8003dce:	035b      	lsls	r3, r3, #13
 8003dd0:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003dd4:	7b3b      	ldrb	r3, [r7, #12]
 8003dd6:	109b      	asrs	r3, r3, #2
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <fillRect+0x1dc>)
 8003de0:	619a      	str	r2, [r3, #24]
 8003de2:	7b3b      	ldrb	r3, [r7, #12]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <fillRect+0x1e8>)
 8003de6:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003dea:	6193      	str	r3, [r2, #24]
 8003dec:	2102      	movs	r1, #2
 8003dee:	4812      	ldr	r0, [pc, #72]	; (8003e38 <fillRect+0x1dc>)
 8003df0:	f7fc ff36 	bl	8000c60 <PIN_LOW>
 8003df4:	2102      	movs	r1, #2
 8003df6:	4810      	ldr	r0, [pc, #64]	; (8003e38 <fillRect+0x1dc>)
 8003df8:	f7fc ff42 	bl	8000c80 <PIN_HIGH>
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	480e      	ldr	r0, [pc, #56]	; (8003e38 <fillRect+0x1dc>)
 8003e00:	f7fc ff3e 	bl	8000c80 <PIN_HIGH>
 8003e04:	2104      	movs	r1, #4
 8003e06:	480c      	ldr	r0, [pc, #48]	; (8003e38 <fillRect+0x1dc>)
 8003e08:	f7fc ff3a 	bl	8000c80 <PIN_HIGH>
    if (h > w) {
 8003e0c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	dd05      	ble.n	8003e24 <fillRect+0x1c8>
        end = h;
 8003e18:	883b      	ldrh	r3, [r7, #0]
 8003e1a:	81fb      	strh	r3, [r7, #14]
        h = w;
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	803b      	strh	r3, [r7, #0]
        w = end;
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003e24:	8c3b      	ldrh	r3, [r7, #32]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	72fb      	strb	r3, [r7, #11]
 8003e2c:	8c3b      	ldrh	r3, [r7, #32]
 8003e2e:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8003e30:	e05a      	b.n	8003ee8 <fillRect+0x28c>
 8003e32:	bf00      	nop
 8003e34:	20000122 	.word	0x20000122
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	20000136 	.word	0x20000136
 8003e40:	80200000 	.word	0x80200000
 8003e44:	40020400 	.word	0x40020400
        end = w;
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8003e4c:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <fillRect+0x2f4>)
 8003e4e:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <fillRect+0x2f8>)
 8003e50:	619a      	str	r2, [r3, #24]
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <fillRect+0x2fc>)
 8003e54:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003e58:	619a      	str	r2, [r3, #24]
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	035b      	lsls	r3, r3, #13
 8003e5e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003e62:	7afb      	ldrb	r3, [r7, #11]
 8003e64:	109b      	asrs	r3, r3, #2
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <fillRect+0x2f4>)
 8003e6e:	619a      	str	r2, [r3, #24]
 8003e70:	7afb      	ldrb	r3, [r7, #11]
 8003e72:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <fillRect+0x2fc>)
 8003e74:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003e78:	6193      	str	r3, [r2, #24]
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	4834      	ldr	r0, [pc, #208]	; (8003f50 <fillRect+0x2f4>)
 8003e7e:	f7fc feef 	bl	8000c60 <PIN_LOW>
 8003e82:	2102      	movs	r1, #2
 8003e84:	4832      	ldr	r0, [pc, #200]	; (8003f50 <fillRect+0x2f4>)
 8003e86:	f7fc fefb 	bl	8000c80 <PIN_HIGH>
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4830      	ldr	r0, [pc, #192]	; (8003f50 <fillRect+0x2f4>)
 8003e8e:	f7fc fef7 	bl	8000c80 <PIN_HIGH>
            write8(lo);
 8003e92:	4b2f      	ldr	r3, [pc, #188]	; (8003f50 <fillRect+0x2f4>)
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <fillRect+0x2f8>)
 8003e96:	619a      	str	r2, [r3, #24]
 8003e98:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <fillRect+0x2fc>)
 8003e9a:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003e9e:	619a      	str	r2, [r3, #24]
 8003ea0:	7abb      	ldrb	r3, [r7, #10]
 8003ea2:	035b      	lsls	r3, r3, #13
 8003ea4:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003ea8:	7abb      	ldrb	r3, [r7, #10]
 8003eaa:	109b      	asrs	r3, r3, #2
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <fillRect+0x2f4>)
 8003eb4:	619a      	str	r2, [r3, #24]
 8003eb6:	7abb      	ldrb	r3, [r7, #10]
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <fillRect+0x2fc>)
 8003eba:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003ebe:	6193      	str	r3, [r2, #24]
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4823      	ldr	r0, [pc, #140]	; (8003f50 <fillRect+0x2f4>)
 8003ec4:	f7fc fecc 	bl	8000c60 <PIN_LOW>
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4821      	ldr	r0, [pc, #132]	; (8003f50 <fillRect+0x2f4>)
 8003ecc:	f7fc fed8 	bl	8000c80 <PIN_HIGH>
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	481f      	ldr	r0, [pc, #124]	; (8003f50 <fillRect+0x2f4>)
 8003ed4:	f7fc fed4 	bl	8000c80 <PIN_HIGH>
        } while (--end != 0);
 8003ed8:	89fb      	ldrh	r3, [r7, #14]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	81fb      	strh	r3, [r7, #14]
 8003ee0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1b1      	bne.n	8003e4c <fillRect+0x1f0>
    while (h-- > 0) {
 8003ee8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	3a01      	subs	r2, #1
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	803a      	strh	r2, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	dca7      	bgt.n	8003e48 <fillRect+0x1ec>
#endif
    }
    CS_IDLE;
 8003ef8:	2108      	movs	r1, #8
 8003efa:	4815      	ldr	r0, [pc, #84]	; (8003f50 <fillRect+0x2f4>)
 8003efc:	f7fc fec0 	bl	8000c80 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <fillRect+0x300>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <fillRect+0x2c8>
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <fillRect+0x304>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	f241 5226 	movw	r2, #5414	; 0x1526
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d116      	bne.n	8003f46 <fillRect+0x2ea>
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <fillRect+0x308>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <fillRect+0x2ea>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003f24:	f7fc feea 	bl	8000cfc <width>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	b21c      	sxth	r4, r3
 8003f30:	f7fc fef0 	bl	8000d14 <height>
 8003f34:	4603      	mov	r3, r0
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	b21b      	sxth	r3, r3
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7ff fa2b 	bl	800339c <setAddrWindow>
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd90      	pop	{r4, r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40020000 	.word	0x40020000
 8003f54:	80200000 	.word	0x80200000
 8003f58:	40020400 	.word	0x40020400
 8003f5c:	2000012a 	.word	0x2000012a
 8003f60:	2000012c 	.word	0x2000012c
 8003f64:	20000126 	.word	0x20000126

08003f68 <drawChar>:
    }

}

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b08b      	sub	sp, #44	; 0x2c
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	461a      	mov	r2, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	80fb      	strh	r3, [r7, #6]
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80bb      	strh	r3, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	70fb      	strb	r3, [r7, #3]
 8003f82:	4613      	mov	r3, r2
 8003f84:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8003f86:	4b59      	ldr	r3, [pc, #356]	; (80040ec <drawChar+0x184>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b52      	ldr	r3, [pc, #328]	; (80040ec <drawChar+0x184>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	4413      	add	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8003fac:	4b4f      	ldr	r3, [pc, #316]	; (80040ec <drawChar+0x184>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3307      	adds	r3, #7
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	833b      	strh	r3, [r7, #24]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8003fea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d905      	bls.n	8003ffe <drawChar+0x96>
            xo16 = xo;
 8003ff2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003ff6:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 8003ff8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8003ffc:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 8003ffe:	2300      	movs	r3, #0
 8004000:	773b      	strb	r3, [r7, #28]
 8004002:	e06a      	b.n	80040da <drawChar+0x172>
            for(xx=0; xx<w; xx++) {
 8004004:	2300      	movs	r3, #0
 8004006:	777b      	strb	r3, [r7, #29]
 8004008:	e060      	b.n	80040cc <drawChar+0x164>
                if(!(bit++ & 7)) {
 800400a:	7ebb      	ldrb	r3, [r7, #26]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	76ba      	strb	r2, [r7, #26]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <drawChar+0xc0>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8004018:	8bfb      	ldrh	r3, [r7, #30]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	83fa      	strh	r2, [r7, #30]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 8004028:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800402c:	2b00      	cmp	r3, #0
 800402e:	da47      	bge.n	80040c0 <drawChar+0x158>
                    if(size == 1) {
 8004030:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004034:	2b01      	cmp	r3, #1
 8004036:	d11a      	bne.n	800406e <drawChar+0x106>
                        writePixel(x+xo+xx, y+yo+yy, color);
 8004038:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800403c:	b29a      	uxth	r2, r3
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	4413      	add	r3, r2
 8004042:	b29a      	uxth	r2, r3
 8004044:	7f7b      	ldrb	r3, [r7, #29]
 8004046:	b29b      	uxth	r3, r3
 8004048:	4413      	add	r3, r2
 800404a:	b29b      	uxth	r3, r3
 800404c:	b218      	sxth	r0, r3
 800404e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004052:	b29a      	uxth	r2, r3
 8004054:	88bb      	ldrh	r3, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	b29a      	uxth	r2, r3
 800405a:	7f3b      	ldrb	r3, [r7, #28]
 800405c:	b29b      	uxth	r3, r3
 800405e:	4413      	add	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	b21b      	sxth	r3, r3
 8004064:	883a      	ldrh	r2, [r7, #0]
 8004066:	4619      	mov	r1, r3
 8004068:	f7ff fcdf 	bl	8003a2a <writePixel>
 800406c:	e028      	b.n	80040c0 <drawChar+0x158>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 800406e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004072:	7f7b      	ldrb	r3, [r7, #29]
 8004074:	4413      	add	r3, r2
 8004076:	b29a      	uxth	r2, r3
 8004078:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800407c:	b29b      	uxth	r3, r3
 800407e:	fb12 f303 	smulbb	r3, r2, r3
 8004082:	b29a      	uxth	r2, r3
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	4413      	add	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	b218      	sxth	r0, r3
 800408c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004090:	7f3b      	ldrb	r3, [r7, #28]
 8004092:	4413      	add	r3, r2
 8004094:	b29a      	uxth	r2, r3
 8004096:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800409a:	b29b      	uxth	r3, r3
 800409c:	fb12 f303 	smulbb	r3, r2, r3
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	88bb      	ldrh	r3, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	b219      	sxth	r1, r3
 80040aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040ae:	b21a      	sxth	r2, r3
 80040b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040b4:	b21c      	sxth	r4, r3
 80040b6:	883b      	ldrh	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4623      	mov	r3, r4
 80040bc:	f7ff fdce 	bl	8003c5c <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 80040c0:	7efb      	ldrb	r3, [r7, #27]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 80040c6:	7f7b      	ldrb	r3, [r7, #29]
 80040c8:	3301      	adds	r3, #1
 80040ca:	777b      	strb	r3, [r7, #29]
 80040cc:	7f7a      	ldrb	r2, [r7, #29]
 80040ce:	7afb      	ldrb	r3, [r7, #11]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d39a      	bcc.n	800400a <drawChar+0xa2>
        for(yy=0; yy<h; yy++) {
 80040d4:	7f3b      	ldrb	r3, [r7, #28]
 80040d6:	3301      	adds	r3, #1
 80040d8:	773b      	strb	r3, [r7, #28]
 80040da:	7f3a      	ldrb	r2, [r7, #28]
 80040dc:	7abb      	ldrb	r3, [r7, #10]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d390      	bcc.n	8004004 <drawChar+0x9c>
            }
        }

    } // End classic vs custom font
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	3724      	adds	r7, #36	; 0x24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	20000034 	.word	0x20000034

080040f0 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 80040f0:	b5b0      	push	{r4, r5, r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	2b0a      	cmp	r3, #10
 80040fe:	d112      	bne.n	8004126 <write+0x36>
            cursor_x  = 0;
 8004100:	4b4a      	ldr	r3, [pc, #296]	; (800422c <write+0x13c>)
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004106:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <write+0x140>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330a      	adds	r3, #10
 800410c:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 800410e:	4b49      	ldr	r3, [pc, #292]	; (8004234 <write+0x144>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	fb12 f303 	smulbb	r3, r2, r3
 8004116:	b2da      	uxtb	r2, r3
 8004118:	4b47      	ldr	r3, [pc, #284]	; (8004238 <write+0x148>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	4413      	add	r3, r2
 800411e:	b2da      	uxtb	r2, r3
 8004120:	4b45      	ldr	r3, [pc, #276]	; (8004238 <write+0x148>)
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e07c      	b.n	8004220 <write+0x130>
        } else if(c != '\r') {
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b0d      	cmp	r3, #13
 800412a:	d079      	beq.n	8004220 <write+0x130>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 800412c:	4b40      	ldr	r3, [pc, #256]	; (8004230 <write+0x140>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8004136:	79fa      	ldrb	r2, [r7, #7]
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	429a      	cmp	r2, r3
 800413c:	d370      	bcc.n	8004220 <write+0x130>
 800413e:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <write+0x140>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3309      	adds	r3, #9
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	79fa      	ldrb	r2, [r7, #7]
 8004148:	429a      	cmp	r2, r3
 800414a:	d869      	bhi.n	8004220 <write+0x130>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 800414c:	79fa      	ldrb	r2, [r7, #7]
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	461a      	mov	r2, r3
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	461a      	mov	r2, r3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <write+0x140>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3304      	adds	r3, #4
 8004164:	881b      	ldrh	r3, [r3, #0]
                  &gfxFont->glyph))[c - first]);
 8004166:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004168:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3302      	adds	r3, #2
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3304      	adds	r3, #4
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d041      	beq.n	8004204 <write+0x114>
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d03e      	beq.n	8004204 <write+0x114>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3307      	adds	r3, #7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b25b      	sxtb	r3, r3
 800418e:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <write+0x14c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d022      	beq.n	80041de <write+0xee>
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <write+0x13c>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4619      	mov	r1, r3
 800419e:	4b25      	ldr	r3, [pc, #148]	; (8004234 <write+0x144>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	4413      	add	r3, r2
 80041ac:	fb00 f303 	mul.w	r3, r0, r3
 80041b0:	440b      	add	r3, r1
 80041b2:	4a23      	ldr	r2, [pc, #140]	; (8004240 <write+0x150>)
 80041b4:	8812      	ldrh	r2, [r2, #0]
 80041b6:	4293      	cmp	r3, r2
 80041b8:	dd11      	ble.n	80041de <write+0xee>
                        cursor_x  = 0;
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <write+0x13c>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <write+0x140>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330a      	adds	r3, #10
 80041c6:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <write+0x144>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	fb12 f303 	smulbb	r3, r2, r3
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <write+0x148>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	4413      	add	r3, r2
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	4b17      	ldr	r3, [pc, #92]	; (8004238 <write+0x148>)
 80041dc:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <write+0x13c>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b218      	sxth	r0, r3
 80041e4:	4b14      	ldr	r3, [pc, #80]	; (8004238 <write+0x148>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b219      	sxth	r1, r3
 80041ea:	4b16      	ldr	r3, [pc, #88]	; (8004244 <write+0x154>)
 80041ec:	881d      	ldrh	r5, [r3, #0]
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <write+0x158>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	4a10      	ldr	r2, [pc, #64]	; (8004234 <write+0x144>)
 80041f4:	7812      	ldrb	r2, [r2, #0]
 80041f6:	79fc      	ldrb	r4, [r7, #7]
 80041f8:	9201      	str	r2, [sp, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	462b      	mov	r3, r5
 80041fe:	4622      	mov	r2, r4
 8004200:	f7ff feb2 	bl	8003f68 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3306      	adds	r3, #6
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <write+0x144>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	fb12 f303 	smulbb	r3, r2, r3
 8004212:	b2da      	uxtb	r2, r3
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <write+0x13c>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	4413      	add	r3, r2
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <write+0x13c>)
 800421e:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 8004220:	2301      	movs	r3, #1
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bdb0      	pop	{r4, r5, r7, pc}
 800422a:	bf00      	nop
 800422c:	20000125 	.word	0x20000125
 8004230:	20000034 	.word	0x20000034
 8004234:	20000008 	.word	0x20000008
 8004238:	20000124 	.word	0x20000124
 800423c:	2000000e 	.word	0x2000000e
 8004240:	20000004 	.word	0x20000004
 8004244:	2000000a 	.word	0x2000000a
 8004248:	2000000c 	.word	0x2000000c

0800424c <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 800425a:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <setFont+0x4c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d110      	bne.n	8004284 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <setFont+0x50>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	3306      	adds	r3, #6
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <setFont+0x50>)
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e009      	b.n	8004284 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <setFont+0x4c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <setFont+0x50>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	3b06      	subs	r3, #6
 800427e:	b2da      	uxtb	r2, r3
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <setFont+0x50>)
 8004282:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8004284:	4a04      	ldr	r2, [pc, #16]	; (8004298 <setFont+0x4c>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6013      	str	r3, [r2, #0]
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000034 	.word	0x20000034
 800429c:	20000124 	.word	0x20000124

080042a0 <printnewtstr>:

    setCursor(x1, y1);
    printstr(str);
}
void printnewtstr (int row, int col, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	80fb      	strh	r3, [r7, #6]
	setFont(f);
 80042b0:	6838      	ldr	r0, [r7, #0]
 80042b2:	f7ff ffcb 	bl	800424c <setFont>
	textcolor = txtcolor;
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <printnewtstr+0x64>)
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 80042bc:	7e3b      	ldrb	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <printnewtstr+0x26>
 80042c2:	7e3b      	ldrb	r3, [r7, #24]
 80042c4:	e000      	b.n	80042c8 <printnewtstr+0x28>
 80042c6:	2301      	movs	r3, #1
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <printnewtstr+0x68>)
 80042ca:	7013      	strb	r3, [r2, #0]
	setCursor(row, col);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	b212      	sxth	r2, r2
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f828 	bl	800432c <setCursor>
	setTextWrap(1);
 80042dc:	2001      	movs	r0, #1
 80042de:	f000 f815 	bl	800430c <setTextWrap>
	while (*str) write (*str++);
 80042e2:	e006      	b.n	80042f2 <printnewtstr+0x52>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	61fa      	str	r2, [r7, #28]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff feff 	bl	80040f0 <write>
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f4      	bne.n	80042e4 <printnewtstr+0x44>
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	2000000a 	.word	0x2000000a
 8004308:	20000008 	.word	0x20000008

0800430c <setTextWrap>:
void printstr (uint8_t *str)
{
	while (*str) write (*str++);
}

void setTextWrap(uint8_t w) { wrap = w; }
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
 8004316:	4a04      	ldr	r2, [pc, #16]	; (8004328 <setTextWrap+0x1c>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	7013      	strb	r3, [r2, #0]
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	2000000e 	.word	0x2000000e

0800432c <setCursor>:
void setTextSize (uint8_t size)
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	460a      	mov	r2, r1
 8004336:	80fb      	strh	r3, [r7, #6]
 8004338:	4613      	mov	r3, r2
 800433a:	80bb      	strh	r3, [r7, #4]
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <setCursor+0x2c>)
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	88bb      	ldrh	r3, [r7, #4]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <setCursor+0x30>)
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000125 	.word	0x20000125
 800435c:	20000124 	.word	0x20000124

08004360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004364:	480d      	ldr	r0, [pc, #52]	; (800439c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004366:	490e      	ldr	r1, [pc, #56]	; (80043a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800436a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800436c:	e002      	b.n	8004374 <LoopCopyDataInit>

0800436e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800436e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004372:	3304      	adds	r3, #4

08004374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004378:	d3f9      	bcc.n	800436e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800437c:	4c0b      	ldr	r4, [pc, #44]	; (80043ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004380:	e001      	b.n	8004386 <LoopFillZerobss>

08004382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004384:	3204      	adds	r2, #4

08004386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004388:	d3fb      	bcc.n	8004382 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800438a:	f7fc fc3f 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800438e:	f002 f977 	bl	8006680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004392:	f7fc f89f 	bl	80004d4 <main>
  bx  lr    
 8004396:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800439c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80043a4:	080076e8 	.word	0x080076e8
  ldr r2, =_sbss
 80043a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80043ac:	20000144 	.word	0x20000144

080043b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b0:	e7fe      	b.n	80043b0 <ADC_IRQHandler>
	...

080043b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_Init+0x40>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <HAL_Init+0x40>)
 80043be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_Init+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <HAL_Init+0x40>)
 80043ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_Init+0x40>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <HAL_Init+0x40>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043dc:	2003      	movs	r0, #3
 80043de:	f000 fd23 	bl	8004e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043e2:	200f      	movs	r0, #15
 80043e4:	f000 f808 	bl	80043f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043e8:	f7fc faee 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023c00 	.word	0x40023c00

080043f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_InitTick+0x54>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_InitTick+0x58>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	4619      	mov	r1, r3
 800440a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800440e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fd2d 	bl	8004e76 <HAL_SYSTICK_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e00e      	b.n	8004444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b0f      	cmp	r3, #15
 800442a:	d80a      	bhi.n	8004442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800442c:	2200      	movs	r2, #0
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	f000 fd03 	bl	8004e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004438:	4a06      	ldr	r2, [pc, #24]	; (8004454 <HAL_InitTick+0x5c>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000000 	.word	0x20000000
 8004450:	20000014 	.word	0x20000014
 8004454:	20000010 	.word	0x20000010

08004458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_IncTick+0x20>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_IncTick+0x24>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4413      	add	r3, r2
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <HAL_IncTick+0x24>)
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000014 	.word	0x20000014
 800447c:	20000140 	.word	0x20000140

08004480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return uwTick;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_GetTick+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000140 	.word	0x20000140

08004498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044a0:	f7ff ffee 	bl	8004480 <HAL_GetTick>
 80044a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d005      	beq.n	80044be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_Delay+0x44>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044be:	bf00      	nop
 80044c0:	f7ff ffde 	bl	8004480 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d8f7      	bhi.n	80044c0 <HAL_Delay+0x28>
  {
  }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000014 	.word	0x20000014

080044e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e033      	b.n	800455e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fa8a 	bl	8000a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004526:	f023 0302 	bic.w	r3, r3, #2
 800452a:	f043 0202 	orr.w	r2, r3, #2
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 faca 	bl	8004acc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
 800454e:	e001      	b.n	8004554 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_ADC_Start+0x1a>
 800457e:	2302      	movs	r3, #2
 8004580:	e097      	b.n	80046b2 <HAL_ADC_Start+0x14a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d018      	beq.n	80045ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045a8:	4b45      	ldr	r3, [pc, #276]	; (80046c0 <HAL_ADC_Start+0x158>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a45      	ldr	r2, [pc, #276]	; (80046c4 <HAL_ADC_Start+0x15c>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0c9a      	lsrs	r2, r3, #18
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80045bc:	e002      	b.n	80045c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f9      	bne.n	80045be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d15f      	bne.n	8004698 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004602:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004616:	d106      	bne.n	8004626 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f023 0206 	bic.w	r2, r3, #6
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	645a      	str	r2, [r3, #68]	; 0x44
 8004624:	e002      	b.n	800462c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_ADC_Start+0x160>)
 8004636:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004640:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10f      	bne.n	800466e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d129      	bne.n	80046b0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	e020      	b.n	80046b0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a16      	ldr	r2, [pc, #88]	; (80046cc <HAL_ADC_Start+0x164>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d11b      	bne.n	80046b0 <HAL_ADC_Start+0x148>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d114      	bne.n	80046b0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	e00b      	b.n	80046b0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0210 	orr.w	r2, r3, #16
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a8:	f043 0201 	orr.w	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000000 	.word	0x20000000
 80046c4:	431bde83 	.word	0x431bde83
 80046c8:	40012300 	.word	0x40012300
 80046cc:	40012000 	.word	0x40012000

080046d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_Stop+0x16>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e021      	b.n	800472a <HAL_ADC_Stop+0x5a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d113      	bne.n	800477c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800475e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004762:	d10b      	bne.n	800477c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e063      	b.n	8004844 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800477c:	f7ff fe80 	bl	8004480 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004782:	e021      	b.n	80047c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d01d      	beq.n	80047c8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <HAL_ADC_PollForConversion+0x6c>
 8004792:	f7ff fe75 	bl	8004480 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d212      	bcs.n	80047c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d00b      	beq.n	80047c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f043 0204 	orr.w	r2, r3, #4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e03d      	b.n	8004844 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d1d6      	bne.n	8004784 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f06f 0212 	mvn.w	r2, #18
 80047de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d123      	bne.n	8004842 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11f      	bne.n	8004842 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800481a:	2b00      	cmp	r3, #0
 800481c:	d111      	bne.n	8004842 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0201 	orr.w	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x1c>
 8004880:	2302      	movs	r3, #2
 8004882:	e113      	b.n	8004aac <HAL_ADC_ConfigChannel+0x244>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b09      	cmp	r3, #9
 8004892:	d925      	bls.n	80048e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68d9      	ldr	r1, [r3, #12]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	4613      	mov	r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	3b1e      	subs	r3, #30
 80048aa:	2207      	movs	r2, #7
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43da      	mvns	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	400a      	ands	r2, r1
 80048b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68d9      	ldr	r1, [r3, #12]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4618      	mov	r0, r3
 80048cc:	4603      	mov	r3, r0
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4403      	add	r3, r0
 80048d2:	3b1e      	subs	r3, #30
 80048d4:	409a      	lsls	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	e022      	b.n	8004926 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	2207      	movs	r2, #7
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	400a      	ands	r2, r1
 8004902:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6919      	ldr	r1, [r3, #16]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	4618      	mov	r0, r3
 8004916:	4603      	mov	r3, r0
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4403      	add	r3, r0
 800491c:	409a      	lsls	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b06      	cmp	r3, #6
 800492c:	d824      	bhi.n	8004978 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	3b05      	subs	r3, #5
 8004940:	221f      	movs	r2, #31
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43da      	mvns	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	400a      	ands	r2, r1
 800494e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	4618      	mov	r0, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	3b05      	subs	r3, #5
 800496a:	fa00 f203 	lsl.w	r2, r0, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	635a      	str	r2, [r3, #52]	; 0x34
 8004976:	e04c      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b0c      	cmp	r3, #12
 800497e:	d824      	bhi.n	80049ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	3b23      	subs	r3, #35	; 0x23
 8004992:	221f      	movs	r2, #31
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43da      	mvns	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	400a      	ands	r2, r1
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	4618      	mov	r0, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	3b23      	subs	r3, #35	; 0x23
 80049bc:	fa00 f203 	lsl.w	r2, r0, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
 80049c8:	e023      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	3b41      	subs	r3, #65	; 0x41
 80049dc:	221f      	movs	r2, #31
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43da      	mvns	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	400a      	ands	r2, r1
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	4618      	mov	r0, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	3b41      	subs	r3, #65	; 0x41
 8004a06:	fa00 f203 	lsl.w	r2, r0, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a12:	4b29      	ldr	r3, [pc, #164]	; (8004ab8 <HAL_ADC_ConfigChannel+0x250>)
 8004a14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a28      	ldr	r2, [pc, #160]	; (8004abc <HAL_ADC_ConfigChannel+0x254>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10f      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x1d8>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b12      	cmp	r3, #18
 8004a26:	d10b      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <HAL_ADC_ConfigChannel+0x254>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d12b      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x23a>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ac0 <HAL_ADC_ConfigChannel+0x258>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <HAL_ADC_ConfigChannel+0x1f4>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b11      	cmp	r3, #17
 8004a5a:	d122      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <HAL_ADC_ConfigChannel+0x258>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d111      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <HAL_ADC_ConfigChannel+0x25c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <HAL_ADC_ConfigChannel+0x260>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	0c9a      	lsrs	r2, r3, #18
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a94:	e002      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f9      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40012300 	.word	0x40012300
 8004abc:	40012000 	.word	0x40012000
 8004ac0:	10000012 	.word	0x10000012
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	431bde83 	.word	0x431bde83

08004acc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ad4:	4b79      	ldr	r3, [pc, #484]	; (8004cbc <ADC_Init+0x1f0>)
 8004ad6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	021a      	lsls	r2, r3, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6859      	ldr	r1, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6899      	ldr	r1, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <ADC_Init+0x1f4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d022      	beq.n	8004baa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6899      	ldr	r1, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	e00f      	b.n	8004bca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0202 	bic.w	r2, r2, #2
 8004bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6899      	ldr	r1, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	7e1b      	ldrb	r3, [r3, #24]
 8004be4:	005a      	lsls	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	3b01      	subs	r3, #1
 8004c24:	035a      	lsls	r2, r3, #13
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	e007      	b.n	8004c40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	051a      	lsls	r2, r3, #20
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c82:	025a      	lsls	r2, r3, #9
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	029a      	lsls	r2, r3, #10
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40012300 	.word	0x40012300
 8004cc0:	0f000001 	.word	0x0f000001

08004cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cf6:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	60d3      	str	r3, [r2, #12]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <__NVIC_GetPriorityGrouping+0x18>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	f003 0307 	and.w	r3, r3, #7
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db0a      	blt.n	8004d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	490c      	ldr	r1, [pc, #48]	; (8004d74 <__NVIC_SetPriority+0x4c>)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	0112      	lsls	r2, r2, #4
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d50:	e00a      	b.n	8004d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4908      	ldr	r1, [pc, #32]	; (8004d78 <__NVIC_SetPriority+0x50>)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	0112      	lsls	r2, r2, #4
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	440b      	add	r3, r1
 8004d66:	761a      	strb	r2, [r3, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000e100 	.word	0xe000e100
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f1c3 0307 	rsb	r3, r3, #7
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf28      	it	cs
 8004d9a:	2304      	movcs	r3, #4
 8004d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3304      	adds	r3, #4
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d902      	bls.n	8004dac <NVIC_EncodePriority+0x30>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3b03      	subs	r3, #3
 8004daa:	e000      	b.n	8004dae <NVIC_EncodePriority+0x32>
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	43d9      	mvns	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd4:	4313      	orrs	r3, r2
         );
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3724      	adds	r7, #36	; 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df4:	d301      	bcc.n	8004dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004df6:	2301      	movs	r3, #1
 8004df8:	e00f      	b.n	8004e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <SysTick_Config+0x40>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e02:	210f      	movs	r1, #15
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	f7ff ff8e 	bl	8004d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <SysTick_Config+0x40>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e12:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <SysTick_Config+0x40>)
 8004e14:	2207      	movs	r2, #7
 8004e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	e000e010 	.word	0xe000e010

08004e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff47 	bl	8004cc4 <__NVIC_SetPriorityGrouping>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e50:	f7ff ff5c 	bl	8004d0c <__NVIC_GetPriorityGrouping>
 8004e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	6978      	ldr	r0, [r7, #20]
 8004e5c:	f7ff ff8e 	bl	8004d7c <NVIC_EncodePriority>
 8004e60:	4602      	mov	r2, r0
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ff5d 	bl	8004d28 <__NVIC_SetPriority>
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ffb0 	bl	8004de4 <SysTick_Config>
 8004e84:	4603      	mov	r3, r0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e00e      	b.n	8004ebe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	795b      	ldrb	r3, [r3, #5]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fb fdf5 	bl	8000aa0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	; 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e159      	b.n	8005198 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	f040 8148 	bne.w	8005192 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d005      	beq.n	8004f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d130      	bne.n	8004f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f50:	2201      	movs	r2, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 0201 	and.w	r2, r3, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d017      	beq.n	8004fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	2203      	movs	r2, #3
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d123      	bne.n	800500c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	08da      	lsrs	r2, r3, #3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3208      	adds	r2, #8
 8004fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	220f      	movs	r2, #15
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	08da      	lsrs	r2, r3, #3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3208      	adds	r2, #8
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	2203      	movs	r2, #3
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0203 	and.w	r2, r3, #3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80a2 	beq.w	8005192 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b57      	ldr	r3, [pc, #348]	; (80051b0 <HAL_GPIO_Init+0x2e8>)
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	4a56      	ldr	r2, [pc, #344]	; (80051b0 <HAL_GPIO_Init+0x2e8>)
 8005058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800505c:	6453      	str	r3, [r2, #68]	; 0x44
 800505e:	4b54      	ldr	r3, [pc, #336]	; (80051b0 <HAL_GPIO_Init+0x2e8>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800506a:	4a52      	ldr	r2, [pc, #328]	; (80051b4 <HAL_GPIO_Init+0x2ec>)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3302      	adds	r3, #2
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	220f      	movs	r2, #15
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a49      	ldr	r2, [pc, #292]	; (80051b8 <HAL_GPIO_Init+0x2f0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d019      	beq.n	80050ca <HAL_GPIO_Init+0x202>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a48      	ldr	r2, [pc, #288]	; (80051bc <HAL_GPIO_Init+0x2f4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_GPIO_Init+0x1fe>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a47      	ldr	r2, [pc, #284]	; (80051c0 <HAL_GPIO_Init+0x2f8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00d      	beq.n	80050c2 <HAL_GPIO_Init+0x1fa>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a46      	ldr	r2, [pc, #280]	; (80051c4 <HAL_GPIO_Init+0x2fc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <HAL_GPIO_Init+0x1f6>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a45      	ldr	r2, [pc, #276]	; (80051c8 <HAL_GPIO_Init+0x300>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_GPIO_Init+0x1f2>
 80050b6:	2304      	movs	r3, #4
 80050b8:	e008      	b.n	80050cc <HAL_GPIO_Init+0x204>
 80050ba:	2307      	movs	r3, #7
 80050bc:	e006      	b.n	80050cc <HAL_GPIO_Init+0x204>
 80050be:	2303      	movs	r3, #3
 80050c0:	e004      	b.n	80050cc <HAL_GPIO_Init+0x204>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e002      	b.n	80050cc <HAL_GPIO_Init+0x204>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <HAL_GPIO_Init+0x204>
 80050ca:	2300      	movs	r3, #0
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	f002 0203 	and.w	r2, r2, #3
 80050d2:	0092      	lsls	r2, r2, #2
 80050d4:	4093      	lsls	r3, r2
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050dc:	4935      	ldr	r1, [pc, #212]	; (80051b4 <HAL_GPIO_Init+0x2ec>)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	089b      	lsrs	r3, r3, #2
 80050e2:	3302      	adds	r3, #2
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050ea:	4b38      	ldr	r3, [pc, #224]	; (80051cc <HAL_GPIO_Init+0x304>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800510e:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <HAL_GPIO_Init+0x304>)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005114:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <HAL_GPIO_Init+0x304>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	43db      	mvns	r3, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4013      	ands	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005138:	4a24      	ldr	r2, [pc, #144]	; (80051cc <HAL_GPIO_Init+0x304>)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800513e:	4b23      	ldr	r3, [pc, #140]	; (80051cc <HAL_GPIO_Init+0x304>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005162:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <HAL_GPIO_Init+0x304>)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <HAL_GPIO_Init+0x304>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800518c:	4a0f      	ldr	r2, [pc, #60]	; (80051cc <HAL_GPIO_Init+0x304>)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3301      	adds	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b0f      	cmp	r3, #15
 800519c:	f67f aea2 	bls.w	8004ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	3724      	adds	r7, #36	; 0x24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40013800 	.word	0x40013800
 80051b8:	40020000 	.word	0x40020000
 80051bc:	40020400 	.word	0x40020400
 80051c0:	40020800 	.word	0x40020800
 80051c4:	40020c00 	.word	0x40020c00
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40013c00 	.word	0x40013c00

080051d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
 80051dc:	4613      	mov	r3, r2
 80051de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051e0:	787b      	ldrb	r3, [r7, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051ec:	e003      	b.n	80051f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	041a      	lsls	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	619a      	str	r2, [r3, #24]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e267      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d075      	beq.n	800530e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005222:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b04      	cmp	r3, #4
 800522c:	d00c      	beq.n	8005248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522e:	4b85      	ldr	r3, [pc, #532]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005236:	2b08      	cmp	r3, #8
 8005238:	d112      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4b82      	ldr	r3, [pc, #520]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	4b7e      	ldr	r3, [pc, #504]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05b      	beq.n	800530c <HAL_RCC_OscConfig+0x108>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d157      	bne.n	800530c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e242      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d106      	bne.n	8005278 <HAL_RCC_OscConfig+0x74>
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a75      	ldr	r2, [pc, #468]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e01d      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x98>
 8005282:	4b70      	ldr	r3, [pc, #448]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6f      	ldr	r2, [pc, #444]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a6c      	ldr	r2, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 800529c:	4b69      	ldr	r3, [pc, #420]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a68      	ldr	r2, [pc, #416]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b66      	ldr	r3, [pc, #408]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a65      	ldr	r2, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7ff f8e0 	bl	8004480 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c4:	f7ff f8dc 	bl	8004480 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e207      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0xc0>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7ff f8cc 	bl	8004480 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7ff f8c8 	bl	8004480 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e1f3      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	4b51      	ldr	r3, [pc, #324]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0xe8>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d063      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800531a:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532e:	2b08      	cmp	r3, #8
 8005330:	d11c      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b44      	ldr	r3, [pc, #272]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	4b41      	ldr	r3, [pc, #260]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e1c7      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4937      	ldr	r1, [pc, #220]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	e03a      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_RCC_OscConfig+0x244>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7ff f881 	bl	8004480 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005382:	f7ff f87d 	bl	8004480 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e1a8      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b28      	ldr	r3, [pc, #160]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4925      	ldr	r1, [pc, #148]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
 80053b4:	e015      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b6:	4b24      	ldr	r3, [pc, #144]	; (8005448 <HAL_RCC_OscConfig+0x244>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7ff f860 	bl	8004480 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c4:	f7ff f85c 	bl	8004480 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e187      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d036      	beq.n	800545c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_RCC_OscConfig+0x248>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7ff f840 	bl	8004480 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005404:	f7ff f83c 	bl	8004480 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e167      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x200>
 8005422:	e01b      	b.n	800545c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <HAL_RCC_OscConfig+0x248>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542a:	f7ff f829 	bl	8004480 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005430:	e00e      	b.n	8005450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005432:	f7ff f825 	bl	8004480 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d907      	bls.n	8005450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e150      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005444:	40023800 	.word	0x40023800
 8005448:	42470000 	.word	0x42470000
 800544c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005450:	4b88      	ldr	r3, [pc, #544]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ea      	bne.n	8005432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8097 	beq.w	8005598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546e:	4b81      	ldr	r3, [pc, #516]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	4b7d      	ldr	r3, [pc, #500]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a7c      	ldr	r2, [pc, #496]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b7a      	ldr	r3, [pc, #488]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549a:	4b77      	ldr	r3, [pc, #476]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d118      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a6:	4b74      	ldr	r3, [pc, #464]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a73      	ldr	r2, [pc, #460]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b2:	f7fe ffe5 	bl	8004480 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fe ffe1 	bl	8004480 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e10c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d106      	bne.n	80054ee <HAL_RCC_OscConfig+0x2ea>
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a63      	ldr	r2, [pc, #396]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
 80054ec:	e01c      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0x30c>
 80054f6:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a5e      	ldr	r2, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	4b5c      	ldr	r3, [pc, #368]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a5b      	ldr	r2, [pc, #364]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
 800550e:	e00b      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 8005510:	4b58      	ldr	r3, [pc, #352]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	4a57      	ldr	r2, [pc, #348]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6713      	str	r3, [r2, #112]	; 0x70
 800551c:	4b55      	ldr	r3, [pc, #340]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	4a54      	ldr	r2, [pc, #336]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005522:	f023 0304 	bic.w	r3, r3, #4
 8005526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fe ffa6 	bl	8004480 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fe ffa2 	bl	8004480 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0cb      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	4b49      	ldr	r3, [pc, #292]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ee      	beq.n	8005538 <HAL_RCC_OscConfig+0x334>
 800555a:	e014      	b.n	8005586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555c:	f7fe ff90 	bl	8004480 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005562:	e00a      	b.n	800557a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fe ff8c 	bl	8004480 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e0b5      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ee      	bne.n	8005564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558c:	4b39      	ldr	r3, [pc, #228]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	4a38      	ldr	r2, [pc, #224]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a1 	beq.w	80056e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a2:	4b34      	ldr	r3, [pc, #208]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d05c      	beq.n	8005668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d141      	bne.n	800563a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_RCC_OscConfig+0x478>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fe ff60 	bl	8004480 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fe ff5c 	bl	8004480 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e087      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	4b27      	ldr	r3, [pc, #156]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	019b      	lsls	r3, r3, #6
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	3b01      	subs	r3, #1
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	491b      	ldr	r1, [pc, #108]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x478>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005612:	f7fe ff35 	bl	8004480 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561a:	f7fe ff31 	bl	8004480 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e05c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x416>
 8005638:	e054      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_RCC_OscConfig+0x478>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fe ff1e 	bl	8004480 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005648:	f7fe ff1a 	bl	8004480 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e045      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x444>
 8005666:	e03d      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e038      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005674:	40023800 	.word	0x40023800
 8005678:	40007000 	.word	0x40007000
 800567c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x4ec>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d028      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d121      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d11a      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d111      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d107      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056dc:	429a      	cmp	r2, r3
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40023800 	.word	0x40023800

080056f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0cc      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005708:	4b68      	ldr	r3, [pc, #416]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d90c      	bls.n	8005730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b65      	ldr	r3, [pc, #404]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b63      	ldr	r3, [pc, #396]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0b8      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d020      	beq.n	800577e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005748:	4b59      	ldr	r3, [pc, #356]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a58      	ldr	r2, [pc, #352]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005760:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800576a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800576c:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	494d      	ldr	r1, [pc, #308]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d044      	beq.n	8005814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b47      	ldr	r3, [pc, #284]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d119      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d107      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e06f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e067      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d2:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 0203 	bic.w	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4934      	ldr	r1, [pc, #208]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e4:	f7fe fe4c 	bl	8004480 <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fe fe48 	bl	8004480 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 020c 	and.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	429a      	cmp	r2, r3
 8005812:	d1eb      	bne.n	80057ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005814:	4b25      	ldr	r3, [pc, #148]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d20c      	bcs.n	800583c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b20      	ldr	r3, [pc, #128]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e032      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4916      	ldr	r1, [pc, #88]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	490e      	ldr	r1, [pc, #56]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800587a:	f000 f821 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 800587e:	4602      	mov	r2, r0
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	490a      	ldr	r1, [pc, #40]	; (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	5ccb      	ldrb	r3, [r1, r3]
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_RCC_ClockConfig+0x1c8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fdac 	bl	80043f8 <HAL_InitTick>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023c00 	.word	0x40023c00
 80058b0:	40023800 	.word	0x40023800
 80058b4:	08007180 	.word	0x08007180
 80058b8:	20000000 	.word	0x20000000
 80058bc:	20000010 	.word	0x20000010

080058c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b090      	sub	sp, #64	; 0x40
 80058c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d0:	2300      	movs	r3, #0
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d00d      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x40>
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	f200 80a1 	bhi.w	8005a2c <HAL_RCC_GetSysClockFreq+0x16c>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0x34>
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_GetSysClockFreq+0x3a>
 80058f2:	e09b      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x184>)
 80058f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80058f8:	e09b      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058fa:	4b53      	ldr	r3, [pc, #332]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x188>)
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058fe:	e098      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005900:	4b4f      	ldr	r3, [pc, #316]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800590a:	4b4d      	ldr	r3, [pc, #308]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d028      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	099b      	lsrs	r3, r3, #6
 800591c:	2200      	movs	r2, #0
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	627a      	str	r2, [r7, #36]	; 0x24
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005928:	2100      	movs	r1, #0
 800592a:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x188>)
 800592c:	fb03 f201 	mul.w	r2, r3, r1
 8005930:	2300      	movs	r3, #0
 8005932:	fb00 f303 	mul.w	r3, r0, r3
 8005936:	4413      	add	r3, r2
 8005938:	4a43      	ldr	r2, [pc, #268]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x188>)
 800593a:	fba0 1202 	umull	r1, r2, r0, r2
 800593e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005940:	460a      	mov	r2, r1
 8005942:	62ba      	str	r2, [r7, #40]	; 0x28
 8005944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005946:	4413      	add	r3, r2
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	2200      	movs	r2, #0
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	61fa      	str	r2, [r7, #28]
 8005952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800595a:	f7fa fc3d 	bl	80001d8 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4613      	mov	r3, r2
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005966:	e053      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005968:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	099b      	lsrs	r3, r3, #6
 800596e:	2200      	movs	r2, #0
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	617a      	str	r2, [r7, #20]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800597a:	f04f 0b00 	mov.w	fp, #0
 800597e:	4652      	mov	r2, sl
 8005980:	465b      	mov	r3, fp
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	0159      	lsls	r1, r3, #5
 800598c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005990:	0150      	lsls	r0, r2, #5
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	ebb2 080a 	subs.w	r8, r2, sl
 800599a:	eb63 090b 	sbc.w	r9, r3, fp
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059b2:	ebb2 0408 	subs.w	r4, r2, r8
 80059b6:	eb63 0509 	sbc.w	r5, r3, r9
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	00eb      	lsls	r3, r5, #3
 80059c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c8:	00e2      	lsls	r2, r4, #3
 80059ca:	4614      	mov	r4, r2
 80059cc:	461d      	mov	r5, r3
 80059ce:	eb14 030a 	adds.w	r3, r4, sl
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	eb45 030b 	adc.w	r3, r5, fp
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e6:	4629      	mov	r1, r5
 80059e8:	028b      	lsls	r3, r1, #10
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059f0:	4621      	mov	r1, r4
 80059f2:	028a      	lsls	r2, r1, #10
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	2200      	movs	r2, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	60fa      	str	r2, [r7, #12]
 8005a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a04:	f7fa fbe8 	bl	80001d8 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a2a:	e002      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3740      	adds	r7, #64	; 0x40
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	00f42400 	.word	0x00f42400
 8005a48:	017d7840 	.word	0x017d7840

08005a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000000 	.word	0x20000000

08005a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a68:	f7ff fff0 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	0a9b      	lsrs	r3, r3, #10
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4903      	ldr	r1, [pc, #12]	; (8005a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40023800 	.word	0x40023800
 8005a88:	08007190 	.word	0x08007190

08005a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a90:	f7ff ffdc 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	0b5b      	lsrs	r3, r3, #13
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4903      	ldr	r1, [pc, #12]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	08007190 	.word	0x08007190

08005ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e041      	b.n	8005b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fb f802 	bl	8000ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f000 f950 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d001      	beq.n	8005b6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e03c      	b.n	8005be6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <HAL_TIM_Base_Start+0xa0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_TIM_Base_Start+0x5c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d013      	beq.n	8005bb0 <HAL_TIM_Base_Start+0x5c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <HAL_TIM_Base_Start+0xa4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_TIM_Base_Start+0x5c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <HAL_TIM_Base_Start+0xa8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_TIM_Base_Start+0x5c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <HAL_TIM_Base_Start+0xac>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIM_Base_Start+0x5c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <HAL_TIM_Base_Start+0xb0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d111      	bne.n	8005bd4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d010      	beq.n	8005be4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	e007      	b.n	8005be4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40014000 	.word	0x40014000

08005c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_ConfigClockSource+0x1c>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0b4      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0x186>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5c:	d03e      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0xd4>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	f200 8087 	bhi.w	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	f000 8086 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x172>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	d87f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d01a      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0xa6>
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	d87b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b60      	cmp	r3, #96	; 0x60
 8005c7e:	d050      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x11a>
 8005c80:	2b60      	cmp	r3, #96	; 0x60
 8005c82:	d877      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b50      	cmp	r3, #80	; 0x50
 8005c86:	d03c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0xfa>
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d873      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d058      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x13a>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d86f      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d064      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005c98:	2b30      	cmp	r3, #48	; 0x30
 8005c9a:	d86b      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d060      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d867      	bhi.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d05c      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d05a      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x15a>
 8005cac:	e062      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f000 f965 	bl	8005f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	609a      	str	r2, [r3, #8]
      break;
 8005cda:	e04f      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6899      	ldr	r1, [r3, #8]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f000 f94e 	bl	8005f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cfe:	609a      	str	r2, [r3, #8]
      break;
 8005d00:	e03c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 f8c2 	bl	8005e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2150      	movs	r1, #80	; 0x50
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f91b 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d20:	e02c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 f8e1 	bl	8005ef6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2160      	movs	r1, #96	; 0x60
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f90b 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d40:	e01c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 f8a2 	bl	8005e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f8fb 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d60:	e00c      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 f8f2 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d72:	e003      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
      break;
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <TIM_Base_SetConfig+0xe4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00f      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d00b      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a31      	ldr	r2, [pc, #196]	; (8005e80 <TIM_Base_SetConfig+0xe8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a30      	ldr	r2, [pc, #192]	; (8005e84 <TIM_Base_SetConfig+0xec>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_Base_SetConfig+0x38>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <TIM_Base_SetConfig+0xf0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d108      	bne.n	8005de2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a25      	ldr	r2, [pc, #148]	; (8005e7c <TIM_Base_SetConfig+0xe4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01b      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df0:	d017      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a22      	ldr	r2, [pc, #136]	; (8005e80 <TIM_Base_SetConfig+0xe8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <TIM_Base_SetConfig+0xec>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a20      	ldr	r2, [pc, #128]	; (8005e88 <TIM_Base_SetConfig+0xf0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <TIM_Base_SetConfig+0xf4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <TIM_Base_SetConfig+0xf8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_Base_SetConfig+0x8a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <TIM_Base_SetConfig+0xfc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d108      	bne.n	8005e34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <TIM_Base_SetConfig+0xe4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d103      	bne.n	8005e68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	615a      	str	r2, [r3, #20]
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800

08005e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 030a 	bic.w	r3, r3, #10
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b087      	sub	sp, #28
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f023 0210 	bic.w	r2, r3, #16
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f043 0307 	orr.w	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	609a      	str	r2, [r3, #8]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	021a      	lsls	r2, r3, #8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	609a      	str	r2, [r3, #8]
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e050      	b.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d018      	beq.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d013      	beq.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a16      	ldr	r2, [pc, #88]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a15      	ldr	r2, [pc, #84]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d10c      	bne.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	4313      	orrs	r3, r2
 800606a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40014000 	.word	0x40014000

080060a8 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	460b      	mov	r3, r1
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e05f      	b.n	8006180 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7fa fd27 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2224      	movs	r2, #36	; 0x24
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f848 	bl	8006188 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006106:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006116:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 020f 	bic.w	r2, r2, #15
 8006126:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6919      	ldr	r1, [r3, #16]
 800612e:	7afa      	ldrb	r2, [r7, #11]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006146:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68d9      	ldr	r1, [r3, #12]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	430a      	orrs	r2, r1
 8006156:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006166:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800618c:	b0c0      	sub	sp, #256	; 0x100
 800618e:	af00      	add	r7, sp, #0
 8006190:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	68d9      	ldr	r1, [r3, #12]
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	ea40 0301 	orr.w	r3, r0, r1
 80061b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	431a      	orrs	r2, r3
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061e0:	f021 010c 	bic.w	r1, r1, #12
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ee:	430b      	orrs	r3, r1
 80061f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006202:	6999      	ldr	r1, [r3, #24]
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	ea40 0301 	orr.w	r3, r0, r1
 800620e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	4b8f      	ldr	r3, [pc, #572]	; (8006454 <UART_SetConfig+0x2cc>)
 8006218:	429a      	cmp	r2, r3
 800621a:	d005      	beq.n	8006228 <UART_SetConfig+0xa0>
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b8d      	ldr	r3, [pc, #564]	; (8006458 <UART_SetConfig+0x2d0>)
 8006224:	429a      	cmp	r2, r3
 8006226:	d104      	bne.n	8006232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006228:	f7ff fc30 	bl	8005a8c <HAL_RCC_GetPCLK2Freq>
 800622c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006230:	e003      	b.n	800623a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006232:	f7ff fc17 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 8006236:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006244:	f040 810c 	bne.w	8006460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800624c:	2200      	movs	r2, #0
 800624e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006252:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800625a:	4622      	mov	r2, r4
 800625c:	462b      	mov	r3, r5
 800625e:	1891      	adds	r1, r2, r2
 8006260:	65b9      	str	r1, [r7, #88]	; 0x58
 8006262:	415b      	adcs	r3, r3
 8006264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800626a:	4621      	mov	r1, r4
 800626c:	eb12 0801 	adds.w	r8, r2, r1
 8006270:	4629      	mov	r1, r5
 8006272:	eb43 0901 	adc.w	r9, r3, r1
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800628a:	4690      	mov	r8, r2
 800628c:	4699      	mov	r9, r3
 800628e:	4623      	mov	r3, r4
 8006290:	eb18 0303 	adds.w	r3, r8, r3
 8006294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006298:	462b      	mov	r3, r5
 800629a:	eb49 0303 	adc.w	r3, r9, r3
 800629e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062b6:	460b      	mov	r3, r1
 80062b8:	18db      	adds	r3, r3, r3
 80062ba:	653b      	str	r3, [r7, #80]	; 0x50
 80062bc:	4613      	mov	r3, r2
 80062be:	eb42 0303 	adc.w	r3, r2, r3
 80062c2:	657b      	str	r3, [r7, #84]	; 0x54
 80062c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062cc:	f7f9 ff84 	bl	80001d8 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4b61      	ldr	r3, [pc, #388]	; (800645c <UART_SetConfig+0x2d4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	011c      	lsls	r4, r3, #4
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80062f8:	415b      	adcs	r3, r3
 80062fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006300:	4641      	mov	r1, r8
 8006302:	eb12 0a01 	adds.w	sl, r2, r1
 8006306:	4649      	mov	r1, r9
 8006308:	eb43 0b01 	adc.w	fp, r3, r1
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800631c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006320:	4692      	mov	sl, r2
 8006322:	469b      	mov	fp, r3
 8006324:	4643      	mov	r3, r8
 8006326:	eb1a 0303 	adds.w	r3, sl, r3
 800632a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800632e:	464b      	mov	r3, r9
 8006330:	eb4b 0303 	adc.w	r3, fp, r3
 8006334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800634c:	460b      	mov	r3, r1
 800634e:	18db      	adds	r3, r3, r3
 8006350:	643b      	str	r3, [r7, #64]	; 0x40
 8006352:	4613      	mov	r3, r2
 8006354:	eb42 0303 	adc.w	r3, r2, r3
 8006358:	647b      	str	r3, [r7, #68]	; 0x44
 800635a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800635e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006362:	f7f9 ff39 	bl	80001d8 <__aeabi_uldivmod>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4611      	mov	r1, r2
 800636c:	4b3b      	ldr	r3, [pc, #236]	; (800645c <UART_SetConfig+0x2d4>)
 800636e:	fba3 2301 	umull	r2, r3, r3, r1
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	2264      	movs	r2, #100	; 0x64
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	1acb      	subs	r3, r1, r3
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006382:	4b36      	ldr	r3, [pc, #216]	; (800645c <UART_SetConfig+0x2d4>)
 8006384:	fba3 2302 	umull	r2, r3, r3, r2
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006390:	441c      	add	r4, r3
 8006392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800639c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80063ac:	415b      	adcs	r3, r3
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6339      	str	r1, [r7, #48]	; 0x30
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063e8:	464b      	mov	r3, r9
 80063ea:	460a      	mov	r2, r1
 80063ec:	eb42 0303 	adc.w	r3, r2, r3
 80063f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006400:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006408:	460b      	mov	r3, r1
 800640a:	18db      	adds	r3, r3, r3
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
 800640e:	4613      	mov	r3, r2
 8006410:	eb42 0303 	adc.w	r3, r2, r3
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800641a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800641e:	f7f9 fedb 	bl	80001d8 <__aeabi_uldivmod>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4b0d      	ldr	r3, [pc, #52]	; (800645c <UART_SetConfig+0x2d4>)
 8006428:	fba3 1302 	umull	r1, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	2164      	movs	r1, #100	; 0x64
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	3332      	adds	r3, #50	; 0x32
 800643a:	4a08      	ldr	r2, [pc, #32]	; (800645c <UART_SetConfig+0x2d4>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	f003 0207 	and.w	r2, r3, #7
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4422      	add	r2, r4
 800644e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006450:	e106      	b.n	8006660 <UART_SetConfig+0x4d8>
 8006452:	bf00      	nop
 8006454:	40011000 	.word	0x40011000
 8006458:	40011400 	.word	0x40011400
 800645c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006464:	2200      	movs	r2, #0
 8006466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800646a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800646e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006472:	4642      	mov	r2, r8
 8006474:	464b      	mov	r3, r9
 8006476:	1891      	adds	r1, r2, r2
 8006478:	6239      	str	r1, [r7, #32]
 800647a:	415b      	adcs	r3, r3
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
 800647e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006482:	4641      	mov	r1, r8
 8006484:	1854      	adds	r4, r2, r1
 8006486:	4649      	mov	r1, r9
 8006488:	eb43 0501 	adc.w	r5, r3, r1
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	00eb      	lsls	r3, r5, #3
 8006496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800649a:	00e2      	lsls	r2, r4, #3
 800649c:	4614      	mov	r4, r2
 800649e:	461d      	mov	r5, r3
 80064a0:	4643      	mov	r3, r8
 80064a2:	18e3      	adds	r3, r4, r3
 80064a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064a8:	464b      	mov	r3, r9
 80064aa:	eb45 0303 	adc.w	r3, r5, r3
 80064ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064ce:	4629      	mov	r1, r5
 80064d0:	008b      	lsls	r3, r1, #2
 80064d2:	4621      	mov	r1, r4
 80064d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064d8:	4621      	mov	r1, r4
 80064da:	008a      	lsls	r2, r1, #2
 80064dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064e0:	f7f9 fe7a 	bl	80001d8 <__aeabi_uldivmod>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4b60      	ldr	r3, [pc, #384]	; (800666c <UART_SetConfig+0x4e4>)
 80064ea:	fba3 2302 	umull	r2, r3, r3, r2
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	011c      	lsls	r4, r3, #4
 80064f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	1891      	adds	r1, r2, r2
 800650a:	61b9      	str	r1, [r7, #24]
 800650c:	415b      	adcs	r3, r3
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006514:	4641      	mov	r1, r8
 8006516:	1851      	adds	r1, r2, r1
 8006518:	6139      	str	r1, [r7, #16]
 800651a:	4649      	mov	r1, r9
 800651c:	414b      	adcs	r3, r1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800652c:	4659      	mov	r1, fp
 800652e:	00cb      	lsls	r3, r1, #3
 8006530:	4651      	mov	r1, sl
 8006532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006536:	4651      	mov	r1, sl
 8006538:	00ca      	lsls	r2, r1, #3
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	4603      	mov	r3, r0
 8006540:	4642      	mov	r2, r8
 8006542:	189b      	adds	r3, r3, r2
 8006544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006548:	464b      	mov	r3, r9
 800654a:	460a      	mov	r2, r1
 800654c:	eb42 0303 	adc.w	r3, r2, r3
 8006550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	67bb      	str	r3, [r7, #120]	; 0x78
 800655e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800656c:	4649      	mov	r1, r9
 800656e:	008b      	lsls	r3, r1, #2
 8006570:	4641      	mov	r1, r8
 8006572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006576:	4641      	mov	r1, r8
 8006578:	008a      	lsls	r2, r1, #2
 800657a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800657e:	f7f9 fe2b 	bl	80001d8 <__aeabi_uldivmod>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4611      	mov	r1, r2
 8006588:	4b38      	ldr	r3, [pc, #224]	; (800666c <UART_SetConfig+0x4e4>)
 800658a:	fba3 2301 	umull	r2, r3, r3, r1
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	2264      	movs	r2, #100	; 0x64
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	1acb      	subs	r3, r1, r3
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	3332      	adds	r3, #50	; 0x32
 800659c:	4a33      	ldr	r2, [pc, #204]	; (800666c <UART_SetConfig+0x4e4>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065a8:	441c      	add	r4, r3
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ae:	2200      	movs	r2, #0
 80065b0:	673b      	str	r3, [r7, #112]	; 0x70
 80065b2:	677a      	str	r2, [r7, #116]	; 0x74
 80065b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	1891      	adds	r1, r2, r2
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	415b      	adcs	r3, r3
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065c8:	4641      	mov	r1, r8
 80065ca:	1851      	adds	r1, r2, r1
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	4649      	mov	r1, r9
 80065d0:	414b      	adcs	r3, r1
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065e0:	4659      	mov	r1, fp
 80065e2:	00cb      	lsls	r3, r1, #3
 80065e4:	4651      	mov	r1, sl
 80065e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ea:	4651      	mov	r1, sl
 80065ec:	00ca      	lsls	r2, r1, #3
 80065ee:	4610      	mov	r0, r2
 80065f0:	4619      	mov	r1, r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	4642      	mov	r2, r8
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065fa:	464b      	mov	r3, r9
 80065fc:	460a      	mov	r2, r1
 80065fe:	eb42 0303 	adc.w	r3, r2, r3
 8006602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	663b      	str	r3, [r7, #96]	; 0x60
 800660e:	667a      	str	r2, [r7, #100]	; 0x64
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800661c:	4649      	mov	r1, r9
 800661e:	008b      	lsls	r3, r1, #2
 8006620:	4641      	mov	r1, r8
 8006622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006626:	4641      	mov	r1, r8
 8006628:	008a      	lsls	r2, r1, #2
 800662a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800662e:	f7f9 fdd3 	bl	80001d8 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <UART_SetConfig+0x4e4>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	; 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	3332      	adds	r3, #50	; 0x32
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <UART_SetConfig+0x4e4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 020f 	and.w	r2, r3, #15
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4422      	add	r2, r4
 800665e:	609a      	str	r2, [r3, #8]
}
 8006660:	bf00      	nop
 8006662:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006666:	46bd      	mov	sp, r7
 8006668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666c:	51eb851f 	.word	0x51eb851f

08006670 <memset>:
 8006670:	4402      	add	r2, r0
 8006672:	4603      	mov	r3, r0
 8006674:	4293      	cmp	r3, r2
 8006676:	d100      	bne.n	800667a <memset+0xa>
 8006678:	4770      	bx	lr
 800667a:	f803 1b01 	strb.w	r1, [r3], #1
 800667e:	e7f9      	b.n	8006674 <memset+0x4>

08006680 <__libc_init_array>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4d0d      	ldr	r5, [pc, #52]	; (80066b8 <__libc_init_array+0x38>)
 8006684:	4c0d      	ldr	r4, [pc, #52]	; (80066bc <__libc_init_array+0x3c>)
 8006686:	1b64      	subs	r4, r4, r5
 8006688:	10a4      	asrs	r4, r4, #2
 800668a:	2600      	movs	r6, #0
 800668c:	42a6      	cmp	r6, r4
 800668e:	d109      	bne.n	80066a4 <__libc_init_array+0x24>
 8006690:	4d0b      	ldr	r5, [pc, #44]	; (80066c0 <__libc_init_array+0x40>)
 8006692:	4c0c      	ldr	r4, [pc, #48]	; (80066c4 <__libc_init_array+0x44>)
 8006694:	f000 f818 	bl	80066c8 <_init>
 8006698:	1b64      	subs	r4, r4, r5
 800669a:	10a4      	asrs	r4, r4, #2
 800669c:	2600      	movs	r6, #0
 800669e:	42a6      	cmp	r6, r4
 80066a0:	d105      	bne.n	80066ae <__libc_init_array+0x2e>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a8:	4798      	blx	r3
 80066aa:	3601      	adds	r6, #1
 80066ac:	e7ee      	b.n	800668c <__libc_init_array+0xc>
 80066ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b2:	4798      	blx	r3
 80066b4:	3601      	adds	r6, #1
 80066b6:	e7f2      	b.n	800669e <__libc_init_array+0x1e>
 80066b8:	080076e0 	.word	0x080076e0
 80066bc:	080076e0 	.word	0x080076e0
 80066c0:	080076e0 	.word	0x080076e0
 80066c4:	080076e4 	.word	0x080076e4

080066c8 <_init>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr

080066d4 <_fini>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr
